// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dta-wed-api/v1/diaries/diaries.proto

package diaries

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiariesDataClient is the client API for DiariesData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiariesDataClient interface {
	GetUserDiariesByDate(ctx context.Context, in *GetUserDiariesByDateRequest, opts ...grpc.CallOption) (*GetUserDiariesByDateResponse, error)
	GetUserDiaryCalendar(ctx context.Context, in *GetUserDiaryCalendarRequest, opts ...grpc.CallOption) (*GetUserDiaryCalendarResponse, error)
	GetDiaryById(ctx context.Context, in *GetDiaryByIdRequest, opts ...grpc.CallOption) (*GetDiaryByIdResponse, error)
	UpsertDiaryAnswers(ctx context.Context, in *UpsertDiaryAnswersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateDiaryAnswers(ctx context.Context, in *CreateDiaryAnswersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDiaryAnswers(ctx context.Context, in *UpdateDiaryAnswersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDiaryAnswerByAnswerId(ctx context.Context, in *GetDiaryAnswerByAnswerIdRequest, opts ...grpc.CallOption) (*GetDiaryAnswerByAnswerIdResponse, error)
	DeleteDiaryAnswers(ctx context.Context, in *DeleteDiaryAnswersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type diariesDataClient struct {
	cc grpc.ClientConnInterface
}

func NewDiariesDataClient(cc grpc.ClientConnInterface) DiariesDataClient {
	return &diariesDataClient{cc}
}

func (c *diariesDataClient) GetUserDiariesByDate(ctx context.Context, in *GetUserDiariesByDateRequest, opts ...grpc.CallOption) (*GetUserDiariesByDateResponse, error) {
	out := new(GetUserDiariesByDateResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.diaries.DiariesData/GetUserDiariesByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diariesDataClient) GetUserDiaryCalendar(ctx context.Context, in *GetUserDiaryCalendarRequest, opts ...grpc.CallOption) (*GetUserDiaryCalendarResponse, error) {
	out := new(GetUserDiaryCalendarResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.diaries.DiariesData/GetUserDiaryCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diariesDataClient) GetDiaryById(ctx context.Context, in *GetDiaryByIdRequest, opts ...grpc.CallOption) (*GetDiaryByIdResponse, error) {
	out := new(GetDiaryByIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.diaries.DiariesData/GetDiaryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diariesDataClient) UpsertDiaryAnswers(ctx context.Context, in *UpsertDiaryAnswersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.diaries.DiariesData/UpsertDiaryAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diariesDataClient) CreateDiaryAnswers(ctx context.Context, in *CreateDiaryAnswersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.diaries.DiariesData/CreateDiaryAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diariesDataClient) UpdateDiaryAnswers(ctx context.Context, in *UpdateDiaryAnswersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.diaries.DiariesData/UpdateDiaryAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diariesDataClient) GetDiaryAnswerByAnswerId(ctx context.Context, in *GetDiaryAnswerByAnswerIdRequest, opts ...grpc.CallOption) (*GetDiaryAnswerByAnswerIdResponse, error) {
	out := new(GetDiaryAnswerByAnswerIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.diaries.DiariesData/GetDiaryAnswerByAnswerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diariesDataClient) DeleteDiaryAnswers(ctx context.Context, in *DeleteDiaryAnswersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.diaries.DiariesData/DeleteDiaryAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiariesDataServer is the server API for DiariesData service.
// All implementations must embed UnimplementedDiariesDataServer
// for forward compatibility
type DiariesDataServer interface {
	GetUserDiariesByDate(context.Context, *GetUserDiariesByDateRequest) (*GetUserDiariesByDateResponse, error)
	GetUserDiaryCalendar(context.Context, *GetUserDiaryCalendarRequest) (*GetUserDiaryCalendarResponse, error)
	GetDiaryById(context.Context, *GetDiaryByIdRequest) (*GetDiaryByIdResponse, error)
	UpsertDiaryAnswers(context.Context, *UpsertDiaryAnswersRequest) (*emptypb.Empty, error)
	CreateDiaryAnswers(context.Context, *CreateDiaryAnswersRequest) (*emptypb.Empty, error)
	UpdateDiaryAnswers(context.Context, *UpdateDiaryAnswersRequest) (*emptypb.Empty, error)
	GetDiaryAnswerByAnswerId(context.Context, *GetDiaryAnswerByAnswerIdRequest) (*GetDiaryAnswerByAnswerIdResponse, error)
	DeleteDiaryAnswers(context.Context, *DeleteDiaryAnswersRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDiariesDataServer()
}

// UnimplementedDiariesDataServer must be embedded to have forward compatible implementations.
type UnimplementedDiariesDataServer struct {
}

func (UnimplementedDiariesDataServer) GetUserDiariesByDate(context.Context, *GetUserDiariesByDateRequest) (*GetUserDiariesByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDiariesByDate not implemented")
}
func (UnimplementedDiariesDataServer) GetUserDiaryCalendar(context.Context, *GetUserDiaryCalendarRequest) (*GetUserDiaryCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDiaryCalendar not implemented")
}
func (UnimplementedDiariesDataServer) GetDiaryById(context.Context, *GetDiaryByIdRequest) (*GetDiaryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiaryById not implemented")
}
func (UnimplementedDiariesDataServer) UpsertDiaryAnswers(context.Context, *UpsertDiaryAnswersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDiaryAnswers not implemented")
}
func (UnimplementedDiariesDataServer) CreateDiaryAnswers(context.Context, *CreateDiaryAnswersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiaryAnswers not implemented")
}
func (UnimplementedDiariesDataServer) UpdateDiaryAnswers(context.Context, *UpdateDiaryAnswersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiaryAnswers not implemented")
}
func (UnimplementedDiariesDataServer) GetDiaryAnswerByAnswerId(context.Context, *GetDiaryAnswerByAnswerIdRequest) (*GetDiaryAnswerByAnswerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiaryAnswerByAnswerId not implemented")
}
func (UnimplementedDiariesDataServer) DeleteDiaryAnswers(context.Context, *DeleteDiaryAnswersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiaryAnswers not implemented")
}
func (UnimplementedDiariesDataServer) mustEmbedUnimplementedDiariesDataServer() {}

// UnsafeDiariesDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiariesDataServer will
// result in compilation errors.
type UnsafeDiariesDataServer interface {
	mustEmbedUnimplementedDiariesDataServer()
}

func RegisterDiariesDataServer(s grpc.ServiceRegistrar, srv DiariesDataServer) {
	s.RegisterService(&DiariesData_ServiceDesc, srv)
}

func _DiariesData_GetUserDiariesByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDiariesByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiariesDataServer).GetUserDiariesByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.diaries.DiariesData/GetUserDiariesByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiariesDataServer).GetUserDiariesByDate(ctx, req.(*GetUserDiariesByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiariesData_GetUserDiaryCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDiaryCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiariesDataServer).GetUserDiaryCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.diaries.DiariesData/GetUserDiaryCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiariesDataServer).GetUserDiaryCalendar(ctx, req.(*GetUserDiaryCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiariesData_GetDiaryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiaryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiariesDataServer).GetDiaryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.diaries.DiariesData/GetDiaryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiariesDataServer).GetDiaryById(ctx, req.(*GetDiaryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiariesData_UpsertDiaryAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDiaryAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiariesDataServer).UpsertDiaryAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.diaries.DiariesData/UpsertDiaryAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiariesDataServer).UpsertDiaryAnswers(ctx, req.(*UpsertDiaryAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiariesData_CreateDiaryAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiaryAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiariesDataServer).CreateDiaryAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.diaries.DiariesData/CreateDiaryAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiariesDataServer).CreateDiaryAnswers(ctx, req.(*CreateDiaryAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiariesData_UpdateDiaryAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiaryAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiariesDataServer).UpdateDiaryAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.diaries.DiariesData/UpdateDiaryAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiariesDataServer).UpdateDiaryAnswers(ctx, req.(*UpdateDiaryAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiariesData_GetDiaryAnswerByAnswerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiaryAnswerByAnswerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiariesDataServer).GetDiaryAnswerByAnswerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.diaries.DiariesData/GetDiaryAnswerByAnswerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiariesDataServer).GetDiaryAnswerByAnswerId(ctx, req.(*GetDiaryAnswerByAnswerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiariesData_DeleteDiaryAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiaryAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiariesDataServer).DeleteDiaryAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.diaries.DiariesData/DeleteDiaryAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiariesDataServer).DeleteDiaryAnswers(ctx, req.(*DeleteDiaryAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiariesData_ServiceDesc is the grpc.ServiceDesc for DiariesData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiariesData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dta.wed.api.v1.diaries.DiariesData",
	HandlerType: (*DiariesDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDiariesByDate",
			Handler:    _DiariesData_GetUserDiariesByDate_Handler,
		},
		{
			MethodName: "GetUserDiaryCalendar",
			Handler:    _DiariesData_GetUserDiaryCalendar_Handler,
		},
		{
			MethodName: "GetDiaryById",
			Handler:    _DiariesData_GetDiaryById_Handler,
		},
		{
			MethodName: "UpsertDiaryAnswers",
			Handler:    _DiariesData_UpsertDiaryAnswers_Handler,
		},
		{
			MethodName: "CreateDiaryAnswers",
			Handler:    _DiariesData_CreateDiaryAnswers_Handler,
		},
		{
			MethodName: "UpdateDiaryAnswers",
			Handler:    _DiariesData_UpdateDiaryAnswers_Handler,
		},
		{
			MethodName: "GetDiaryAnswerByAnswerId",
			Handler:    _DiariesData_GetDiaryAnswerByAnswerId_Handler,
		},
		{
			MethodName: "DeleteDiaryAnswers",
			Handler:    _DiariesData_DeleteDiaryAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dta-wed-api/v1/diaries/diaries.proto",
}
