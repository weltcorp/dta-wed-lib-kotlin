// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dta-wed-api/v1/diaries/diaries.proto

package diaries

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserDiariesByDateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDiariesByDateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDiariesByDateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDiariesByDateRequestMultiError, or nil if none found.
func (m *GetUserDiariesByDateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDiariesByDateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserDiariesByDateRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDate() <= 0 {
		err := GetUserDiariesByDateRequestValidationError{
			field:  "Date",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserDiariesByDateRequestMultiError(errors)
	}

	return nil
}

// GetUserDiariesByDateRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserDiariesByDateRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserDiariesByDateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDiariesByDateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDiariesByDateRequestMultiError) AllErrors() []error { return m }

// GetUserDiariesByDateRequestValidationError is the validation error returned
// by GetUserDiariesByDateRequest.Validate if the designated constraints
// aren't met.
type GetUserDiariesByDateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDiariesByDateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDiariesByDateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDiariesByDateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDiariesByDateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDiariesByDateRequestValidationError) ErrorName() string {
	return "GetUserDiariesByDateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDiariesByDateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDiariesByDateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDiariesByDateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDiariesByDateRequestValidationError{}

// Validate checks the field values on MealDiarySchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MealDiarySchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MealDiarySchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MealDiaryScheduleMultiError, or nil if none found.
func (m *MealDiarySchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *MealDiarySchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for When

	if len(errors) > 0 {
		return MealDiaryScheduleMultiError(errors)
	}

	return nil
}

// MealDiaryScheduleMultiError is an error wrapping multiple validation errors
// returned by MealDiarySchedule.ValidateAll() if the designated constraints
// aren't met.
type MealDiaryScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MealDiaryScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MealDiaryScheduleMultiError) AllErrors() []error { return m }

// MealDiaryScheduleValidationError is the validation error returned by
// MealDiarySchedule.Validate if the designated constraints aren't met.
type MealDiaryScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MealDiaryScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MealDiaryScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MealDiaryScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MealDiaryScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MealDiaryScheduleValidationError) ErrorName() string {
	return "MealDiaryScheduleValidationError"
}

// Error satisfies the builtin error interface
func (e MealDiaryScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMealDiarySchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MealDiaryScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MealDiaryScheduleValidationError{}

// Validate checks the field values on MealDiary with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MealDiary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MealDiary with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MealDiaryMultiError, or nil
// if none found.
func (m *MealDiary) ValidateAll() error {
	return m.validate(true)
}

func (m *MealDiary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	// no validation rules for MealTime

	// no validation rules for Emotion

	// no validation rules for Body

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MealDiaryValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MealDiaryValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MealDiaryValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AnswerId != nil {
		// no validation rules for AnswerId
	}

	if len(errors) > 0 {
		return MealDiaryMultiError(errors)
	}

	return nil
}

// MealDiaryMultiError is an error wrapping multiple validation errors returned
// by MealDiary.ValidateAll() if the designated constraints aren't met.
type MealDiaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MealDiaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MealDiaryMultiError) AllErrors() []error { return m }

// MealDiaryValidationError is the validation error returned by
// MealDiary.Validate if the designated constraints aren't met.
type MealDiaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MealDiaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MealDiaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MealDiaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MealDiaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MealDiaryValidationError) ErrorName() string { return "MealDiaryValidationError" }

// Error satisfies the builtin error interface
func (e MealDiaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMealDiary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MealDiaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MealDiaryValidationError{}

// Validate checks the field values on GetUserDiariesByDateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDiariesByDateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDiariesByDateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDiariesByDateResponseMultiError, or nil if none found.
func (m *GetUserDiariesByDateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDiariesByDateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserDiariesByDateResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserDiariesByDateResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserDiariesByDateResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserDiariesByDateResponseMultiError(errors)
	}

	return nil
}

// GetUserDiariesByDateResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserDiariesByDateResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserDiariesByDateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDiariesByDateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDiariesByDateResponseMultiError) AllErrors() []error { return m }

// GetUserDiariesByDateResponseValidationError is the validation error returned
// by GetUserDiariesByDateResponse.Validate if the designated constraints
// aren't met.
type GetUserDiariesByDateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDiariesByDateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDiariesByDateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDiariesByDateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDiariesByDateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDiariesByDateResponseValidationError) ErrorName() string {
	return "GetUserDiariesByDateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDiariesByDateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDiariesByDateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDiariesByDateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDiariesByDateResponseValidationError{}

// Validate checks the field values on GetUserDiaryCalendarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDiaryCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDiaryCalendarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDiaryCalendarRequestMultiError, or nil if none found.
func (m *GetUserDiaryCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDiaryCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserDiaryCalendarRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errors) > 0 {
		return GetUserDiaryCalendarRequestMultiError(errors)
	}

	return nil
}

// GetUserDiaryCalendarRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserDiaryCalendarRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserDiaryCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDiaryCalendarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDiaryCalendarRequestMultiError) AllErrors() []error { return m }

// GetUserDiaryCalendarRequestValidationError is the validation error returned
// by GetUserDiaryCalendarRequest.Validate if the designated constraints
// aren't met.
type GetUserDiaryCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDiaryCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDiaryCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDiaryCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDiaryCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDiaryCalendarRequestValidationError) ErrorName() string {
	return "GetUserDiaryCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDiaryCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDiaryCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDiaryCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDiaryCalendarRequestValidationError{}

// Validate checks the field values on CalendarDiary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CalendarDiary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalendarDiary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CalendarDiaryMultiError, or
// nil if none found.
func (m *CalendarDiary) ValidateAll() error {
	return m.validate(true)
}

func (m *CalendarDiary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiaryId

	// no validation rules for Answer

	if len(errors) > 0 {
		return CalendarDiaryMultiError(errors)
	}

	return nil
}

// CalendarDiaryMultiError is an error wrapping multiple validation errors
// returned by CalendarDiary.ValidateAll() if the designated constraints
// aren't met.
type CalendarDiaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalendarDiaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalendarDiaryMultiError) AllErrors() []error { return m }

// CalendarDiaryValidationError is the validation error returned by
// CalendarDiary.Validate if the designated constraints aren't met.
type CalendarDiaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalendarDiaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalendarDiaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalendarDiaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalendarDiaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalendarDiaryValidationError) ErrorName() string { return "CalendarDiaryValidationError" }

// Error satisfies the builtin error interface
func (e CalendarDiaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalendarDiary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalendarDiaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalendarDiaryValidationError{}

// Validate checks the field values on UserDiaryCalendar with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDiaryCalendar) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDiaryCalendar with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDiaryCalendarMultiError, or nil if none found.
func (m *UserDiaryCalendar) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDiaryCalendar) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	for idx, item := range m.GetDiaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserDiaryCalendarValidationError{
						field:  fmt.Sprintf("Diaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserDiaryCalendarValidationError{
						field:  fmt.Sprintf("Diaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserDiaryCalendarValidationError{
					field:  fmt.Sprintf("Diaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserDiaryCalendarMultiError(errors)
	}

	return nil
}

// UserDiaryCalendarMultiError is an error wrapping multiple validation errors
// returned by UserDiaryCalendar.ValidateAll() if the designated constraints
// aren't met.
type UserDiaryCalendarMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDiaryCalendarMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDiaryCalendarMultiError) AllErrors() []error { return m }

// UserDiaryCalendarValidationError is the validation error returned by
// UserDiaryCalendar.Validate if the designated constraints aren't met.
type UserDiaryCalendarValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDiaryCalendarValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDiaryCalendarValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDiaryCalendarValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDiaryCalendarValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDiaryCalendarValidationError) ErrorName() string {
	return "UserDiaryCalendarValidationError"
}

// Error satisfies the builtin error interface
func (e UserDiaryCalendarValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDiaryCalendar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDiaryCalendarValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDiaryCalendarValidationError{}

// Validate checks the field values on GetUserDiaryCalendarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDiaryCalendarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDiaryCalendarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDiaryCalendarResponseMultiError, or nil if none found.
func (m *GetUserDiaryCalendarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDiaryCalendarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserDiaryCalendarResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserDiaryCalendarResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserDiaryCalendarResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserDiaryCalendarResponseMultiError(errors)
	}

	return nil
}

// GetUserDiaryCalendarResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserDiaryCalendarResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserDiaryCalendarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDiaryCalendarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDiaryCalendarResponseMultiError) AllErrors() []error { return m }

// GetUserDiaryCalendarResponseValidationError is the validation error returned
// by GetUserDiaryCalendarResponse.Validate if the designated constraints
// aren't met.
type GetUserDiaryCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDiaryCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDiaryCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDiaryCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDiaryCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDiaryCalendarResponseValidationError) ErrorName() string {
	return "GetUserDiaryCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDiaryCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDiaryCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDiaryCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDiaryCalendarResponseValidationError{}

// Validate checks the field values on GetDiaryByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiaryByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiaryByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiaryByIdRequestMultiError, or nil if none found.
func (m *GetDiaryByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiaryByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiaryId

	if len(errors) > 0 {
		return GetDiaryByIdRequestMultiError(errors)
	}

	return nil
}

// GetDiaryByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetDiaryByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDiaryByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiaryByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiaryByIdRequestMultiError) AllErrors() []error { return m }

// GetDiaryByIdRequestValidationError is the validation error returned by
// GetDiaryByIdRequest.Validate if the designated constraints aren't met.
type GetDiaryByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiaryByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiaryByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiaryByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiaryByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiaryByIdRequestValidationError) ErrorName() string {
	return "GetDiaryByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiaryByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiaryByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiaryByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiaryByIdRequestValidationError{}

// Validate checks the field values on DiaryItemOption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiaryItemOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiaryItemOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiaryItemOptionMultiError, or nil if none found.
func (m *DiaryItemOption) ValidateAll() error {
	return m.validate(true)
}

func (m *DiaryItemOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Index

	// no validation rules for Memo

	// no validation rules for DiaryItemId

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiaryItemOptionValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiaryItemOptionValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiaryItemOptionValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Order

	if len(errors) > 0 {
		return DiaryItemOptionMultiError(errors)
	}

	return nil
}

// DiaryItemOptionMultiError is an error wrapping multiple validation errors
// returned by DiaryItemOption.ValidateAll() if the designated constraints
// aren't met.
type DiaryItemOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiaryItemOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiaryItemOptionMultiError) AllErrors() []error { return m }

// DiaryItemOptionValidationError is the validation error returned by
// DiaryItemOption.Validate if the designated constraints aren't met.
type DiaryItemOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiaryItemOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiaryItemOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiaryItemOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiaryItemOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiaryItemOptionValidationError) ErrorName() string { return "DiaryItemOptionValidationError" }

// Error satisfies the builtin error interface
func (e DiaryItemOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiaryItemOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiaryItemOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiaryItemOptionValidationError{}

// Validate checks the field values on DiaryItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DiaryItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiaryItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiaryItemMultiError, or nil
// if none found.
func (m *DiaryItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DiaryItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Required

	// no validation rules for Url

	// no validation rules for Memo

	// no validation rules for DiaryId

	// no validation rules for DiaryStatusId

	// no validation rules for ItemTypeId

	// no validation rules for Order

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiaryItemValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiaryItemValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiaryItemValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiaryItemValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiaryItemValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiaryItemValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiaryItemMultiError(errors)
	}

	return nil
}

// DiaryItemMultiError is an error wrapping multiple validation errors returned
// by DiaryItem.ValidateAll() if the designated constraints aren't met.
type DiaryItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiaryItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiaryItemMultiError) AllErrors() []error { return m }

// DiaryItemValidationError is the validation error returned by
// DiaryItem.Validate if the designated constraints aren't met.
type DiaryItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiaryItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiaryItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiaryItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiaryItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiaryItemValidationError) ErrorName() string { return "DiaryItemValidationError" }

// Error satisfies the builtin error interface
func (e DiaryItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiaryItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiaryItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiaryItemValidationError{}

// Validate checks the field values on GetDiaryByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiaryByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiaryByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiaryByIdResponseMultiError, or nil if none found.
func (m *GetDiaryByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiaryByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDiaryByIdResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDiaryByIdResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDiaryByIdResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDiaryByIdResponseMultiError(errors)
	}

	return nil
}

// GetDiaryByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetDiaryByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDiaryByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiaryByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiaryByIdResponseMultiError) AllErrors() []error { return m }

// GetDiaryByIdResponseValidationError is the validation error returned by
// GetDiaryByIdResponse.Validate if the designated constraints aren't met.
type GetDiaryByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiaryByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiaryByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiaryByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiaryByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiaryByIdResponseValidationError) ErrorName() string {
	return "GetDiaryByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiaryByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiaryByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiaryByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiaryByIdResponseValidationError{}

// Validate checks the field values on DiaryAnswerOption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiaryAnswerOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiaryAnswerOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiaryAnswerOptionMultiError, or nil if none found.
func (m *DiaryAnswerOption) ValidateAll() error {
	return m.validate(true)
}

func (m *DiaryAnswerOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiaryOptionId

	// no validation rules for AnswerText

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiaryAnswerOptionValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiaryAnswerOptionValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiaryAnswerOptionValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiaryAnswerOptionMultiError(errors)
	}

	return nil
}

// DiaryAnswerOptionMultiError is an error wrapping multiple validation errors
// returned by DiaryAnswerOption.ValidateAll() if the designated constraints
// aren't met.
type DiaryAnswerOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiaryAnswerOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiaryAnswerOptionMultiError) AllErrors() []error { return m }

// DiaryAnswerOptionValidationError is the validation error returned by
// DiaryAnswerOption.Validate if the designated constraints aren't met.
type DiaryAnswerOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiaryAnswerOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiaryAnswerOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiaryAnswerOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiaryAnswerOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiaryAnswerOptionValidationError) ErrorName() string {
	return "DiaryAnswerOptionValidationError"
}

// Error satisfies the builtin error interface
func (e DiaryAnswerOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiaryAnswerOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiaryAnswerOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiaryAnswerOptionValidationError{}

// Validate checks the field values on DiaryAnswer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DiaryAnswer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiaryAnswer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiaryAnswerMultiError, or
// nil if none found.
func (m *DiaryAnswer) ValidateAll() error {
	return m.validate(true)
}

func (m *DiaryAnswer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiaryItemId

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiaryAnswerValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiaryAnswerValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiaryAnswerValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiaryAnswerMultiError(errors)
	}

	return nil
}

// DiaryAnswerMultiError is an error wrapping multiple validation errors
// returned by DiaryAnswer.ValidateAll() if the designated constraints aren't met.
type DiaryAnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiaryAnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiaryAnswerMultiError) AllErrors() []error { return m }

// DiaryAnswerValidationError is the validation error returned by
// DiaryAnswer.Validate if the designated constraints aren't met.
type DiaryAnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiaryAnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiaryAnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiaryAnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiaryAnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiaryAnswerValidationError) ErrorName() string { return "DiaryAnswerValidationError" }

// Error satisfies the builtin error interface
func (e DiaryAnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiaryAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiaryAnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiaryAnswerValidationError{}

// Validate checks the field values on UpsertDiaryAnswersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertDiaryAnswersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertDiaryAnswersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertDiaryAnswersRequestMultiError, or nil if none found.
func (m *UpsertDiaryAnswersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertDiaryAnswersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDiaryId() <= 0 {
		err := UpsertDiaryAnswersRequestValidationError{
			field:  "DiaryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := UpsertDiaryAnswersRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDate() <= 0 {
		err := UpsertDiaryAnswersRequestValidationError{
			field:  "Date",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAnswers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertDiaryAnswersRequestValidationError{
						field:  fmt.Sprintf("Answers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertDiaryAnswersRequestValidationError{
						field:  fmt.Sprintf("Answers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertDiaryAnswersRequestValidationError{
					field:  fmt.Sprintf("Answers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertDiaryAnswersRequestMultiError(errors)
	}

	return nil
}

// UpsertDiaryAnswersRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertDiaryAnswersRequest.ValidateAll() if the
// designated constraints aren't met.
type UpsertDiaryAnswersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertDiaryAnswersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertDiaryAnswersRequestMultiError) AllErrors() []error { return m }

// UpsertDiaryAnswersRequestValidationError is the validation error returned by
// UpsertDiaryAnswersRequest.Validate if the designated constraints aren't met.
type UpsertDiaryAnswersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertDiaryAnswersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertDiaryAnswersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertDiaryAnswersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertDiaryAnswersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertDiaryAnswersRequestValidationError) ErrorName() string {
	return "UpsertDiaryAnswersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertDiaryAnswersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertDiaryAnswersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertDiaryAnswersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertDiaryAnswersRequestValidationError{}

// Validate checks the field values on CreateDiaryAnswersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDiaryAnswersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiaryAnswersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDiaryAnswersRequestMultiError, or nil if none found.
func (m *CreateDiaryAnswersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiaryAnswersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDiaryId() <= 0 {
		err := CreateDiaryAnswersRequestValidationError{
			field:  "DiaryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := CreateDiaryAnswersRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDate() <= 0 {
		err := CreateDiaryAnswersRequestValidationError{
			field:  "Date",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAnswers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDiaryAnswersRequestValidationError{
						field:  fmt.Sprintf("Answers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDiaryAnswersRequestValidationError{
						field:  fmt.Sprintf("Answers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDiaryAnswersRequestValidationError{
					field:  fmt.Sprintf("Answers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDiaryAnswersRequestMultiError(errors)
	}

	return nil
}

// CreateDiaryAnswersRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDiaryAnswersRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateDiaryAnswersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiaryAnswersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiaryAnswersRequestMultiError) AllErrors() []error { return m }

// CreateDiaryAnswersRequestValidationError is the validation error returned by
// CreateDiaryAnswersRequest.Validate if the designated constraints aren't met.
type CreateDiaryAnswersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiaryAnswersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiaryAnswersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiaryAnswersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiaryAnswersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiaryAnswersRequestValidationError) ErrorName() string {
	return "CreateDiaryAnswersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiaryAnswersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiaryAnswersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiaryAnswersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiaryAnswersRequestValidationError{}

// Validate checks the field values on UpdateDiaryAnswersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDiaryAnswersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiaryAnswersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDiaryAnswersRequestMultiError, or nil if none found.
func (m *UpdateDiaryAnswersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiaryAnswersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAnswerId() <= 0 {
		err := UpdateDiaryAnswersRequestValidationError{
			field:  "AnswerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDate() <= 0 {
		err := UpdateDiaryAnswersRequestValidationError{
			field:  "Date",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAnswers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDiaryAnswersRequestValidationError{
						field:  fmt.Sprintf("Answers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDiaryAnswersRequestValidationError{
						field:  fmt.Sprintf("Answers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDiaryAnswersRequestValidationError{
					field:  fmt.Sprintf("Answers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDiaryAnswersRequestMultiError(errors)
	}

	return nil
}

// UpdateDiaryAnswersRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDiaryAnswersRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateDiaryAnswersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiaryAnswersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiaryAnswersRequestMultiError) AllErrors() []error { return m }

// UpdateDiaryAnswersRequestValidationError is the validation error returned by
// UpdateDiaryAnswersRequest.Validate if the designated constraints aren't met.
type UpdateDiaryAnswersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiaryAnswersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiaryAnswersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiaryAnswersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiaryAnswersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiaryAnswersRequestValidationError) ErrorName() string {
	return "UpdateDiaryAnswersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiaryAnswersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiaryAnswersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiaryAnswersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiaryAnswersRequestValidationError{}

// Validate checks the field values on DeleteDiaryAnswersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDiaryAnswersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDiaryAnswersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDiaryAnswersRequestMultiError, or nil if none found.
func (m *DeleteDiaryAnswersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDiaryAnswersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAnswerId() <= 0 {
		err := DeleteDiaryAnswersRequestValidationError{
			field:  "AnswerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDiaryAnswersRequestMultiError(errors)
	}

	return nil
}

// DeleteDiaryAnswersRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDiaryAnswersRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteDiaryAnswersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDiaryAnswersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDiaryAnswersRequestMultiError) AllErrors() []error { return m }

// DeleteDiaryAnswersRequestValidationError is the validation error returned by
// DeleteDiaryAnswersRequest.Validate if the designated constraints aren't met.
type DeleteDiaryAnswersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDiaryAnswersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDiaryAnswersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDiaryAnswersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDiaryAnswersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDiaryAnswersRequestValidationError) ErrorName() string {
	return "DeleteDiaryAnswersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDiaryAnswersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDiaryAnswersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDiaryAnswersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDiaryAnswersRequestValidationError{}

// Validate checks the field values on GetDiaryAnswerByAnswerIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiaryAnswerByAnswerIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiaryAnswerByAnswerIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDiaryAnswerByAnswerIdRequestMultiError, or nil if none found.
func (m *GetDiaryAnswerByAnswerIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiaryAnswerByAnswerIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAnswerId() <= 0 {
		err := GetDiaryAnswerByAnswerIdRequestValidationError{
			field:  "AnswerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDiaryAnswerByAnswerIdRequestMultiError(errors)
	}

	return nil
}

// GetDiaryAnswerByAnswerIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetDiaryAnswerByAnswerIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetDiaryAnswerByAnswerIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiaryAnswerByAnswerIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiaryAnswerByAnswerIdRequestMultiError) AllErrors() []error { return m }

// GetDiaryAnswerByAnswerIdRequestValidationError is the validation error
// returned by GetDiaryAnswerByAnswerIdRequest.Validate if the designated
// constraints aren't met.
type GetDiaryAnswerByAnswerIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiaryAnswerByAnswerIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiaryAnswerByAnswerIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiaryAnswerByAnswerIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiaryAnswerByAnswerIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiaryAnswerByAnswerIdRequestValidationError) ErrorName() string {
	return "GetDiaryAnswerByAnswerIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiaryAnswerByAnswerIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiaryAnswerByAnswerIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiaryAnswerByAnswerIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiaryAnswerByAnswerIdRequestValidationError{}

// Validate checks the field values on DiaryItemAnswers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiaryItemAnswers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiaryItemAnswers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiaryItemAnswersMultiError, or nil if none found.
func (m *DiaryItemAnswers) ValidateAll() error {
	return m.validate(true)
}

func (m *DiaryItemAnswers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	for idx, item := range m.GetItemAnswers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiaryItemAnswersValidationError{
						field:  fmt.Sprintf("ItemAnswers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiaryItemAnswersValidationError{
						field:  fmt.Sprintf("ItemAnswers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiaryItemAnswersValidationError{
					field:  fmt.Sprintf("ItemAnswers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiaryItemAnswersMultiError(errors)
	}

	return nil
}

// DiaryItemAnswersMultiError is an error wrapping multiple validation errors
// returned by DiaryItemAnswers.ValidateAll() if the designated constraints
// aren't met.
type DiaryItemAnswersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiaryItemAnswersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiaryItemAnswersMultiError) AllErrors() []error { return m }

// DiaryItemAnswersValidationError is the validation error returned by
// DiaryItemAnswers.Validate if the designated constraints aren't met.
type DiaryItemAnswersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiaryItemAnswersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiaryItemAnswersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiaryItemAnswersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiaryItemAnswersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiaryItemAnswersValidationError) ErrorName() string { return "DiaryItemAnswersValidationError" }

// Error satisfies the builtin error interface
func (e DiaryItemAnswersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiaryItemAnswers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiaryItemAnswersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiaryItemAnswersValidationError{}

// Validate checks the field values on DiaryItemAnswer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiaryItemAnswer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiaryItemAnswer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiaryItemAnswerMultiError, or nil if none found.
func (m *DiaryItemAnswer) ValidateAll() error {
	return m.validate(true)
}

func (m *DiaryItemAnswer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OptionId

	// no validation rules for DiaryItemAnswerText

	if all {
		switch v := interface{}(m.GetDiaryItemAnswerData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiaryItemAnswerValidationError{
					field:  "DiaryItemAnswerData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiaryItemAnswerValidationError{
					field:  "DiaryItemAnswerData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiaryItemAnswerData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiaryItemAnswerValidationError{
				field:  "DiaryItemAnswerData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiaryItemAnswerId

	if len(errors) > 0 {
		return DiaryItemAnswerMultiError(errors)
	}

	return nil
}

// DiaryItemAnswerMultiError is an error wrapping multiple validation errors
// returned by DiaryItemAnswer.ValidateAll() if the designated constraints
// aren't met.
type DiaryItemAnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiaryItemAnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiaryItemAnswerMultiError) AllErrors() []error { return m }

// DiaryItemAnswerValidationError is the validation error returned by
// DiaryItemAnswer.Validate if the designated constraints aren't met.
type DiaryItemAnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiaryItemAnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiaryItemAnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiaryItemAnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiaryItemAnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiaryItemAnswerValidationError) ErrorName() string { return "DiaryItemAnswerValidationError" }

// Error satisfies the builtin error interface
func (e DiaryItemAnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiaryItemAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiaryItemAnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiaryItemAnswerValidationError{}

// Validate checks the field values on GetDiaryAnswerByAnswerIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDiaryAnswerByAnswerIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiaryAnswerByAnswerIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDiaryAnswerByAnswerIdResponseMultiError, or nil if none found.
func (m *GetDiaryAnswerByAnswerIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiaryAnswerByAnswerIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for AnswerId

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDiaryAnswerByAnswerIdResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDiaryAnswerByAnswerIdResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDiaryAnswerByAnswerIdResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDiaryAnswerByAnswerIdResponseMultiError(errors)
	}

	return nil
}

// GetDiaryAnswerByAnswerIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetDiaryAnswerByAnswerIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDiaryAnswerByAnswerIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiaryAnswerByAnswerIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiaryAnswerByAnswerIdResponseMultiError) AllErrors() []error { return m }

// GetDiaryAnswerByAnswerIdResponseValidationError is the validation error
// returned by GetDiaryAnswerByAnswerIdResponse.Validate if the designated
// constraints aren't met.
type GetDiaryAnswerByAnswerIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiaryAnswerByAnswerIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiaryAnswerByAnswerIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiaryAnswerByAnswerIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiaryAnswerByAnswerIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiaryAnswerByAnswerIdResponseValidationError) ErrorName() string {
	return "GetDiaryAnswerByAnswerIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiaryAnswerByAnswerIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiaryAnswerByAnswerIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiaryAnswerByAnswerIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiaryAnswerByAnswerIdResponseValidationError{}
