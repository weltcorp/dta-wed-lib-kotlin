// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dta-wed-api/v1/configs/configs.proto

package configs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigsDataClient is the client API for ConfigsData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigsDataClient interface {
	CreateUserDbmPermissionLog(ctx context.Context, in *CreateUserDbmPermissionLogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpsertUserConfig(ctx context.Context, in *UpsertUserConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserConfigPushNotification(ctx context.Context, in *GetUserConfigPushNotificationRequest, opts ...grpc.CallOption) (*GetUserConfigPushNotificationResponse, error)
	UpsertUserFcmToken(ctx context.Context, in *UpsertUserFcmTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserFcmToken(ctx context.Context, in *GetUserFcmTokenRequest, opts ...grpc.CallOption) (*GetUserFcmTokenResponse, error)
	CreateIssueAndEmailAssignee(ctx context.Context, in *CreateIssueAndEmailAssigneeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type configsDataClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigsDataClient(cc grpc.ClientConnInterface) ConfigsDataClient {
	return &configsDataClient{cc}
}

func (c *configsDataClient) CreateUserDbmPermissionLog(ctx context.Context, in *CreateUserDbmPermissionLogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.configs.ConfigsData/CreateUserDbmPermissionLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configsDataClient) UpsertUserConfig(ctx context.Context, in *UpsertUserConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.configs.ConfigsData/UpsertUserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configsDataClient) GetUserConfigPushNotification(ctx context.Context, in *GetUserConfigPushNotificationRequest, opts ...grpc.CallOption) (*GetUserConfigPushNotificationResponse, error) {
	out := new(GetUserConfigPushNotificationResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.configs.ConfigsData/GetUserConfigPushNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configsDataClient) UpsertUserFcmToken(ctx context.Context, in *UpsertUserFcmTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.configs.ConfigsData/UpsertUserFcmToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configsDataClient) GetUserFcmToken(ctx context.Context, in *GetUserFcmTokenRequest, opts ...grpc.CallOption) (*GetUserFcmTokenResponse, error) {
	out := new(GetUserFcmTokenResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.configs.ConfigsData/GetUserFcmToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configsDataClient) CreateIssueAndEmailAssignee(ctx context.Context, in *CreateIssueAndEmailAssigneeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.configs.ConfigsData/CreateIssueAndEmailAssignee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigsDataServer is the server API for ConfigsData service.
// All implementations must embed UnimplementedConfigsDataServer
// for forward compatibility
type ConfigsDataServer interface {
	CreateUserDbmPermissionLog(context.Context, *CreateUserDbmPermissionLogRequest) (*emptypb.Empty, error)
	UpsertUserConfig(context.Context, *UpsertUserConfigRequest) (*emptypb.Empty, error)
	GetUserConfigPushNotification(context.Context, *GetUserConfigPushNotificationRequest) (*GetUserConfigPushNotificationResponse, error)
	UpsertUserFcmToken(context.Context, *UpsertUserFcmTokenRequest) (*emptypb.Empty, error)
	GetUserFcmToken(context.Context, *GetUserFcmTokenRequest) (*GetUserFcmTokenResponse, error)
	CreateIssueAndEmailAssignee(context.Context, *CreateIssueAndEmailAssigneeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedConfigsDataServer()
}

// UnimplementedConfigsDataServer must be embedded to have forward compatible implementations.
type UnimplementedConfigsDataServer struct {
}

func (UnimplementedConfigsDataServer) CreateUserDbmPermissionLog(context.Context, *CreateUserDbmPermissionLogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserDbmPermissionLog not implemented")
}
func (UnimplementedConfigsDataServer) UpsertUserConfig(context.Context, *UpsertUserConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUserConfig not implemented")
}
func (UnimplementedConfigsDataServer) GetUserConfigPushNotification(context.Context, *GetUserConfigPushNotificationRequest) (*GetUserConfigPushNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConfigPushNotification not implemented")
}
func (UnimplementedConfigsDataServer) UpsertUserFcmToken(context.Context, *UpsertUserFcmTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUserFcmToken not implemented")
}
func (UnimplementedConfigsDataServer) GetUserFcmToken(context.Context, *GetUserFcmTokenRequest) (*GetUserFcmTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFcmToken not implemented")
}
func (UnimplementedConfigsDataServer) CreateIssueAndEmailAssignee(context.Context, *CreateIssueAndEmailAssigneeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssueAndEmailAssignee not implemented")
}
func (UnimplementedConfigsDataServer) mustEmbedUnimplementedConfigsDataServer() {}

// UnsafeConfigsDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigsDataServer will
// result in compilation errors.
type UnsafeConfigsDataServer interface {
	mustEmbedUnimplementedConfigsDataServer()
}

func RegisterConfigsDataServer(s grpc.ServiceRegistrar, srv ConfigsDataServer) {
	s.RegisterService(&ConfigsData_ServiceDesc, srv)
}

func _ConfigsData_CreateUserDbmPermissionLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserDbmPermissionLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigsDataServer).CreateUserDbmPermissionLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.configs.ConfigsData/CreateUserDbmPermissionLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigsDataServer).CreateUserDbmPermissionLog(ctx, req.(*CreateUserDbmPermissionLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigsData_UpsertUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigsDataServer).UpsertUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.configs.ConfigsData/UpsertUserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigsDataServer).UpsertUserConfig(ctx, req.(*UpsertUserConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigsData_GetUserConfigPushNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConfigPushNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigsDataServer).GetUserConfigPushNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.configs.ConfigsData/GetUserConfigPushNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigsDataServer).GetUserConfigPushNotification(ctx, req.(*GetUserConfigPushNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigsData_UpsertUserFcmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserFcmTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigsDataServer).UpsertUserFcmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.configs.ConfigsData/UpsertUserFcmToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigsDataServer).UpsertUserFcmToken(ctx, req.(*UpsertUserFcmTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigsData_GetUserFcmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFcmTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigsDataServer).GetUserFcmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.configs.ConfigsData/GetUserFcmToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigsDataServer).GetUserFcmToken(ctx, req.(*GetUserFcmTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigsData_CreateIssueAndEmailAssignee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssueAndEmailAssigneeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigsDataServer).CreateIssueAndEmailAssignee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.configs.ConfigsData/CreateIssueAndEmailAssignee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigsDataServer).CreateIssueAndEmailAssignee(ctx, req.(*CreateIssueAndEmailAssigneeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigsData_ServiceDesc is the grpc.ServiceDesc for ConfigsData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigsData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dta.wed.api.v1.configs.ConfigsData",
	HandlerType: (*ConfigsDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserDbmPermissionLog",
			Handler:    _ConfigsData_CreateUserDbmPermissionLog_Handler,
		},
		{
			MethodName: "UpsertUserConfig",
			Handler:    _ConfigsData_UpsertUserConfig_Handler,
		},
		{
			MethodName: "GetUserConfigPushNotification",
			Handler:    _ConfigsData_GetUserConfigPushNotification_Handler,
		},
		{
			MethodName: "UpsertUserFcmToken",
			Handler:    _ConfigsData_UpsertUserFcmToken_Handler,
		},
		{
			MethodName: "GetUserFcmToken",
			Handler:    _ConfigsData_GetUserFcmToken_Handler,
		},
		{
			MethodName: "CreateIssueAndEmailAssignee",
			Handler:    _ConfigsData_CreateIssueAndEmailAssignee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dta-wed-api/v1/configs/configs.proto",
}
