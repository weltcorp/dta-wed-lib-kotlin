// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dta-wed-api/v1/configs/configs.proto

package configs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUserDbmPermissionLogRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateUserDbmPermissionLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserDbmPermissionLogRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateUserDbmPermissionLogRequestMultiError, or nil if none found.
func (m *CreateUserDbmPermissionLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserDbmPermissionLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateUserDbmPermissionLogRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDeviceName()) < 1 {
		err := CreateUserDbmPermissionLogRequestValidationError{
			field:  "DeviceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatform()) < 1 {
		err := CreateUserDbmPermissionLogRequestValidationError{
			field:  "Platform",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserDbmPermissionLogRequestValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserDbmPermissionLogRequestValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserDbmPermissionLogRequestValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserDbmPermissionLogRequestMultiError(errors)
	}

	return nil
}

// CreateUserDbmPermissionLogRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateUserDbmPermissionLogRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserDbmPermissionLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserDbmPermissionLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserDbmPermissionLogRequestMultiError) AllErrors() []error { return m }

// CreateUserDbmPermissionLogRequestValidationError is the validation error
// returned by CreateUserDbmPermissionLogRequest.Validate if the designated
// constraints aren't met.
type CreateUserDbmPermissionLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserDbmPermissionLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserDbmPermissionLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserDbmPermissionLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserDbmPermissionLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserDbmPermissionLogRequestValidationError) ErrorName() string {
	return "CreateUserDbmPermissionLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserDbmPermissionLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserDbmPermissionLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserDbmPermissionLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserDbmPermissionLogRequestValidationError{}

// Validate checks the field values on UpsertUserConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertUserConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUserConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertUserConfigRequestMultiError, or nil if none found.
func (m *UpsertUserConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUserConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := UpsertUserConfigRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.InAppPushNotification != nil {
		// no validation rules for InAppPushNotification
	}

	if m.AppPushNotification != nil {
		// no validation rules for AppPushNotification
	}

	if m.Platform != nil {
		// no validation rules for Platform
	}

	if m.DeviceName != nil {
		// no validation rules for DeviceName
	}

	if m.OsVersion != nil {
		// no validation rules for OsVersion
	}

	if m.AppVersion != nil {
		// no validation rules for AppVersion
	}

	if m.WebAppVersion != nil {
		// no validation rules for WebAppVersion
	}

	if len(errors) > 0 {
		return UpsertUserConfigRequestMultiError(errors)
	}

	return nil
}

// UpsertUserConfigRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertUserConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertUserConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUserConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUserConfigRequestMultiError) AllErrors() []error { return m }

// UpsertUserConfigRequestValidationError is the validation error returned by
// UpsertUserConfigRequest.Validate if the designated constraints aren't met.
type UpsertUserConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUserConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUserConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUserConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUserConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUserConfigRequestValidationError) ErrorName() string {
	return "UpsertUserConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUserConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUserConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUserConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUserConfigRequestValidationError{}

// Validate checks the field values on GetUserConfigPushNotificationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserConfigPushNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserConfigPushNotificationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserConfigPushNotificationRequestMultiError, or nil if none found.
func (m *GetUserConfigPushNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserConfigPushNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserConfigPushNotificationRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserConfigPushNotificationRequestMultiError(errors)
	}

	return nil
}

// GetUserConfigPushNotificationRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserConfigPushNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserConfigPushNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserConfigPushNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserConfigPushNotificationRequestMultiError) AllErrors() []error { return m }

// GetUserConfigPushNotificationRequestValidationError is the validation error
// returned by GetUserConfigPushNotificationRequest.Validate if the designated
// constraints aren't met.
type GetUserConfigPushNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserConfigPushNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserConfigPushNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserConfigPushNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserConfigPushNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserConfigPushNotificationRequestValidationError) ErrorName() string {
	return "GetUserConfigPushNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserConfigPushNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserConfigPushNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserConfigPushNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserConfigPushNotificationRequestValidationError{}

// Validate checks the field values on GetUserConfigPushNotificationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserConfigPushNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserConfigPushNotificationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserConfigPushNotificationResponseMultiError, or nil if none found.
func (m *GetUserConfigPushNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserConfigPushNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for InAppPushNotification

	if len(errors) > 0 {
		return GetUserConfigPushNotificationResponseMultiError(errors)
	}

	return nil
}

// GetUserConfigPushNotificationResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetUserConfigPushNotificationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserConfigPushNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserConfigPushNotificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserConfigPushNotificationResponseMultiError) AllErrors() []error { return m }

// GetUserConfigPushNotificationResponseValidationError is the validation error
// returned by GetUserConfigPushNotificationResponse.Validate if the
// designated constraints aren't met.
type GetUserConfigPushNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserConfigPushNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserConfigPushNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserConfigPushNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserConfigPushNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserConfigPushNotificationResponseValidationError) ErrorName() string {
	return "GetUserConfigPushNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserConfigPushNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserConfigPushNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserConfigPushNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserConfigPushNotificationResponseValidationError{}

// Validate checks the field values on UpsertUserFcmTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertUserFcmTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUserFcmTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertUserFcmTokenRequestMultiError, or nil if none found.
func (m *UpsertUserFcmTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUserFcmTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Os

	// no validation rules for FcmToken

	if len(errors) > 0 {
		return UpsertUserFcmTokenRequestMultiError(errors)
	}

	return nil
}

// UpsertUserFcmTokenRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertUserFcmTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type UpsertUserFcmTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUserFcmTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUserFcmTokenRequestMultiError) AllErrors() []error { return m }

// UpsertUserFcmTokenRequestValidationError is the validation error returned by
// UpsertUserFcmTokenRequest.Validate if the designated constraints aren't met.
type UpsertUserFcmTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUserFcmTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUserFcmTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUserFcmTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUserFcmTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUserFcmTokenRequestValidationError) ErrorName() string {
	return "UpsertUserFcmTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUserFcmTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUserFcmTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUserFcmTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUserFcmTokenRequestValidationError{}

// Validate checks the field values on CreateIssueAndEmailAssigneeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateIssueAndEmailAssigneeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIssueAndEmailAssigneeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateIssueAndEmailAssigneeRequestMultiError, or nil if none found.
func (m *CreateIssueAndEmailAssigneeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIssueAndEmailAssigneeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateIssueAndEmailAssigneeRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSubject()) < 1 {
		err := CreateIssueAndEmailAssigneeRequestValidationError{
			field:  "Subject",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CreateIssueAndEmailAssigneeRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateIssueAndEmailAssigneeRequestMultiError(errors)
	}

	return nil
}

// CreateIssueAndEmailAssigneeRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateIssueAndEmailAssigneeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateIssueAndEmailAssigneeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIssueAndEmailAssigneeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIssueAndEmailAssigneeRequestMultiError) AllErrors() []error { return m }

// CreateIssueAndEmailAssigneeRequestValidationError is the validation error
// returned by CreateIssueAndEmailAssigneeRequest.Validate if the designated
// constraints aren't met.
type CreateIssueAndEmailAssigneeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIssueAndEmailAssigneeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIssueAndEmailAssigneeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIssueAndEmailAssigneeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIssueAndEmailAssigneeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIssueAndEmailAssigneeRequestValidationError) ErrorName() string {
	return "CreateIssueAndEmailAssigneeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIssueAndEmailAssigneeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIssueAndEmailAssigneeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIssueAndEmailAssigneeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIssueAndEmailAssigneeRequestValidationError{}

// Validate checks the field values on GetUserFcmTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserFcmTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserFcmTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserFcmTokenRequestMultiError, or nil if none found.
func (m *GetUserFcmTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserFcmTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserFcmTokenRequestMultiError(errors)
	}

	return nil
}

// GetUserFcmTokenRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserFcmTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserFcmTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserFcmTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserFcmTokenRequestMultiError) AllErrors() []error { return m }

// GetUserFcmTokenRequestValidationError is the validation error returned by
// GetUserFcmTokenRequest.Validate if the designated constraints aren't met.
type GetUserFcmTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFcmTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFcmTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFcmTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFcmTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFcmTokenRequestValidationError) ErrorName() string {
	return "GetUserFcmTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFcmTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFcmTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFcmTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFcmTokenRequestValidationError{}

// Validate checks the field values on GetUserFcmTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserFcmTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserFcmTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserFcmTokenResponseMultiError, or nil if none found.
func (m *GetUserFcmTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserFcmTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Os

	// no validation rules for FcmToken

	if len(errors) > 0 {
		return GetUserFcmTokenResponseMultiError(errors)
	}

	return nil
}

// GetUserFcmTokenResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserFcmTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserFcmTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserFcmTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserFcmTokenResponseMultiError) AllErrors() []error { return m }

// GetUserFcmTokenResponseValidationError is the validation error returned by
// GetUserFcmTokenResponse.Validate if the designated constraints aren't met.
type GetUserFcmTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFcmTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFcmTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFcmTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFcmTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFcmTokenResponseValidationError) ErrorName() string {
	return "GetUserFcmTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFcmTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFcmTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFcmTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFcmTokenResponseValidationError{}
