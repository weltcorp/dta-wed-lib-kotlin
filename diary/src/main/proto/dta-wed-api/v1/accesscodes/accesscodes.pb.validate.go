// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dta-wed-api/v1/accesscodes/accesscodes.proto

package accesscodes

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAccesscodePatientsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccesscodePatientsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccesscodePatientsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccesscodePatientsRequestMultiError, or nil if none found.
func (m *GetAccesscodePatientsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccesscodePatientsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SiteId

	// no validation rules for Limit

	// no validation rules for Page

	// no validation rules for OrderBy

	// no validation rules for Asc

	if len(errors) > 0 {
		return GetAccesscodePatientsRequestMultiError(errors)
	}

	return nil
}

// GetAccesscodePatientsRequestMultiError is an error wrapping multiple
// validation errors returned by GetAccesscodePatientsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAccesscodePatientsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccesscodePatientsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccesscodePatientsRequestMultiError) AllErrors() []error { return m }

// GetAccesscodePatientsRequestValidationError is the validation error returned
// by GetAccesscodePatientsRequest.Validate if the designated constraints
// aren't met.
type GetAccesscodePatientsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccesscodePatientsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccesscodePatientsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccesscodePatientsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccesscodePatientsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccesscodePatientsRequestValidationError) ErrorName() string {
	return "GetAccesscodePatientsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccesscodePatientsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccesscodePatientsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccesscodePatientsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccesscodePatientsRequestValidationError{}

// Validate checks the field values on AccesscodePatientData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccesscodePatientData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccesscodePatientData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccesscodePatientDataMultiError, or nil if none found.
func (m *AccesscodePatientData) ValidateAll() error {
	return m.validate(true)
}

func (m *AccesscodePatientData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Accesscode

	// no validation rules for Email

	// no validation rules for EmailRegisteredAt

	// no validation rules for UserId

	// no validation rules for UserCreatedAt

	// no validation rules for CreatedAt

	// no validation rules for DDay

	// no validation rules for Status

	// no validation rules for ExpiresAt

	// no validation rules for UserStartedAt

	// no validation rules for UserEndAt

	if len(errors) > 0 {
		return AccesscodePatientDataMultiError(errors)
	}

	return nil
}

// AccesscodePatientDataMultiError is an error wrapping multiple validation
// errors returned by AccesscodePatientData.ValidateAll() if the designated
// constraints aren't met.
type AccesscodePatientDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccesscodePatientDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccesscodePatientDataMultiError) AllErrors() []error { return m }

// AccesscodePatientDataValidationError is the validation error returned by
// AccesscodePatientData.Validate if the designated constraints aren't met.
type AccesscodePatientDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccesscodePatientDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccesscodePatientDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccesscodePatientDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccesscodePatientDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccesscodePatientDataValidationError) ErrorName() string {
	return "AccesscodePatientDataValidationError"
}

// Error satisfies the builtin error interface
func (e AccesscodePatientDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccesscodePatientData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccesscodePatientDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccesscodePatientDataValidationError{}

// Validate checks the field values on GetAccesscodePatientsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccesscodePatientsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccesscodePatientsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAccesscodePatientsResponseMultiError, or nil if none found.
func (m *GetAccesscodePatientsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccesscodePatientsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for Count

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccesscodePatientsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccesscodePatientsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccesscodePatientsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccesscodePatientsResponseMultiError(errors)
	}

	return nil
}

// GetAccesscodePatientsResponseMultiError is an error wrapping multiple
// validation errors returned by GetAccesscodePatientsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAccesscodePatientsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccesscodePatientsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccesscodePatientsResponseMultiError) AllErrors() []error { return m }

// GetAccesscodePatientsResponseValidationError is the validation error
// returned by GetAccesscodePatientsResponse.Validate if the designated
// constraints aren't met.
type GetAccesscodePatientsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccesscodePatientsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccesscodePatientsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccesscodePatientsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccesscodePatientsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccesscodePatientsResponseValidationError) ErrorName() string {
	return "GetAccesscodePatientsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccesscodePatientsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccesscodePatientsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccesscodePatientsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccesscodePatientsResponseValidationError{}

// Validate checks the field values on UpdateAccesscodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccesscodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccesscodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccesscodeRequestMultiError, or nil if none found.
func (m *UpdateAccesscodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccesscodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccesscode()) < 8 {
		err := UpdateAccesscodeRequestValidationError{
			field:  "Accesscode",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEmail() != "" {

		if utf8.RuneCountInString(m.GetEmail()) < 2 {
			err := UpdateAccesscodeRequestValidationError{
				field:  "Email",
				reason: "value length must be at least 2 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = UpdateAccesscodeRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for AccountId

	if len(errors) > 0 {
		return UpdateAccesscodeRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateAccesscodeRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateAccesscodeRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateAccesscodeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccesscodeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccesscodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccesscodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccesscodeRequestMultiError) AllErrors() []error { return m }

// UpdateAccesscodeRequestValidationError is the validation error returned by
// UpdateAccesscodeRequest.Validate if the designated constraints aren't met.
type UpdateAccesscodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccesscodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccesscodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccesscodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccesscodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccesscodeRequestValidationError) ErrorName() string {
	return "UpdateAccesscodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccesscodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccesscodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccesscodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccesscodeRequestValidationError{}

// Validate checks the field values on GetUserIdByAccesscodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdByAccesscodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdByAccesscodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserIdByAccesscodeRequestMultiError, or nil if none found.
func (m *GetUserIdByAccesscodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdByAccesscodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccesscode()) < 8 {
		err := GetUserIdByAccesscodeRequestValidationError{
			field:  "Accesscode",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SiteId

	if len(errors) > 0 {
		return GetUserIdByAccesscodeRequestMultiError(errors)
	}

	return nil
}

// GetUserIdByAccesscodeRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserIdByAccesscodeRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserIdByAccesscodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdByAccesscodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdByAccesscodeRequestMultiError) AllErrors() []error { return m }

// GetUserIdByAccesscodeRequestValidationError is the validation error returned
// by GetUserIdByAccesscodeRequest.Validate if the designated constraints
// aren't met.
type GetUserIdByAccesscodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdByAccesscodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdByAccesscodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdByAccesscodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdByAccesscodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdByAccesscodeRequestValidationError) ErrorName() string {
	return "GetUserIdByAccesscodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdByAccesscodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdByAccesscodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdByAccesscodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdByAccesscodeRequestValidationError{}

// Validate checks the field values on GetUserIdByAccesscodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdByAccesscodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdByAccesscodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserIdByAccesscodeResponseMultiError, or nil if none found.
func (m *GetUserIdByAccesscodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdByAccesscodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserIdByAccesscodeResponseMultiError(errors)
	}

	return nil
}

// GetUserIdByAccesscodeResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserIdByAccesscodeResponse.ValidateAll()
// if the designated constraints aren't met.
type GetUserIdByAccesscodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdByAccesscodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdByAccesscodeResponseMultiError) AllErrors() []error { return m }

// GetUserIdByAccesscodeResponseValidationError is the validation error
// returned by GetUserIdByAccesscodeResponse.Validate if the designated
// constraints aren't met.
type GetUserIdByAccesscodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdByAccesscodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdByAccesscodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdByAccesscodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdByAccesscodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdByAccesscodeResponseValidationError) ErrorName() string {
	return "GetUserIdByAccesscodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdByAccesscodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdByAccesscodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdByAccesscodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdByAccesscodeResponseValidationError{}
