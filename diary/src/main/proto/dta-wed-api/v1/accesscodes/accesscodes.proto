syntax = "proto3";
package dta.wed.api.v1.accesscodes;

option go_package = "github.com/weltcorp/dta-wed-api/internal/proto/dta-wed-api/v1/accesscodes";

import "validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

service AccesscodesData {
  rpc GetAccesscodePatients(GetAccesscodePatientsRequest) returns (GetAccesscodePatientsResponse) {
    option (google.api.http) = { get: "/v1/accesscodes/patients" };
  }
  rpc UpdateAccesscode(UpdateAccesscodeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { patch: "/v1/accesscodes/code/{accesscode}", body: "*"};
  }
  rpc GetUserIdByAccesscode(GetUserIdByAccesscodeRequest) returns (GetUserIdByAccesscodeResponse) {
    option (google.api.http) = { get: "/v1/accesscodes/{accesscode}/userId" };
  }
}

message GetAccesscodePatientsRequest {
  int32 siteId = 1;
  int32 limit = 2;
  int32 page = 3;
  string orderBy = 4;
  string asc = 5;
}

message AccesscodePatientData {
  string accesscode = 1;
  string email = 2;
  int32 emailRegisteredAt = 3;
  int32 userId = 4;
  int32 userCreatedAt = 5;
  int32 createdAt = 6;
  int32 dDay = 7;
  int32 status = 8;
  int32 expiresAt = 9;
  int32 userStartedAt = 10;
  int32 userEndAt = 11;
}

message GetAccesscodePatientsResponse {
  int32 totalCount = 1;
  int32 page = 2;
  int32 count = 3;
  repeated AccesscodePatientData data = 4;
}

message UpdateAccesscodeRequest {
  string accesscode = 1[(validate.rules).string.min_len = 8];
  string email = 2[(validate.rules).string = {email: true, min_len: 2, ignore_empty: true}];
  int32 accountId = 4;
}

message GetUserIdByAccesscodeRequest {
  string accesscode = 1[(validate.rules).string.min_len = 8];
  int32 siteId = 2;
}

message GetUserIdByAccesscodeResponse {
  int32 userId = 1;
}
