// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dta-wed-api/v1/accesscodes/accesscodes.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Dta_Wed_Api_V1_Accesscodes_GetAccesscodePatientsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var siteID: Int32 = 0

  public var limit: Int32 = 0

  public var page: Int32 = 0

  public var orderBy: String = String()

  public var asc: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Accesscodes_AccesscodePatientData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accesscode: String = String()

  public var email: String = String()

  public var emailRegisteredAt: Int32 = 0

  public var userID: Int32 = 0

  public var userCreatedAt: Int32 = 0

  public var createdAt: Int32 = 0

  public var dDay: Int32 = 0

  public var status: Int32 = 0

  public var expiresAt: Int32 = 0

  public var userStartedAt: Int32 = 0

  public var userEndAt: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Accesscodes_GetAccesscodePatientsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalCount: Int32 = 0

  public var page: Int32 = 0

  public var count: Int32 = 0

  public var data: [Dta_Wed_Api_V1_Accesscodes_AccesscodePatientData] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Accesscodes_UpdateAccesscodeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accesscode: String = String()

  public var email: String = String()

  public var accountID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Accesscodes_GetUserIdByAccesscodeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accesscode: String = String()

  public var siteID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Accesscodes_GetUserIdByAccesscodeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Dta_Wed_Api_V1_Accesscodes_GetAccesscodePatientsRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Accesscodes_AccesscodePatientData: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Accesscodes_GetAccesscodePatientsResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Accesscodes_UpdateAccesscodeRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Accesscodes_GetUserIdByAccesscodeRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Accesscodes_GetUserIdByAccesscodeResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dta.wed.api.v1.accesscodes"

extension Dta_Wed_Api_V1_Accesscodes_GetAccesscodePatientsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAccesscodePatientsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "siteId"),
    2: .same(proto: "limit"),
    3: .same(proto: "page"),
    4: .same(proto: "orderBy"),
    5: .same(proto: "asc"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.siteID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.limit) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.orderBy) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.asc) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.siteID != 0 {
      try visitor.visitSingularInt32Field(value: self.siteID, fieldNumber: 1)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 2)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 3)
    }
    if !self.orderBy.isEmpty {
      try visitor.visitSingularStringField(value: self.orderBy, fieldNumber: 4)
    }
    if !self.asc.isEmpty {
      try visitor.visitSingularStringField(value: self.asc, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Accesscodes_GetAccesscodePatientsRequest, rhs: Dta_Wed_Api_V1_Accesscodes_GetAccesscodePatientsRequest) -> Bool {
    if lhs.siteID != rhs.siteID {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.page != rhs.page {return false}
    if lhs.orderBy != rhs.orderBy {return false}
    if lhs.asc != rhs.asc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Accesscodes_AccesscodePatientData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccesscodePatientData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accesscode"),
    2: .same(proto: "email"),
    3: .same(proto: "emailRegisteredAt"),
    4: .same(proto: "userId"),
    5: .same(proto: "userCreatedAt"),
    6: .same(proto: "createdAt"),
    7: .same(proto: "dDay"),
    8: .same(proto: "status"),
    9: .same(proto: "expiresAt"),
    10: .same(proto: "userStartedAt"),
    11: .same(proto: "userEndAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.emailRegisteredAt) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.userCreatedAt) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.createdAt) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.dDay) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.expiresAt) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.userStartedAt) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.userEndAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if self.emailRegisteredAt != 0 {
      try visitor.visitSingularInt32Field(value: self.emailRegisteredAt, fieldNumber: 3)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 4)
    }
    if self.userCreatedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.userCreatedAt, fieldNumber: 5)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt32Field(value: self.createdAt, fieldNumber: 6)
    }
    if self.dDay != 0 {
      try visitor.visitSingularInt32Field(value: self.dDay, fieldNumber: 7)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 8)
    }
    if self.expiresAt != 0 {
      try visitor.visitSingularInt32Field(value: self.expiresAt, fieldNumber: 9)
    }
    if self.userStartedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.userStartedAt, fieldNumber: 10)
    }
    if self.userEndAt != 0 {
      try visitor.visitSingularInt32Field(value: self.userEndAt, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Accesscodes_AccesscodePatientData, rhs: Dta_Wed_Api_V1_Accesscodes_AccesscodePatientData) -> Bool {
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.emailRegisteredAt != rhs.emailRegisteredAt {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.userCreatedAt != rhs.userCreatedAt {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.dDay != rhs.dDay {return false}
    if lhs.status != rhs.status {return false}
    if lhs.expiresAt != rhs.expiresAt {return false}
    if lhs.userStartedAt != rhs.userStartedAt {return false}
    if lhs.userEndAt != rhs.userEndAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Accesscodes_GetAccesscodePatientsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAccesscodePatientsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "totalCount"),
    2: .same(proto: "page"),
    3: .same(proto: "count"),
    4: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalCount, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Accesscodes_GetAccesscodePatientsResponse, rhs: Dta_Wed_Api_V1_Accesscodes_GetAccesscodePatientsResponse) -> Bool {
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.page != rhs.page {return false}
    if lhs.count != rhs.count {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Accesscodes_UpdateAccesscodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateAccesscodeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accesscode"),
    2: .same(proto: "email"),
    4: .same(proto: "accountId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.accountID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if self.accountID != 0 {
      try visitor.visitSingularInt32Field(value: self.accountID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Accesscodes_UpdateAccesscodeRequest, rhs: Dta_Wed_Api_V1_Accesscodes_UpdateAccesscodeRequest) -> Bool {
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Accesscodes_GetUserIdByAccesscodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUserIdByAccesscodeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accesscode"),
    2: .same(proto: "siteId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.siteID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 1)
    }
    if self.siteID != 0 {
      try visitor.visitSingularInt32Field(value: self.siteID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Accesscodes_GetUserIdByAccesscodeRequest, rhs: Dta_Wed_Api_V1_Accesscodes_GetUserIdByAccesscodeRequest) -> Bool {
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.siteID != rhs.siteID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Accesscodes_GetUserIdByAccesscodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUserIdByAccesscodeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Accesscodes_GetUserIdByAccesscodeResponse, rhs: Dta_Wed_Api_V1_Accesscodes_GetUserIdByAccesscodeResponse) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
