// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dta-wed-api/v1/accesscodes/accesscodes.proto

package accesscodes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccesscodesDataClient is the client API for AccesscodesData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccesscodesDataClient interface {
	GetAccesscodePatients(ctx context.Context, in *GetAccesscodePatientsRequest, opts ...grpc.CallOption) (*GetAccesscodePatientsResponse, error)
	UpdateAccesscode(ctx context.Context, in *UpdateAccesscodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserIdByAccesscode(ctx context.Context, in *GetUserIdByAccesscodeRequest, opts ...grpc.CallOption) (*GetUserIdByAccesscodeResponse, error)
}

type accesscodesDataClient struct {
	cc grpc.ClientConnInterface
}

func NewAccesscodesDataClient(cc grpc.ClientConnInterface) AccesscodesDataClient {
	return &accesscodesDataClient{cc}
}

func (c *accesscodesDataClient) GetAccesscodePatients(ctx context.Context, in *GetAccesscodePatientsRequest, opts ...grpc.CallOption) (*GetAccesscodePatientsResponse, error) {
	out := new(GetAccesscodePatientsResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.accesscodes.AccesscodesData/GetAccesscodePatients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accesscodesDataClient) UpdateAccesscode(ctx context.Context, in *UpdateAccesscodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.accesscodes.AccesscodesData/UpdateAccesscode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accesscodesDataClient) GetUserIdByAccesscode(ctx context.Context, in *GetUserIdByAccesscodeRequest, opts ...grpc.CallOption) (*GetUserIdByAccesscodeResponse, error) {
	out := new(GetUserIdByAccesscodeResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.accesscodes.AccesscodesData/GetUserIdByAccesscode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccesscodesDataServer is the server API for AccesscodesData service.
// All implementations must embed UnimplementedAccesscodesDataServer
// for forward compatibility
type AccesscodesDataServer interface {
	GetAccesscodePatients(context.Context, *GetAccesscodePatientsRequest) (*GetAccesscodePatientsResponse, error)
	UpdateAccesscode(context.Context, *UpdateAccesscodeRequest) (*emptypb.Empty, error)
	GetUserIdByAccesscode(context.Context, *GetUserIdByAccesscodeRequest) (*GetUserIdByAccesscodeResponse, error)
	mustEmbedUnimplementedAccesscodesDataServer()
}

// UnimplementedAccesscodesDataServer must be embedded to have forward compatible implementations.
type UnimplementedAccesscodesDataServer struct {
}

func (UnimplementedAccesscodesDataServer) GetAccesscodePatients(context.Context, *GetAccesscodePatientsRequest) (*GetAccesscodePatientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccesscodePatients not implemented")
}
func (UnimplementedAccesscodesDataServer) UpdateAccesscode(context.Context, *UpdateAccesscodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccesscode not implemented")
}
func (UnimplementedAccesscodesDataServer) GetUserIdByAccesscode(context.Context, *GetUserIdByAccesscodeRequest) (*GetUserIdByAccesscodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdByAccesscode not implemented")
}
func (UnimplementedAccesscodesDataServer) mustEmbedUnimplementedAccesscodesDataServer() {}

// UnsafeAccesscodesDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccesscodesDataServer will
// result in compilation errors.
type UnsafeAccesscodesDataServer interface {
	mustEmbedUnimplementedAccesscodesDataServer()
}

func RegisterAccesscodesDataServer(s grpc.ServiceRegistrar, srv AccesscodesDataServer) {
	s.RegisterService(&AccesscodesData_ServiceDesc, srv)
}

func _AccesscodesData_GetAccesscodePatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccesscodePatientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccesscodesDataServer).GetAccesscodePatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.accesscodes.AccesscodesData/GetAccesscodePatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccesscodesDataServer).GetAccesscodePatients(ctx, req.(*GetAccesscodePatientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccesscodesData_UpdateAccesscode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccesscodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccesscodesDataServer).UpdateAccesscode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.accesscodes.AccesscodesData/UpdateAccesscode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccesscodesDataServer).UpdateAccesscode(ctx, req.(*UpdateAccesscodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccesscodesData_GetUserIdByAccesscode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIdByAccesscodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccesscodesDataServer).GetUserIdByAccesscode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.accesscodes.AccesscodesData/GetUserIdByAccesscode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccesscodesDataServer).GetUserIdByAccesscode(ctx, req.(*GetUserIdByAccesscodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccesscodesData_ServiceDesc is the grpc.ServiceDesc for AccesscodesData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccesscodesData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dta.wed.api.v1.accesscodes.AccesscodesData",
	HandlerType: (*AccesscodesDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccesscodePatients",
			Handler:    _AccesscodesData_GetAccesscodePatients_Handler,
		},
		{
			MethodName: "UpdateAccesscode",
			Handler:    _AccesscodesData_UpdateAccesscode_Handler,
		},
		{
			MethodName: "GetUserIdByAccesscode",
			Handler:    _AccesscodesData_GetUserIdByAccesscode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dta-wed-api/v1/accesscodes/accesscodes.proto",
}
