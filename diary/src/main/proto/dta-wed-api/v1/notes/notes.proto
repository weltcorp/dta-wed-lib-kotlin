syntax = "proto3";
package dta.wed.api.v1.notes;

option go_package = "github.com/weltcorp/dta-wed-api/internal/proto/dta-wed-api/v1/notes";

import "validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

service NotesData {
  rpc UpsertNoteByUserVisit(UpsertNoteByUserVisitRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { put: "/v1/notes/visits/{visitId}/users/{userId}", body: "*" };
  }
  rpc CreateUserMedicalNote(CreateUserMedicalNoteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { post: "/v1/medicalNotes/users/{userId}", body: "*" };
  }
  rpc GetUserMedicalNotes(GetUserMedicalNotesRequest) returns (GetUserMedicalNotesResponse) {
    option (google.api.http) = { get: "/v1/medicalNotes/users/{userId}" };
  }
  rpc DeleteUserMedicalNote(DeleteUserMedicalNoteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/medicalNotes/{noteId}" };
  }
  rpc UpsertClinicalNoteByUserId(UpsertClinicalNoteByUserIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { put: "/v1/clinicalNotes/users/{userId}", body: "*" };
  }
}

message UpsertNoteByUserVisitRequest {
  int32 visitId = 1[(validate.rules).int32 = {gt: 0}];
  int32 userId = 2[(validate.rules).int32 = {gt: 0}];
  int32 accountId = 3[(validate.rules).int32 = {gt: 0}];
  string note = 4;
}

message CreateUserMedicalNoteRequest {
  int32 userId = 1[(validate.rules).int32 = {gt: 0}];
  int32 authorAccountId = 2[(validate.rules).int32 = {gt: 0}];
  string note = 3;
}

message DeleteUserMedicalNoteRequest {
  int32 noteId = 1[(validate.rules).int32 = {gt: 0}];
}

message GetUserMedicalNotesRequest {
  int32 userId = 1[(validate.rules).int32 = {gt: 0}];
  int32 limit = 2;
  int32 page = 3;
}

message GetUserMedicalNotesResponse{
  message Note {
    int32 id = 1;
    int32 date = 2;
    int32 userId = 3;
    int32 authorAccountId = 4;
    string note = 5;
    int32 createdAt = 6;
    int32 updatedAt = 7;
  }
  int32 totalCount = 1;
  int32 count = 2;
  int32 page = 3;
  repeated Note medicalNotes = 4;
}

message UpsertClinicalNoteByUserIdRequest {
  int32 userId = 1[(validate.rules).int32 = {gt: 0}];
  string date = 2[(validate.rules).string = {pattern: "^\\d{4}-\\d{2}-\\d{2}$"}];
  string note = 3;
}
