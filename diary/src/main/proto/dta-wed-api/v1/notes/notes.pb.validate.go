// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dta-wed-api/v1/notes/notes.proto

package notes

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpsertNoteByUserVisitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertNoteByUserVisitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertNoteByUserVisitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertNoteByUserVisitRequestMultiError, or nil if none found.
func (m *UpsertNoteByUserVisitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertNoteByUserVisitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVisitId() <= 0 {
		err := UpsertNoteByUserVisitRequestValidationError{
			field:  "VisitId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := UpsertNoteByUserVisitRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAccountId() <= 0 {
		err := UpsertNoteByUserVisitRequestValidationError{
			field:  "AccountId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Note

	if len(errors) > 0 {
		return UpsertNoteByUserVisitRequestMultiError(errors)
	}

	return nil
}

// UpsertNoteByUserVisitRequestMultiError is an error wrapping multiple
// validation errors returned by UpsertNoteByUserVisitRequest.ValidateAll() if
// the designated constraints aren't met.
type UpsertNoteByUserVisitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertNoteByUserVisitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertNoteByUserVisitRequestMultiError) AllErrors() []error { return m }

// UpsertNoteByUserVisitRequestValidationError is the validation error returned
// by UpsertNoteByUserVisitRequest.Validate if the designated constraints
// aren't met.
type UpsertNoteByUserVisitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertNoteByUserVisitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertNoteByUserVisitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertNoteByUserVisitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertNoteByUserVisitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertNoteByUserVisitRequestValidationError) ErrorName() string {
	return "UpsertNoteByUserVisitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertNoteByUserVisitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertNoteByUserVisitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertNoteByUserVisitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertNoteByUserVisitRequestValidationError{}

// Validate checks the field values on CreateUserMedicalNoteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserMedicalNoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserMedicalNoteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserMedicalNoteRequestMultiError, or nil if none found.
func (m *CreateUserMedicalNoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserMedicalNoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateUserMedicalNoteRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAuthorAccountId() <= 0 {
		err := CreateUserMedicalNoteRequestValidationError{
			field:  "AuthorAccountId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Note

	if len(errors) > 0 {
		return CreateUserMedicalNoteRequestMultiError(errors)
	}

	return nil
}

// CreateUserMedicalNoteRequestMultiError is an error wrapping multiple
// validation errors returned by CreateUserMedicalNoteRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateUserMedicalNoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserMedicalNoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserMedicalNoteRequestMultiError) AllErrors() []error { return m }

// CreateUserMedicalNoteRequestValidationError is the validation error returned
// by CreateUserMedicalNoteRequest.Validate if the designated constraints
// aren't met.
type CreateUserMedicalNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserMedicalNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserMedicalNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserMedicalNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserMedicalNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserMedicalNoteRequestValidationError) ErrorName() string {
	return "CreateUserMedicalNoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserMedicalNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserMedicalNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserMedicalNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserMedicalNoteRequestValidationError{}

// Validate checks the field values on DeleteUserMedicalNoteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserMedicalNoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserMedicalNoteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserMedicalNoteRequestMultiError, or nil if none found.
func (m *DeleteUserMedicalNoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserMedicalNoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNoteId() <= 0 {
		err := DeleteUserMedicalNoteRequestValidationError{
			field:  "NoteId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserMedicalNoteRequestMultiError(errors)
	}

	return nil
}

// DeleteUserMedicalNoteRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteUserMedicalNoteRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteUserMedicalNoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserMedicalNoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserMedicalNoteRequestMultiError) AllErrors() []error { return m }

// DeleteUserMedicalNoteRequestValidationError is the validation error returned
// by DeleteUserMedicalNoteRequest.Validate if the designated constraints
// aren't met.
type DeleteUserMedicalNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserMedicalNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserMedicalNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserMedicalNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserMedicalNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserMedicalNoteRequestValidationError) ErrorName() string {
	return "DeleteUserMedicalNoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserMedicalNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserMedicalNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserMedicalNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserMedicalNoteRequestValidationError{}

// Validate checks the field values on GetUserMedicalNotesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserMedicalNotesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserMedicalNotesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserMedicalNotesRequestMultiError, or nil if none found.
func (m *GetUserMedicalNotesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserMedicalNotesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserMedicalNotesRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	// no validation rules for Page

	if len(errors) > 0 {
		return GetUserMedicalNotesRequestMultiError(errors)
	}

	return nil
}

// GetUserMedicalNotesRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserMedicalNotesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserMedicalNotesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserMedicalNotesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserMedicalNotesRequestMultiError) AllErrors() []error { return m }

// GetUserMedicalNotesRequestValidationError is the validation error returned
// by GetUserMedicalNotesRequest.Validate if the designated constraints aren't met.
type GetUserMedicalNotesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMedicalNotesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMedicalNotesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMedicalNotesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserMedicalNotesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMedicalNotesRequestValidationError) ErrorName() string {
	return "GetUserMedicalNotesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserMedicalNotesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMedicalNotesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMedicalNotesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserMedicalNotesRequestValidationError{}

// Validate checks the field values on GetUserMedicalNotesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserMedicalNotesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserMedicalNotesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserMedicalNotesResponseMultiError, or nil if none found.
func (m *GetUserMedicalNotesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserMedicalNotesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for Count

	// no validation rules for Page

	for idx, item := range m.GetMedicalNotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserMedicalNotesResponseValidationError{
						field:  fmt.Sprintf("MedicalNotes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserMedicalNotesResponseValidationError{
						field:  fmt.Sprintf("MedicalNotes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserMedicalNotesResponseValidationError{
					field:  fmt.Sprintf("MedicalNotes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserMedicalNotesResponseMultiError(errors)
	}

	return nil
}

// GetUserMedicalNotesResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserMedicalNotesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserMedicalNotesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserMedicalNotesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserMedicalNotesResponseMultiError) AllErrors() []error { return m }

// GetUserMedicalNotesResponseValidationError is the validation error returned
// by GetUserMedicalNotesResponse.Validate if the designated constraints
// aren't met.
type GetUserMedicalNotesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMedicalNotesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMedicalNotesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMedicalNotesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserMedicalNotesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMedicalNotesResponseValidationError) ErrorName() string {
	return "GetUserMedicalNotesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserMedicalNotesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMedicalNotesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMedicalNotesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserMedicalNotesResponseValidationError{}

// Validate checks the field values on UpsertClinicalNoteByUserIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpsertClinicalNoteByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertClinicalNoteByUserIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpsertClinicalNoteByUserIdRequestMultiError, or nil if none found.
func (m *UpsertClinicalNoteByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertClinicalNoteByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := UpsertClinicalNoteByUserIdRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpsertClinicalNoteByUserIdRequest_Date_Pattern.MatchString(m.GetDate()) {
		err := UpsertClinicalNoteByUserIdRequestValidationError{
			field:  "Date",
			reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Note

	if len(errors) > 0 {
		return UpsertClinicalNoteByUserIdRequestMultiError(errors)
	}

	return nil
}

// UpsertClinicalNoteByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpsertClinicalNoteByUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertClinicalNoteByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertClinicalNoteByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertClinicalNoteByUserIdRequestMultiError) AllErrors() []error { return m }

// UpsertClinicalNoteByUserIdRequestValidationError is the validation error
// returned by UpsertClinicalNoteByUserIdRequest.Validate if the designated
// constraints aren't met.
type UpsertClinicalNoteByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertClinicalNoteByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertClinicalNoteByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertClinicalNoteByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertClinicalNoteByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertClinicalNoteByUserIdRequestValidationError) ErrorName() string {
	return "UpsertClinicalNoteByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertClinicalNoteByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertClinicalNoteByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertClinicalNoteByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertClinicalNoteByUserIdRequestValidationError{}

var _UpsertClinicalNoteByUserIdRequest_Date_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}$")

// Validate checks the field values on GetUserMedicalNotesResponse_Note with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserMedicalNotesResponse_Note) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserMedicalNotesResponse_Note with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserMedicalNotesResponse_NoteMultiError, or nil if none found.
func (m *GetUserMedicalNotesResponse_Note) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserMedicalNotesResponse_Note) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Date

	// no validation rules for UserId

	// no validation rules for AuthorAccountId

	// no validation rules for Note

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetUserMedicalNotesResponse_NoteMultiError(errors)
	}

	return nil
}

// GetUserMedicalNotesResponse_NoteMultiError is an error wrapping multiple
// validation errors returned by
// GetUserMedicalNotesResponse_Note.ValidateAll() if the designated
// constraints aren't met.
type GetUserMedicalNotesResponse_NoteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserMedicalNotesResponse_NoteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserMedicalNotesResponse_NoteMultiError) AllErrors() []error { return m }

// GetUserMedicalNotesResponse_NoteValidationError is the validation error
// returned by GetUserMedicalNotesResponse_Note.Validate if the designated
// constraints aren't met.
type GetUserMedicalNotesResponse_NoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMedicalNotesResponse_NoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMedicalNotesResponse_NoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMedicalNotesResponse_NoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserMedicalNotesResponse_NoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMedicalNotesResponse_NoteValidationError) ErrorName() string {
	return "GetUserMedicalNotesResponse_NoteValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserMedicalNotesResponse_NoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMedicalNotesResponse_Note.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMedicalNotesResponse_NoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserMedicalNotesResponse_NoteValidationError{}
