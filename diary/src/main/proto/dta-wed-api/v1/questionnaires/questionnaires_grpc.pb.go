// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dta-wed-api/v1/questionnaires/questionnaires.proto

package wedQuestionnaires

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionnairesDataClient is the client API for QuestionnairesData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionnairesDataClient interface {
	GetQuestionnaireItemsByQuestionnaireId(ctx context.Context, in *GetQuestionnaireItemsByQuestionnaireIdRequest, opts ...grpc.CallOption) (*GetQuestionnaireItemsByQuestionnaireIdResponse, error)
	CreateQuestionnaireAnswers(ctx context.Context, in *CreateQuestionnaireAnswersRequest, opts ...grpc.CallOption) (*CreateQuestionnaireAnswersResponse, error)
	GetQuestionnaireAnswersByUserId(ctx context.Context, in *GetQuestionnaireAnswersByUserIdRequest, opts ...grpc.CallOption) (*GetQuestionnaireAnswersByUserIdResponse, error)
	GetQuestionnaireAnswersByAnswerId(ctx context.Context, in *GetQuestionnaireAnswersByAnswerIdRequest, opts ...grpc.CallOption) (*GetQuestionnaireAnswersByAnswerIdResponse, error)
	DeleteQuestionnaireAnswersByAnswerId(ctx context.Context, in *DeleteQuestionnaireAnswersByAnswerIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type questionnairesDataClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionnairesDataClient(cc grpc.ClientConnInterface) QuestionnairesDataClient {
	return &questionnairesDataClient{cc}
}

func (c *questionnairesDataClient) GetQuestionnaireItemsByQuestionnaireId(ctx context.Context, in *GetQuestionnaireItemsByQuestionnaireIdRequest, opts ...grpc.CallOption) (*GetQuestionnaireItemsByQuestionnaireIdResponse, error) {
	out := new(GetQuestionnaireItemsByQuestionnaireIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.questionnaires.QuestionnairesData/GetQuestionnaireItemsByQuestionnaireId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnairesDataClient) CreateQuestionnaireAnswers(ctx context.Context, in *CreateQuestionnaireAnswersRequest, opts ...grpc.CallOption) (*CreateQuestionnaireAnswersResponse, error) {
	out := new(CreateQuestionnaireAnswersResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.questionnaires.QuestionnairesData/CreateQuestionnaireAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnairesDataClient) GetQuestionnaireAnswersByUserId(ctx context.Context, in *GetQuestionnaireAnswersByUserIdRequest, opts ...grpc.CallOption) (*GetQuestionnaireAnswersByUserIdResponse, error) {
	out := new(GetQuestionnaireAnswersByUserIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.questionnaires.QuestionnairesData/GetQuestionnaireAnswersByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnairesDataClient) GetQuestionnaireAnswersByAnswerId(ctx context.Context, in *GetQuestionnaireAnswersByAnswerIdRequest, opts ...grpc.CallOption) (*GetQuestionnaireAnswersByAnswerIdResponse, error) {
	out := new(GetQuestionnaireAnswersByAnswerIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.questionnaires.QuestionnairesData/GetQuestionnaireAnswersByAnswerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnairesDataClient) DeleteQuestionnaireAnswersByAnswerId(ctx context.Context, in *DeleteQuestionnaireAnswersByAnswerIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.questionnaires.QuestionnairesData/DeleteQuestionnaireAnswersByAnswerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionnairesDataServer is the server API for QuestionnairesData service.
// All implementations must embed UnimplementedQuestionnairesDataServer
// for forward compatibility
type QuestionnairesDataServer interface {
	GetQuestionnaireItemsByQuestionnaireId(context.Context, *GetQuestionnaireItemsByQuestionnaireIdRequest) (*GetQuestionnaireItemsByQuestionnaireIdResponse, error)
	CreateQuestionnaireAnswers(context.Context, *CreateQuestionnaireAnswersRequest) (*CreateQuestionnaireAnswersResponse, error)
	GetQuestionnaireAnswersByUserId(context.Context, *GetQuestionnaireAnswersByUserIdRequest) (*GetQuestionnaireAnswersByUserIdResponse, error)
	GetQuestionnaireAnswersByAnswerId(context.Context, *GetQuestionnaireAnswersByAnswerIdRequest) (*GetQuestionnaireAnswersByAnswerIdResponse, error)
	DeleteQuestionnaireAnswersByAnswerId(context.Context, *DeleteQuestionnaireAnswersByAnswerIdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedQuestionnairesDataServer()
}

// UnimplementedQuestionnairesDataServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionnairesDataServer struct {
}

func (UnimplementedQuestionnairesDataServer) GetQuestionnaireItemsByQuestionnaireId(context.Context, *GetQuestionnaireItemsByQuestionnaireIdRequest) (*GetQuestionnaireItemsByQuestionnaireIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionnaireItemsByQuestionnaireId not implemented")
}
func (UnimplementedQuestionnairesDataServer) CreateQuestionnaireAnswers(context.Context, *CreateQuestionnaireAnswersRequest) (*CreateQuestionnaireAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionnaireAnswers not implemented")
}
func (UnimplementedQuestionnairesDataServer) GetQuestionnaireAnswersByUserId(context.Context, *GetQuestionnaireAnswersByUserIdRequest) (*GetQuestionnaireAnswersByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionnaireAnswersByUserId not implemented")
}
func (UnimplementedQuestionnairesDataServer) GetQuestionnaireAnswersByAnswerId(context.Context, *GetQuestionnaireAnswersByAnswerIdRequest) (*GetQuestionnaireAnswersByAnswerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionnaireAnswersByAnswerId not implemented")
}
func (UnimplementedQuestionnairesDataServer) DeleteQuestionnaireAnswersByAnswerId(context.Context, *DeleteQuestionnaireAnswersByAnswerIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestionnaireAnswersByAnswerId not implemented")
}
func (UnimplementedQuestionnairesDataServer) mustEmbedUnimplementedQuestionnairesDataServer() {}

// UnsafeQuestionnairesDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionnairesDataServer will
// result in compilation errors.
type UnsafeQuestionnairesDataServer interface {
	mustEmbedUnimplementedQuestionnairesDataServer()
}

func RegisterQuestionnairesDataServer(s grpc.ServiceRegistrar, srv QuestionnairesDataServer) {
	s.RegisterService(&QuestionnairesData_ServiceDesc, srv)
}

func _QuestionnairesData_GetQuestionnaireItemsByQuestionnaireId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionnaireItemsByQuestionnaireIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnairesDataServer).GetQuestionnaireItemsByQuestionnaireId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.questionnaires.QuestionnairesData/GetQuestionnaireItemsByQuestionnaireId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnairesDataServer).GetQuestionnaireItemsByQuestionnaireId(ctx, req.(*GetQuestionnaireItemsByQuestionnaireIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnairesData_CreateQuestionnaireAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionnaireAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnairesDataServer).CreateQuestionnaireAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.questionnaires.QuestionnairesData/CreateQuestionnaireAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnairesDataServer).CreateQuestionnaireAnswers(ctx, req.(*CreateQuestionnaireAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnairesData_GetQuestionnaireAnswersByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionnaireAnswersByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnairesDataServer).GetQuestionnaireAnswersByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.questionnaires.QuestionnairesData/GetQuestionnaireAnswersByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnairesDataServer).GetQuestionnaireAnswersByUserId(ctx, req.(*GetQuestionnaireAnswersByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnairesData_GetQuestionnaireAnswersByAnswerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionnaireAnswersByAnswerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnairesDataServer).GetQuestionnaireAnswersByAnswerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.questionnaires.QuestionnairesData/GetQuestionnaireAnswersByAnswerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnairesDataServer).GetQuestionnaireAnswersByAnswerId(ctx, req.(*GetQuestionnaireAnswersByAnswerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnairesData_DeleteQuestionnaireAnswersByAnswerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionnaireAnswersByAnswerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnairesDataServer).DeleteQuestionnaireAnswersByAnswerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.questionnaires.QuestionnairesData/DeleteQuestionnaireAnswersByAnswerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnairesDataServer).DeleteQuestionnaireAnswersByAnswerId(ctx, req.(*DeleteQuestionnaireAnswersByAnswerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionnairesData_ServiceDesc is the grpc.ServiceDesc for QuestionnairesData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionnairesData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dta.wed.api.v1.questionnaires.QuestionnairesData",
	HandlerType: (*QuestionnairesDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestionnaireItemsByQuestionnaireId",
			Handler:    _QuestionnairesData_GetQuestionnaireItemsByQuestionnaireId_Handler,
		},
		{
			MethodName: "CreateQuestionnaireAnswers",
			Handler:    _QuestionnairesData_CreateQuestionnaireAnswers_Handler,
		},
		{
			MethodName: "GetQuestionnaireAnswersByUserId",
			Handler:    _QuestionnairesData_GetQuestionnaireAnswersByUserId_Handler,
		},
		{
			MethodName: "GetQuestionnaireAnswersByAnswerId",
			Handler:    _QuestionnairesData_GetQuestionnaireAnswersByAnswerId_Handler,
		},
		{
			MethodName: "DeleteQuestionnaireAnswersByAnswerId",
			Handler:    _QuestionnairesData_DeleteQuestionnaireAnswersByAnswerId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dta-wed-api/v1/questionnaires/questionnaires.proto",
}
