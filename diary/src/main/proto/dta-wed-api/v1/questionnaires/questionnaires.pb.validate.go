// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dta-wed-api/v1/questionnaires/questionnaires.proto

package wedQuestionnaires

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetQuestionnaireAnswersByUserIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetQuestionnaireAnswersByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetQuestionnaireAnswersByUserIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetQuestionnaireAnswersByUserIdRequestMultiError, or nil if none found.
func (m *GetQuestionnaireAnswersByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionnaireAnswersByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Limit

	// no validation rules for Page

	// no validation rules for OrderBy

	// no validation rules for Asc

	if len(errors) > 0 {
		return GetQuestionnaireAnswersByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetQuestionnaireAnswersByUserIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetQuestionnaireAnswersByUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionnaireAnswersByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionnaireAnswersByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionnaireAnswersByUserIdRequestMultiError) AllErrors() []error { return m }

// GetQuestionnaireAnswersByUserIdRequestValidationError is the validation
// error returned by GetQuestionnaireAnswersByUserIdRequest.Validate if the
// designated constraints aren't met.
type GetQuestionnaireAnswersByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionnaireAnswersByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionnaireAnswersByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionnaireAnswersByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionnaireAnswersByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionnaireAnswersByUserIdRequestValidationError) ErrorName() string {
	return "GetQuestionnaireAnswersByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionnaireAnswersByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionnaireAnswersByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionnaireAnswersByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionnaireAnswersByUserIdRequestValidationError{}

// Validate checks the field values on QuestionnaireAnswerSummary with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionnaireAnswerSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionnaireAnswerSummary with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionnaireAnswerSummaryMultiError, or nil if none found.
func (m *QuestionnaireAnswerSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionnaireAnswerSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuestionnaireId

	// no validation rules for Date

	// no validation rules for AnswerId

	if len(errors) > 0 {
		return QuestionnaireAnswerSummaryMultiError(errors)
	}

	return nil
}

// QuestionnaireAnswerSummaryMultiError is an error wrapping multiple
// validation errors returned by QuestionnaireAnswerSummary.ValidateAll() if
// the designated constraints aren't met.
type QuestionnaireAnswerSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionnaireAnswerSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionnaireAnswerSummaryMultiError) AllErrors() []error { return m }

// QuestionnaireAnswerSummaryValidationError is the validation error returned
// by QuestionnaireAnswerSummary.Validate if the designated constraints aren't met.
type QuestionnaireAnswerSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionnaireAnswerSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionnaireAnswerSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionnaireAnswerSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionnaireAnswerSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionnaireAnswerSummaryValidationError) ErrorName() string {
	return "QuestionnaireAnswerSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionnaireAnswerSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionnaireAnswerSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionnaireAnswerSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionnaireAnswerSummaryValidationError{}

// Validate checks the field values on GetQuestionnaireAnswersByUserIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetQuestionnaireAnswersByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetQuestionnaireAnswersByUserIdResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetQuestionnaireAnswersByUserIdResponseMultiError, or nil if none found.
func (m *GetQuestionnaireAnswersByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionnaireAnswersByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for Count

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuestionnaireAnswersByUserIdResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuestionnaireAnswersByUserIdResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionnaireAnswersByUserIdResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQuestionnaireAnswersByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetQuestionnaireAnswersByUserIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetQuestionnaireAnswersByUserIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionnaireAnswersByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionnaireAnswersByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionnaireAnswersByUserIdResponseMultiError) AllErrors() []error { return m }

// GetQuestionnaireAnswersByUserIdResponseValidationError is the validation
// error returned by GetQuestionnaireAnswersByUserIdResponse.Validate if the
// designated constraints aren't met.
type GetQuestionnaireAnswersByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionnaireAnswersByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionnaireAnswersByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionnaireAnswersByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionnaireAnswersByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionnaireAnswersByUserIdResponseValidationError) ErrorName() string {
	return "GetQuestionnaireAnswersByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionnaireAnswersByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionnaireAnswersByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionnaireAnswersByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionnaireAnswersByUserIdResponseValidationError{}

// Validate checks the field values on QuestionnaireAnswerOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionnaireAnswerOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionnaireAnswerOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionnaireAnswerOptionMultiError, or nil if none found.
func (m *QuestionnaireAnswerOption) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionnaireAnswerOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuestionnaireOptionId

	// no validation rules for AnswerText

	// no validation rules for Data

	if len(errors) > 0 {
		return QuestionnaireAnswerOptionMultiError(errors)
	}

	return nil
}

// QuestionnaireAnswerOptionMultiError is an error wrapping multiple validation
// errors returned by QuestionnaireAnswerOption.ValidateAll() if the
// designated constraints aren't met.
type QuestionnaireAnswerOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionnaireAnswerOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionnaireAnswerOptionMultiError) AllErrors() []error { return m }

// QuestionnaireAnswerOptionValidationError is the validation error returned by
// QuestionnaireAnswerOption.Validate if the designated constraints aren't met.
type QuestionnaireAnswerOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionnaireAnswerOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionnaireAnswerOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionnaireAnswerOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionnaireAnswerOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionnaireAnswerOptionValidationError) ErrorName() string {
	return "QuestionnaireAnswerOptionValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionnaireAnswerOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionnaireAnswerOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionnaireAnswerOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionnaireAnswerOptionValidationError{}

// Validate checks the field values on QuestionnaireAnswer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionnaireAnswer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionnaireAnswer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionnaireAnswerMultiError, or nil if none found.
func (m *QuestionnaireAnswer) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionnaireAnswer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuestionnaireItemId

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionnaireAnswerValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionnaireAnswerValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionnaireAnswerValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuestionnaireAnswerMultiError(errors)
	}

	return nil
}

// QuestionnaireAnswerMultiError is an error wrapping multiple validation
// errors returned by QuestionnaireAnswer.ValidateAll() if the designated
// constraints aren't met.
type QuestionnaireAnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionnaireAnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionnaireAnswerMultiError) AllErrors() []error { return m }

// QuestionnaireAnswerValidationError is the validation error returned by
// QuestionnaireAnswer.Validate if the designated constraints aren't met.
type QuestionnaireAnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionnaireAnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionnaireAnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionnaireAnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionnaireAnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionnaireAnswerValidationError) ErrorName() string {
	return "QuestionnaireAnswerValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionnaireAnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionnaireAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionnaireAnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionnaireAnswerValidationError{}

// Validate checks the field values on CreateQuestionnaireAnswersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateQuestionnaireAnswersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQuestionnaireAnswersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateQuestionnaireAnswersRequestMultiError, or nil if none found.
func (m *CreateQuestionnaireAnswersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQuestionnaireAnswersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQuestionnaireId() <= 0 {
		err := CreateQuestionnaireAnswersRequestValidationError{
			field:  "QuestionnaireId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := CreateQuestionnaireAnswersRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDate() <= 0 {
		err := CreateQuestionnaireAnswersRequestValidationError{
			field:  "Date",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAnswers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateQuestionnaireAnswersRequestValidationError{
						field:  fmt.Sprintf("Answers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateQuestionnaireAnswersRequestValidationError{
						field:  fmt.Sprintf("Answers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateQuestionnaireAnswersRequestValidationError{
					field:  fmt.Sprintf("Answers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateQuestionnaireAnswersRequestMultiError(errors)
	}

	return nil
}

// CreateQuestionnaireAnswersRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateQuestionnaireAnswersRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateQuestionnaireAnswersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQuestionnaireAnswersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQuestionnaireAnswersRequestMultiError) AllErrors() []error { return m }

// CreateQuestionnaireAnswersRequestValidationError is the validation error
// returned by CreateQuestionnaireAnswersRequest.Validate if the designated
// constraints aren't met.
type CreateQuestionnaireAnswersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuestionnaireAnswersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuestionnaireAnswersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuestionnaireAnswersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuestionnaireAnswersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuestionnaireAnswersRequestValidationError) ErrorName() string {
	return "CreateQuestionnaireAnswersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuestionnaireAnswersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuestionnaireAnswersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuestionnaireAnswersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuestionnaireAnswersRequestValidationError{}

// Validate checks the field values on CreateQuestionnaireAnswersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateQuestionnaireAnswersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQuestionnaireAnswersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateQuestionnaireAnswersResponseMultiError, or nil if none found.
func (m *CreateQuestionnaireAnswersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQuestionnaireAnswersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateQuestionnaireAnswersResponseMultiError(errors)
	}

	return nil
}

// CreateQuestionnaireAnswersResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateQuestionnaireAnswersResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateQuestionnaireAnswersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQuestionnaireAnswersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQuestionnaireAnswersResponseMultiError) AllErrors() []error { return m }

// CreateQuestionnaireAnswersResponseValidationError is the validation error
// returned by CreateQuestionnaireAnswersResponse.Validate if the designated
// constraints aren't met.
type CreateQuestionnaireAnswersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuestionnaireAnswersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuestionnaireAnswersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuestionnaireAnswersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuestionnaireAnswersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuestionnaireAnswersResponseValidationError) ErrorName() string {
	return "CreateQuestionnaireAnswersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuestionnaireAnswersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuestionnaireAnswersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuestionnaireAnswersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuestionnaireAnswersResponseValidationError{}

// Validate checks the field values on
// GetQuestionnaireItemsByQuestionnaireIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetQuestionnaireItemsByQuestionnaireIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetQuestionnaireItemsByQuestionnaireIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetQuestionnaireItemsByQuestionnaireIdRequestMultiError, or nil if none found.
func (m *GetQuestionnaireItemsByQuestionnaireIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionnaireItemsByQuestionnaireIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuestionnaireId

	if len(errors) > 0 {
		return GetQuestionnaireItemsByQuestionnaireIdRequestMultiError(errors)
	}

	return nil
}

// GetQuestionnaireItemsByQuestionnaireIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetQuestionnaireItemsByQuestionnaireIdRequest.ValidateAll() if the
// designated constraints aren't met.
type GetQuestionnaireItemsByQuestionnaireIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionnaireItemsByQuestionnaireIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionnaireItemsByQuestionnaireIdRequestMultiError) AllErrors() []error { return m }

// GetQuestionnaireItemsByQuestionnaireIdRequestValidationError is the
// validation error returned by
// GetQuestionnaireItemsByQuestionnaireIdRequest.Validate if the designated
// constraints aren't met.
type GetQuestionnaireItemsByQuestionnaireIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionnaireItemsByQuestionnaireIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionnaireItemsByQuestionnaireIdRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetQuestionnaireItemsByQuestionnaireIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionnaireItemsByQuestionnaireIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionnaireItemsByQuestionnaireIdRequestValidationError) ErrorName() string {
	return "GetQuestionnaireItemsByQuestionnaireIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionnaireItemsByQuestionnaireIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionnaireItemsByQuestionnaireIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionnaireItemsByQuestionnaireIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionnaireItemsByQuestionnaireIdRequestValidationError{}

// Validate checks the field values on QuestionnaireItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QuestionnaireItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionnaireItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionnaireItemMultiError, or nil if none found.
func (m *QuestionnaireItem) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionnaireItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Required

	// no validation rules for Status

	// no validation rules for ItemTypeId

	// no validation rules for Order

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionnaireItemValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionnaireItemValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionnaireItemValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuestionnaireItemMultiError(errors)
	}

	return nil
}

// QuestionnaireItemMultiError is an error wrapping multiple validation errors
// returned by QuestionnaireItem.ValidateAll() if the designated constraints
// aren't met.
type QuestionnaireItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionnaireItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionnaireItemMultiError) AllErrors() []error { return m }

// QuestionnaireItemValidationError is the validation error returned by
// QuestionnaireItem.Validate if the designated constraints aren't met.
type QuestionnaireItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionnaireItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionnaireItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionnaireItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionnaireItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionnaireItemValidationError) ErrorName() string {
	return "QuestionnaireItemValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionnaireItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionnaireItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionnaireItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionnaireItemValidationError{}

// Validate checks the field values on QuestionnaireOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionnaireOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionnaireOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionnaireOptionMultiError, or nil if none found.
func (m *QuestionnaireOption) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionnaireOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Order

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionnaireOptionValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionnaireOptionValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionnaireOptionValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuestionnaireOptionMultiError(errors)
	}

	return nil
}

// QuestionnaireOptionMultiError is an error wrapping multiple validation
// errors returned by QuestionnaireOption.ValidateAll() if the designated
// constraints aren't met.
type QuestionnaireOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionnaireOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionnaireOptionMultiError) AllErrors() []error { return m }

// QuestionnaireOptionValidationError is the validation error returned by
// QuestionnaireOption.Validate if the designated constraints aren't met.
type QuestionnaireOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionnaireOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionnaireOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionnaireOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionnaireOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionnaireOptionValidationError) ErrorName() string {
	return "QuestionnaireOptionValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionnaireOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionnaireOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionnaireOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionnaireOptionValidationError{}

// Validate checks the field values on
// GetQuestionnaireItemsByQuestionnaireIdResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetQuestionnaireItemsByQuestionnaireIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetQuestionnaireItemsByQuestionnaireIdResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetQuestionnaireItemsByQuestionnaireIdResponseMultiError, or nil if none found.
func (m *GetQuestionnaireItemsByQuestionnaireIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionnaireItemsByQuestionnaireIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuestionnaireItemsByQuestionnaireIdResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuestionnaireItemsByQuestionnaireIdResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionnaireItemsByQuestionnaireIdResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQuestionnaireItemsByQuestionnaireIdResponseMultiError(errors)
	}

	return nil
}

// GetQuestionnaireItemsByQuestionnaireIdResponseMultiError is an error
// wrapping multiple validation errors returned by
// GetQuestionnaireItemsByQuestionnaireIdResponse.ValidateAll() if the
// designated constraints aren't met.
type GetQuestionnaireItemsByQuestionnaireIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionnaireItemsByQuestionnaireIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionnaireItemsByQuestionnaireIdResponseMultiError) AllErrors() []error { return m }

// GetQuestionnaireItemsByQuestionnaireIdResponseValidationError is the
// validation error returned by
// GetQuestionnaireItemsByQuestionnaireIdResponse.Validate if the designated
// constraints aren't met.
type GetQuestionnaireItemsByQuestionnaireIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionnaireItemsByQuestionnaireIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionnaireItemsByQuestionnaireIdResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetQuestionnaireItemsByQuestionnaireIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionnaireItemsByQuestionnaireIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionnaireItemsByQuestionnaireIdResponseValidationError) ErrorName() string {
	return "GetQuestionnaireItemsByQuestionnaireIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionnaireItemsByQuestionnaireIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionnaireItemsByQuestionnaireIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionnaireItemsByQuestionnaireIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionnaireItemsByQuestionnaireIdResponseValidationError{}

// Validate checks the field values on GetQuestionnaireAnswersByAnswerIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetQuestionnaireAnswersByAnswerIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetQuestionnaireAnswersByAnswerIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetQuestionnaireAnswersByAnswerIdRequestMultiError, or nil if none found.
func (m *GetQuestionnaireAnswersByAnswerIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionnaireAnswersByAnswerIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AnswerId

	if len(errors) > 0 {
		return GetQuestionnaireAnswersByAnswerIdRequestMultiError(errors)
	}

	return nil
}

// GetQuestionnaireAnswersByAnswerIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetQuestionnaireAnswersByAnswerIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionnaireAnswersByAnswerIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionnaireAnswersByAnswerIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionnaireAnswersByAnswerIdRequestMultiError) AllErrors() []error { return m }

// GetQuestionnaireAnswersByAnswerIdRequestValidationError is the validation
// error returned by GetQuestionnaireAnswersByAnswerIdRequest.Validate if the
// designated constraints aren't met.
type GetQuestionnaireAnswersByAnswerIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionnaireAnswersByAnswerIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionnaireAnswersByAnswerIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionnaireAnswersByAnswerIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionnaireAnswersByAnswerIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionnaireAnswersByAnswerIdRequestValidationError) ErrorName() string {
	return "GetQuestionnaireAnswersByAnswerIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionnaireAnswersByAnswerIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionnaireAnswersByAnswerIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionnaireAnswersByAnswerIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionnaireAnswersByAnswerIdRequestValidationError{}

// Validate checks the field values on QuestionnaireItemAnswers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionnaireItemAnswers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionnaireItemAnswers with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionnaireItemAnswersMultiError, or nil if none found.
func (m *QuestionnaireItemAnswers) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionnaireItemAnswers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	for idx, item := range m.GetItemAnswers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionnaireItemAnswersValidationError{
						field:  fmt.Sprintf("ItemAnswers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionnaireItemAnswersValidationError{
						field:  fmt.Sprintf("ItemAnswers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionnaireItemAnswersValidationError{
					field:  fmt.Sprintf("ItemAnswers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuestionnaireItemAnswersMultiError(errors)
	}

	return nil
}

// QuestionnaireItemAnswersMultiError is an error wrapping multiple validation
// errors returned by QuestionnaireItemAnswers.ValidateAll() if the designated
// constraints aren't met.
type QuestionnaireItemAnswersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionnaireItemAnswersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionnaireItemAnswersMultiError) AllErrors() []error { return m }

// QuestionnaireItemAnswersValidationError is the validation error returned by
// QuestionnaireItemAnswers.Validate if the designated constraints aren't met.
type QuestionnaireItemAnswersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionnaireItemAnswersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionnaireItemAnswersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionnaireItemAnswersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionnaireItemAnswersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionnaireItemAnswersValidationError) ErrorName() string {
	return "QuestionnaireItemAnswersValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionnaireItemAnswersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionnaireItemAnswers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionnaireItemAnswersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionnaireItemAnswersValidationError{}

// Validate checks the field values on QuestionnaireItemAnswer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionnaireItemAnswer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionnaireItemAnswer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionnaireItemAnswerMultiError, or nil if none found.
func (m *QuestionnaireItemAnswer) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionnaireItemAnswer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OptionId

	// no validation rules for ItemAnswerText

	if all {
		switch v := interface{}(m.GetItemAnswerData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionnaireItemAnswerValidationError{
					field:  "ItemAnswerData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionnaireItemAnswerValidationError{
					field:  "ItemAnswerData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemAnswerData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionnaireItemAnswerValidationError{
				field:  "ItemAnswerData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ItemAnswerId

	if len(errors) > 0 {
		return QuestionnaireItemAnswerMultiError(errors)
	}

	return nil
}

// QuestionnaireItemAnswerMultiError is an error wrapping multiple validation
// errors returned by QuestionnaireItemAnswer.ValidateAll() if the designated
// constraints aren't met.
type QuestionnaireItemAnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionnaireItemAnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionnaireItemAnswerMultiError) AllErrors() []error { return m }

// QuestionnaireItemAnswerValidationError is the validation error returned by
// QuestionnaireItemAnswer.Validate if the designated constraints aren't met.
type QuestionnaireItemAnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionnaireItemAnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionnaireItemAnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionnaireItemAnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionnaireItemAnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionnaireItemAnswerValidationError) ErrorName() string {
	return "QuestionnaireItemAnswerValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionnaireItemAnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionnaireItemAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionnaireItemAnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionnaireItemAnswerValidationError{}

// Validate checks the field values on
// GetQuestionnaireAnswersByAnswerIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetQuestionnaireAnswersByAnswerIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetQuestionnaireAnswersByAnswerIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetQuestionnaireAnswersByAnswerIdResponseMultiError, or nil if none found.
func (m *GetQuestionnaireAnswersByAnswerIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuestionnaireAnswersByAnswerIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for AnswerId

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuestionnaireAnswersByAnswerIdResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuestionnaireAnswersByAnswerIdResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionnaireAnswersByAnswerIdResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQuestionnaireAnswersByAnswerIdResponseMultiError(errors)
	}

	return nil
}

// GetQuestionnaireAnswersByAnswerIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetQuestionnaireAnswersByAnswerIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetQuestionnaireAnswersByAnswerIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuestionnaireAnswersByAnswerIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuestionnaireAnswersByAnswerIdResponseMultiError) AllErrors() []error { return m }

// GetQuestionnaireAnswersByAnswerIdResponseValidationError is the validation
// error returned by GetQuestionnaireAnswersByAnswerIdResponse.Validate if the
// designated constraints aren't met.
type GetQuestionnaireAnswersByAnswerIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionnaireAnswersByAnswerIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionnaireAnswersByAnswerIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionnaireAnswersByAnswerIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionnaireAnswersByAnswerIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionnaireAnswersByAnswerIdResponseValidationError) ErrorName() string {
	return "GetQuestionnaireAnswersByAnswerIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionnaireAnswersByAnswerIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionnaireAnswersByAnswerIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionnaireAnswersByAnswerIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionnaireAnswersByAnswerIdResponseValidationError{}

// Validate checks the field values on
// DeleteQuestionnaireAnswersByAnswerIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteQuestionnaireAnswersByAnswerIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteQuestionnaireAnswersByAnswerIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteQuestionnaireAnswersByAnswerIdRequestMultiError, or nil if none found.
func (m *DeleteQuestionnaireAnswersByAnswerIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteQuestionnaireAnswersByAnswerIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AnswerId

	if len(errors) > 0 {
		return DeleteQuestionnaireAnswersByAnswerIdRequestMultiError(errors)
	}

	return nil
}

// DeleteQuestionnaireAnswersByAnswerIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteQuestionnaireAnswersByAnswerIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteQuestionnaireAnswersByAnswerIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteQuestionnaireAnswersByAnswerIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteQuestionnaireAnswersByAnswerIdRequestMultiError) AllErrors() []error { return m }

// DeleteQuestionnaireAnswersByAnswerIdRequestValidationError is the validation
// error returned by DeleteQuestionnaireAnswersByAnswerIdRequest.Validate if
// the designated constraints aren't met.
type DeleteQuestionnaireAnswersByAnswerIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteQuestionnaireAnswersByAnswerIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteQuestionnaireAnswersByAnswerIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteQuestionnaireAnswersByAnswerIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteQuestionnaireAnswersByAnswerIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteQuestionnaireAnswersByAnswerIdRequestValidationError) ErrorName() string {
	return "DeleteQuestionnaireAnswersByAnswerIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteQuestionnaireAnswersByAnswerIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteQuestionnaireAnswersByAnswerIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteQuestionnaireAnswersByAnswerIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteQuestionnaireAnswersByAnswerIdRequestValidationError{}
