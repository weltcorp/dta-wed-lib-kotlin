// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dta-wed-api/v1/patients/patients.proto

package patients

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetPatientsByAccountIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientsByAccountIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsByAccountIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPatientsByAccountIdRequestMultiError, or nil if none found.
func (m *GetPatientsByAccountIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsByAccountIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Accesscode

	// no validation rules for Email

	if len(errors) > 0 {
		return GetPatientsByAccountIdRequestMultiError(errors)
	}

	return nil
}

// GetPatientsByAccountIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetPatientsByAccountIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPatientsByAccountIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsByAccountIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsByAccountIdRequestMultiError) AllErrors() []error { return m }

// GetPatientsByAccountIdRequestValidationError is the validation error
// returned by GetPatientsByAccountIdRequest.Validate if the designated
// constraints aren't met.
type GetPatientsByAccountIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsByAccountIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsByAccountIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsByAccountIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsByAccountIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsByAccountIdRequestValidationError) ErrorName() string {
	return "GetPatientsByAccountIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsByAccountIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsByAccountIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsByAccountIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsByAccountIdRequestValidationError{}

// Validate checks the field values on GetPatientsByAccountIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientsByAccountIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsByAccountIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPatientsByAccountIdResponseMultiError, or nil if none found.
func (m *GetPatientsByAccountIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsByAccountIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPatients() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientsByAccountIdResponseValidationError{
						field:  fmt.Sprintf("Patients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientsByAccountIdResponseValidationError{
						field:  fmt.Sprintf("Patients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientsByAccountIdResponseValidationError{
					field:  fmt.Sprintf("Patients[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPatientsByAccountIdResponseMultiError(errors)
	}

	return nil
}

// GetPatientsByAccountIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetPatientsByAccountIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPatientsByAccountIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsByAccountIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsByAccountIdResponseMultiError) AllErrors() []error { return m }

// GetPatientsByAccountIdResponseValidationError is the validation error
// returned by GetPatientsByAccountIdResponse.Validate if the designated
// constraints aren't met.
type GetPatientsByAccountIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsByAccountIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsByAccountIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsByAccountIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsByAccountIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsByAccountIdResponseValidationError) ErrorName() string {
	return "GetPatientsByAccountIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsByAccountIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsByAccountIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsByAccountIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsByAccountIdResponseValidationError{}

// Validate checks the field values on GetPatientByUserIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientByUserIdRequestMultiError, or nil if none found.
func (m *GetPatientByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetPatientByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetPatientByUserIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetPatientByUserIdRequest.ValidateAll() if the
// designated constraints aren't met.
type GetPatientByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientByUserIdRequestMultiError) AllErrors() []error { return m }

// GetPatientByUserIdRequestValidationError is the validation error returned by
// GetPatientByUserIdRequest.Validate if the designated constraints aren't met.
type GetPatientByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientByUserIdRequestValidationError) ErrorName() string {
	return "GetPatientByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientByUserIdRequestValidationError{}

// Validate checks the field values on GetPatientByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientByUserIdResponseMultiError, or nil if none found.
func (m *GetPatientByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Accesscode

	// no validation rules for Email

	// no validation rules for CreatedAt

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientByUserIdResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientByUserIdResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientByUserIdResponseValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMedicalDoctor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientByUserIdResponseValidationError{
					field:  "MedicalDoctor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientByUserIdResponseValidationError{
					field:  "MedicalDoctor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedicalDoctor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientByUserIdResponseValidationError{
				field:  "MedicalDoctor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPatientByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetPatientByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetPatientByUserIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPatientByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientByUserIdResponseMultiError) AllErrors() []error { return m }

// GetPatientByUserIdResponseValidationError is the validation error returned
// by GetPatientByUserIdResponse.Validate if the designated constraints aren't met.
type GetPatientByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientByUserIdResponseValidationError) ErrorName() string {
	return "GetPatientByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientByUserIdResponseValidationError{}

// Validate checks the field values on GetPatientsBySiteIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientsBySiteIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsBySiteIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientsBySiteIdRequestMultiError, or nil if none found.
func (m *GetPatientsBySiteIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsBySiteIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSiteId() <= 0 {
		err := GetPatientsBySiteIdRequestValidationError{
			field:  "SiteId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Accesscode

	// no validation rules for Email

	// no validation rules for Limit

	// no validation rules for Page

	if len(errors) > 0 {
		return GetPatientsBySiteIdRequestMultiError(errors)
	}

	return nil
}

// GetPatientsBySiteIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetPatientsBySiteIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPatientsBySiteIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsBySiteIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsBySiteIdRequestMultiError) AllErrors() []error { return m }

// GetPatientsBySiteIdRequestValidationError is the validation error returned
// by GetPatientsBySiteIdRequest.Validate if the designated constraints aren't met.
type GetPatientsBySiteIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsBySiteIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsBySiteIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsBySiteIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsBySiteIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsBySiteIdRequestValidationError) ErrorName() string {
	return "GetPatientsBySiteIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsBySiteIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsBySiteIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsBySiteIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsBySiteIdRequestValidationError{}

// Validate checks the field values on GetPatientsBySiteIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientsBySiteIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsBySiteIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientsBySiteIdResponseMultiError, or nil if none found.
func (m *GetPatientsBySiteIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsBySiteIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUnregistered() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientsBySiteIdResponseValidationError{
						field:  fmt.Sprintf("Unregistered[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientsBySiteIdResponseValidationError{
						field:  fmt.Sprintf("Unregistered[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientsBySiteIdResponseValidationError{
					field:  fmt.Sprintf("Unregistered[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPatients() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientsBySiteIdResponseValidationError{
						field:  fmt.Sprintf("Patients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientsBySiteIdResponseValidationError{
						field:  fmt.Sprintf("Patients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientsBySiteIdResponseValidationError{
					field:  fmt.Sprintf("Patients[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPatientsBySiteIdResponseMultiError(errors)
	}

	return nil
}

// GetPatientsBySiteIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetPatientsBySiteIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPatientsBySiteIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsBySiteIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsBySiteIdResponseMultiError) AllErrors() []error { return m }

// GetPatientsBySiteIdResponseValidationError is the validation error returned
// by GetPatientsBySiteIdResponse.Validate if the designated constraints
// aren't met.
type GetPatientsBySiteIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsBySiteIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsBySiteIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsBySiteIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsBySiteIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsBySiteIdResponseValidationError) ErrorName() string {
	return "GetPatientsBySiteIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsBySiteIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsBySiteIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsBySiteIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsBySiteIdResponseValidationError{}

// Validate checks the field values on GetPatientMedicalRecordsByUserIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestMultiError, or nil if none found.
func (m *GetPatientMedicalRecordsByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetPatientMedicalRecordsByUserIdRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestMultiError) AllErrors() []error { return m }

// GetPatientMedicalRecordsByUserIdRequestValidationError is the validation
// error returned by GetPatientMedicalRecordsByUserIdRequest.Validate if the
// designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestValidationError{}

// Validate checks the field values on DiaryItemAnswers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiaryItemAnswers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiaryItemAnswers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiaryItemAnswersMultiError, or nil if none found.
func (m *DiaryItemAnswers) ValidateAll() error {
	return m.validate(true)
}

func (m *DiaryItemAnswers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	for idx, item := range m.GetItemAnswers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiaryItemAnswersValidationError{
						field:  fmt.Sprintf("ItemAnswers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiaryItemAnswersValidationError{
						field:  fmt.Sprintf("ItemAnswers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiaryItemAnswersValidationError{
					field:  fmt.Sprintf("ItemAnswers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiaryItemAnswersMultiError(errors)
	}

	return nil
}

// DiaryItemAnswersMultiError is an error wrapping multiple validation errors
// returned by DiaryItemAnswers.ValidateAll() if the designated constraints
// aren't met.
type DiaryItemAnswersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiaryItemAnswersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiaryItemAnswersMultiError) AllErrors() []error { return m }

// DiaryItemAnswersValidationError is the validation error returned by
// DiaryItemAnswers.Validate if the designated constraints aren't met.
type DiaryItemAnswersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiaryItemAnswersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiaryItemAnswersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiaryItemAnswersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiaryItemAnswersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiaryItemAnswersValidationError) ErrorName() string { return "DiaryItemAnswersValidationError" }

// Error satisfies the builtin error interface
func (e DiaryItemAnswersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiaryItemAnswers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiaryItemAnswersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiaryItemAnswersValidationError{}

// Validate checks the field values on DiaryItemAnswer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiaryItemAnswer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiaryItemAnswer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiaryItemAnswerMultiError, or nil if none found.
func (m *DiaryItemAnswer) ValidateAll() error {
	return m.validate(true)
}

func (m *DiaryItemAnswer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemAnswerId

	// no validation rules for ItemAnswerText

	if all {
		switch v := interface{}(m.GetItemAnswerData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiaryItemAnswerValidationError{
					field:  "ItemAnswerData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiaryItemAnswerValidationError{
					field:  "ItemAnswerData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemAnswerData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiaryItemAnswerValidationError{
				field:  "ItemAnswerData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OptionId

	// no validation rules for OptionTitle

	// no validation rules for OptionDescription

	if all {
		switch v := interface{}(m.GetOptionData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiaryItemAnswerValidationError{
					field:  "OptionData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiaryItemAnswerValidationError{
					field:  "OptionData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptionData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiaryItemAnswerValidationError{
				field:  "OptionData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiaryItemAnswerMultiError(errors)
	}

	return nil
}

// DiaryItemAnswerMultiError is an error wrapping multiple validation errors
// returned by DiaryItemAnswer.ValidateAll() if the designated constraints
// aren't met.
type DiaryItemAnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiaryItemAnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiaryItemAnswerMultiError) AllErrors() []error { return m }

// DiaryItemAnswerValidationError is the validation error returned by
// DiaryItemAnswer.Validate if the designated constraints aren't met.
type DiaryItemAnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiaryItemAnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiaryItemAnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiaryItemAnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiaryItemAnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiaryItemAnswerValidationError) ErrorName() string { return "DiaryItemAnswerValidationError" }

// Error satisfies the builtin error interface
func (e DiaryItemAnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiaryItemAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiaryItemAnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiaryItemAnswerValidationError{}

// Validate checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestResponseMultiError, or nil if none found.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPeriodOfDates()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponseValidationError{
					field:  "PeriodOfDates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponseValidationError{
					field:  "PeriodOfDates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodOfDates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientMedicalRecordsByUserIdRequestResponseValidationError{
				field:  "PeriodOfDates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientMedicalRecordsByUserIdRequestResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestResponseMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestResponseMultiError is an error
// wrapping multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestResponseMultiError) AllErrors() []error { return m }

// GetPatientMedicalRecordsByUserIdRequestResponseValidationError is the
// validation error returned by
// GetPatientMedicalRecordsByUserIdRequestResponse.Validate if the designated
// constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestResponseValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestResponseValidationError{}

// Validate checks the field values on GetDropoutPatientsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDropoutPatientsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDropoutPatientsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDropoutPatientsRequestMultiError, or nil if none found.
func (m *GetDropoutPatientsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDropoutPatientsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SiteId

	if len(errors) > 0 {
		return GetDropoutPatientsRequestMultiError(errors)
	}

	return nil
}

// GetDropoutPatientsRequestMultiError is an error wrapping multiple validation
// errors returned by GetDropoutPatientsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetDropoutPatientsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDropoutPatientsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDropoutPatientsRequestMultiError) AllErrors() []error { return m }

// GetDropoutPatientsRequestValidationError is the validation error returned by
// GetDropoutPatientsRequest.Validate if the designated constraints aren't met.
type GetDropoutPatientsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDropoutPatientsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDropoutPatientsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDropoutPatientsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDropoutPatientsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDropoutPatientsRequestValidationError) ErrorName() string {
	return "GetDropoutPatientsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDropoutPatientsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDropoutPatientsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDropoutPatientsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDropoutPatientsRequestValidationError{}

// Validate checks the field values on GetDropoutPatientsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDropoutPatientsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDropoutPatientsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDropoutPatientsResponseMultiError, or nil if none found.
func (m *GetDropoutPatientsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDropoutPatientsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDropoutPatientsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDropoutPatientsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDropoutPatientsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDropoutPatientsResponseMultiError(errors)
	}

	return nil
}

// GetDropoutPatientsResponseMultiError is an error wrapping multiple
// validation errors returned by GetDropoutPatientsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDropoutPatientsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDropoutPatientsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDropoutPatientsResponseMultiError) AllErrors() []error { return m }

// GetDropoutPatientsResponseValidationError is the validation error returned
// by GetDropoutPatientsResponse.Validate if the designated constraints aren't met.
type GetDropoutPatientsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDropoutPatientsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDropoutPatientsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDropoutPatientsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDropoutPatientsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDropoutPatientsResponseValidationError) ErrorName() string {
	return "GetDropoutPatientsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDropoutPatientsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDropoutPatientsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDropoutPatientsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDropoutPatientsResponseValidationError{}

// Validate checks the field values on GetPatientsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientsRequestMultiError, or nil if none found.
func (m *GetPatientsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Page

	// no validation rules for SortBy

	// no validation rules for Asc

	// no validation rules for SiteId

	// no validation rules for Accesscode

	// no validation rules for Email

	// no validation rules for Status

	if len(errors) > 0 {
		return GetPatientsRequestMultiError(errors)
	}

	return nil
}

// GetPatientsRequestMultiError is an error wrapping multiple validation errors
// returned by GetPatientsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPatientsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsRequestMultiError) AllErrors() []error { return m }

// GetPatientsRequestValidationError is the validation error returned by
// GetPatientsRequest.Validate if the designated constraints aren't met.
type GetPatientsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsRequestValidationError) ErrorName() string {
	return "GetPatientsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsRequestValidationError{}

// Validate checks the field values on GetPatientsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientsResponseMultiError, or nil if none found.
func (m *GetPatientsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for Count

	for idx, item := range m.GetPatients() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientsResponseValidationError{
						field:  fmt.Sprintf("Patients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientsResponseValidationError{
						field:  fmt.Sprintf("Patients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientsResponseValidationError{
					field:  fmt.Sprintf("Patients[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPatientsResponseMultiError(errors)
	}

	return nil
}

// GetPatientsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPatientsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPatientsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsResponseMultiError) AllErrors() []error { return m }

// GetPatientsResponseValidationError is the validation error returned by
// GetPatientsResponse.Validate if the designated constraints aren't met.
type GetPatientsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsResponseValidationError) ErrorName() string {
	return "GetPatientsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsResponseValidationError{}

// Validate checks the field values on GetPatientOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientOverviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientOverviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientOverviewRequestMultiError, or nil if none found.
func (m *GetPatientOverviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientOverviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Accesscode

	if len(errors) > 0 {
		return GetPatientOverviewRequestMultiError(errors)
	}

	return nil
}

// GetPatientOverviewRequestMultiError is an error wrapping multiple validation
// errors returned by GetPatientOverviewRequest.ValidateAll() if the
// designated constraints aren't met.
type GetPatientOverviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientOverviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientOverviewRequestMultiError) AllErrors() []error { return m }

// GetPatientOverviewRequestValidationError is the validation error returned by
// GetPatientOverviewRequest.Validate if the designated constraints aren't met.
type GetPatientOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientOverviewRequestValidationError) ErrorName() string {
	return "GetPatientOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientOverviewRequestValidationError{}

// Validate checks the field values on GetPatientOverviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientOverviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientOverviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientOverviewResponseMultiError, or nil if none found.
func (m *GetPatientOverviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientOverviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Accesscode

	// no validation rules for UserId

	// no validation rules for Email

	// no validation rules for Status

	// no validation rules for GroupId

	// no validation rules for SiteId

	// no validation rules for StartedAt

	// no validation rules for NthDay

	// no validation rules for AppAccessDays

	// no validation rules for DiaryDoneCount

	for idx, item := range m.GetVisits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientOverviewResponseValidationError{
						field:  fmt.Sprintf("Visits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientOverviewResponseValidationError{
						field:  fmt.Sprintf("Visits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientOverviewResponseValidationError{
					field:  fmt.Sprintf("Visits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatusNote()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientOverviewResponseValidationError{
					field:  "StatusNote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientOverviewResponseValidationError{
					field:  "StatusNote",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusNote()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientOverviewResponseValidationError{
				field:  "StatusNote",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLessons()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientOverviewResponseValidationError{
					field:  "Lessons",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientOverviewResponseValidationError{
					field:  "Lessons",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLessons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientOverviewResponseValidationError{
				field:  "Lessons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMedicalDoctor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientOverviewResponseValidationError{
					field:  "MedicalDoctor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientOverviewResponseValidationError{
					field:  "MedicalDoctor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedicalDoctor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientOverviewResponseValidationError{
				field:  "MedicalDoctor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPatientOverviewResponseMultiError(errors)
	}

	return nil
}

// GetPatientOverviewResponseMultiError is an error wrapping multiple
// validation errors returned by GetPatientOverviewResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPatientOverviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientOverviewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientOverviewResponseMultiError) AllErrors() []error { return m }

// GetPatientOverviewResponseValidationError is the validation error returned
// by GetPatientOverviewResponse.Validate if the designated constraints aren't met.
type GetPatientOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientOverviewResponseValidationError) ErrorName() string {
	return "GetPatientOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientOverviewResponseValidationError{}

// Validate checks the field values on GetPatientClinicalRecordsByUserIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPatientClinicalRecordsByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientClinicalRecordsByUserIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetPatientClinicalRecordsByUserIdRequestMultiError, or nil if none found.
func (m *GetPatientClinicalRecordsByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientClinicalRecordsByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetPatientClinicalRecordsByUserIdRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPatientClinicalRecordsByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetPatientClinicalRecordsByUserIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetPatientClinicalRecordsByUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPatientClinicalRecordsByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientClinicalRecordsByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientClinicalRecordsByUserIdRequestMultiError) AllErrors() []error { return m }

// GetPatientClinicalRecordsByUserIdRequestValidationError is the validation
// error returned by GetPatientClinicalRecordsByUserIdRequest.Validate if the
// designated constraints aren't met.
type GetPatientClinicalRecordsByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientClinicalRecordsByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientClinicalRecordsByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientClinicalRecordsByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientClinicalRecordsByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientClinicalRecordsByUserIdRequestValidationError) ErrorName() string {
	return "GetPatientClinicalRecordsByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientClinicalRecordsByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientClinicalRecordsByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientClinicalRecordsByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientClinicalRecordsByUserIdRequestValidationError{}

// Validate checks the field values on
// GetPatientClinicalRecordsByUserIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPatientClinicalRecordsByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientClinicalRecordsByUserIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetPatientClinicalRecordsByUserIdResponseMultiError, or nil if none found.
func (m *GetPatientClinicalRecordsByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientClinicalRecordsByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientClinicalRecordsByUserIdResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientClinicalRecordsByUserIdResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientClinicalRecordsByUserIdResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPatientClinicalRecordsByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetPatientClinicalRecordsByUserIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetPatientClinicalRecordsByUserIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPatientClinicalRecordsByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientClinicalRecordsByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientClinicalRecordsByUserIdResponseMultiError) AllErrors() []error { return m }

// GetPatientClinicalRecordsByUserIdResponseValidationError is the validation
// error returned by GetPatientClinicalRecordsByUserIdResponse.Validate if the
// designated constraints aren't met.
type GetPatientClinicalRecordsByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientClinicalRecordsByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientClinicalRecordsByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientClinicalRecordsByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientClinicalRecordsByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientClinicalRecordsByUserIdResponseValidationError) ErrorName() string {
	return "GetPatientClinicalRecordsByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientClinicalRecordsByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientClinicalRecordsByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientClinicalRecordsByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientClinicalRecordsByUserIdResponseValidationError{}

// Validate checks the field values on DisablePatientByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisablePatientByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisablePatientByUserIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DisablePatientByUserIdRequestMultiError, or nil if none found.
func (m *DisablePatientByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisablePatientByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DisablePatientByUserIdRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStatus() <= 0 {
		err := DisablePatientByUserIdRequestValidationError{
			field:  "Status",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Note

	if len(errors) > 0 {
		return DisablePatientByUserIdRequestMultiError(errors)
	}

	return nil
}

// DisablePatientByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by DisablePatientByUserIdRequest.ValidateAll()
// if the designated constraints aren't met.
type DisablePatientByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisablePatientByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisablePatientByUserIdRequestMultiError) AllErrors() []error { return m }

// DisablePatientByUserIdRequestValidationError is the validation error
// returned by DisablePatientByUserIdRequest.Validate if the designated
// constraints aren't met.
type DisablePatientByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisablePatientByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisablePatientByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisablePatientByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisablePatientByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisablePatientByUserIdRequestValidationError) ErrorName() string {
	return "DisablePatientByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisablePatientByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisablePatientByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisablePatientByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisablePatientByUserIdRequestValidationError{}

// Validate checks the field values on GetPatientsByVisitIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientsByVisitIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsByVisitIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientsByVisitIdRequestMultiError, or nil if none found.
func (m *GetPatientsByVisitIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsByVisitIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVisitId() <= 0 {
		err := GetPatientsByVisitIdRequestValidationError{
			field:  "VisitId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SiteId

	if len(errors) > 0 {
		return GetPatientsByVisitIdRequestMultiError(errors)
	}

	return nil
}

// GetPatientsByVisitIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetPatientsByVisitIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPatientsByVisitIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsByVisitIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsByVisitIdRequestMultiError) AllErrors() []error { return m }

// GetPatientsByVisitIdRequestValidationError is the validation error returned
// by GetPatientsByVisitIdRequest.Validate if the designated constraints
// aren't met.
type GetPatientsByVisitIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsByVisitIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsByVisitIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsByVisitIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsByVisitIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsByVisitIdRequestValidationError) ErrorName() string {
	return "GetPatientsByVisitIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsByVisitIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsByVisitIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsByVisitIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsByVisitIdRequestValidationError{}

// Validate checks the field values on GetPatientsByVisitIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientsByVisitIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsByVisitIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientsByVisitIdResponseMultiError, or nil if none found.
func (m *GetPatientsByVisitIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsByVisitIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientsByVisitIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientsByVisitIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientsByVisitIdResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPatientsByVisitIdResponseMultiError(errors)
	}

	return nil
}

// GetPatientsByVisitIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetPatientsByVisitIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPatientsByVisitIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsByVisitIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsByVisitIdResponseMultiError) AllErrors() []error { return m }

// GetPatientsByVisitIdResponseValidationError is the validation error returned
// by GetPatientsByVisitIdResponse.Validate if the designated constraints
// aren't met.
type GetPatientsByVisitIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsByVisitIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsByVisitIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsByVisitIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsByVisitIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsByVisitIdResponseValidationError) ErrorName() string {
	return "GetPatientsByVisitIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsByVisitIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsByVisitIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsByVisitIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsByVisitIdResponseValidationError{}

// Validate checks the field values on GetPatientsByAccountIdResponse_Patient
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPatientsByAccountIdResponse_Patient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientsByAccountIdResponse_Patient with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetPatientsByAccountIdResponse_PatientMultiError, or nil if none found.
func (m *GetPatientsByAccountIdResponse_Patient) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsByAccountIdResponse_Patient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Accesscode

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientsByAccountIdResponse_PatientValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientsByAccountIdResponse_PatientValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientsByAccountIdResponse_PatientValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return GetPatientsByAccountIdResponse_PatientMultiError(errors)
	}

	return nil
}

// GetPatientsByAccountIdResponse_PatientMultiError is an error wrapping
// multiple validation errors returned by
// GetPatientsByAccountIdResponse_Patient.ValidateAll() if the designated
// constraints aren't met.
type GetPatientsByAccountIdResponse_PatientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsByAccountIdResponse_PatientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsByAccountIdResponse_PatientMultiError) AllErrors() []error { return m }

// GetPatientsByAccountIdResponse_PatientValidationError is the validation
// error returned by GetPatientsByAccountIdResponse_Patient.Validate if the
// designated constraints aren't met.
type GetPatientsByAccountIdResponse_PatientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsByAccountIdResponse_PatientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsByAccountIdResponse_PatientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsByAccountIdResponse_PatientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsByAccountIdResponse_PatientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsByAccountIdResponse_PatientValidationError) ErrorName() string {
	return "GetPatientsByAccountIdResponse_PatientValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsByAccountIdResponse_PatientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsByAccountIdResponse_Patient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsByAccountIdResponse_PatientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsByAccountIdResponse_PatientValidationError{}

// Validate checks the field values on GetPatientByUserIdResponse_Schedule with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPatientByUserIdResponse_Schedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientByUserIdResponse_Schedule
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPatientByUserIdResponse_ScheduleMultiError, or nil if none found.
func (m *GetPatientByUserIdResponse_Schedule) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientByUserIdResponse_Schedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartAt

	// no validation rules for EndAt

	// no validation rules for UserDay

	if len(errors) > 0 {
		return GetPatientByUserIdResponse_ScheduleMultiError(errors)
	}

	return nil
}

// GetPatientByUserIdResponse_ScheduleMultiError is an error wrapping multiple
// validation errors returned by
// GetPatientByUserIdResponse_Schedule.ValidateAll() if the designated
// constraints aren't met.
type GetPatientByUserIdResponse_ScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientByUserIdResponse_ScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientByUserIdResponse_ScheduleMultiError) AllErrors() []error { return m }

// GetPatientByUserIdResponse_ScheduleValidationError is the validation error
// returned by GetPatientByUserIdResponse_Schedule.Validate if the designated
// constraints aren't met.
type GetPatientByUserIdResponse_ScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientByUserIdResponse_ScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientByUserIdResponse_ScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientByUserIdResponse_ScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientByUserIdResponse_ScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientByUserIdResponse_ScheduleValidationError) ErrorName() string {
	return "GetPatientByUserIdResponse_ScheduleValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientByUserIdResponse_ScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientByUserIdResponse_Schedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientByUserIdResponse_ScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientByUserIdResponse_ScheduleValidationError{}

// Validate checks the field values on GetPatientByUserIdResponse_MedicalDoctor
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPatientByUserIdResponse_MedicalDoctor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientByUserIdResponse_MedicalDoctor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetPatientByUserIdResponse_MedicalDoctorMultiError, or nil if none found.
func (m *GetPatientByUserIdResponse_MedicalDoctor) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientByUserIdResponse_MedicalDoctor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return GetPatientByUserIdResponse_MedicalDoctorMultiError(errors)
	}

	return nil
}

// GetPatientByUserIdResponse_MedicalDoctorMultiError is an error wrapping
// multiple validation errors returned by
// GetPatientByUserIdResponse_MedicalDoctor.ValidateAll() if the designated
// constraints aren't met.
type GetPatientByUserIdResponse_MedicalDoctorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientByUserIdResponse_MedicalDoctorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientByUserIdResponse_MedicalDoctorMultiError) AllErrors() []error { return m }

// GetPatientByUserIdResponse_MedicalDoctorValidationError is the validation
// error returned by GetPatientByUserIdResponse_MedicalDoctor.Validate if the
// designated constraints aren't met.
type GetPatientByUserIdResponse_MedicalDoctorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientByUserIdResponse_MedicalDoctorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientByUserIdResponse_MedicalDoctorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientByUserIdResponse_MedicalDoctorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientByUserIdResponse_MedicalDoctorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientByUserIdResponse_MedicalDoctorValidationError) ErrorName() string {
	return "GetPatientByUserIdResponse_MedicalDoctorValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientByUserIdResponse_MedicalDoctorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientByUserIdResponse_MedicalDoctor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientByUserIdResponse_MedicalDoctorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientByUserIdResponse_MedicalDoctorValidationError{}

// Validate checks the field values on GetPatientsBySiteIdResponse_Patient with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPatientsBySiteIdResponse_Patient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsBySiteIdResponse_Patient
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPatientsBySiteIdResponse_PatientMultiError, or nil if none found.
func (m *GetPatientsBySiteIdResponse_Patient) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsBySiteIdResponse_Patient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Accesscode

	// no validation rules for Email

	// no validation rules for CreatedAt

	// no validation rules for Status

	if len(errors) > 0 {
		return GetPatientsBySiteIdResponse_PatientMultiError(errors)
	}

	return nil
}

// GetPatientsBySiteIdResponse_PatientMultiError is an error wrapping multiple
// validation errors returned by
// GetPatientsBySiteIdResponse_Patient.ValidateAll() if the designated
// constraints aren't met.
type GetPatientsBySiteIdResponse_PatientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsBySiteIdResponse_PatientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsBySiteIdResponse_PatientMultiError) AllErrors() []error { return m }

// GetPatientsBySiteIdResponse_PatientValidationError is the validation error
// returned by GetPatientsBySiteIdResponse_Patient.Validate if the designated
// constraints aren't met.
type GetPatientsBySiteIdResponse_PatientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsBySiteIdResponse_PatientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsBySiteIdResponse_PatientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsBySiteIdResponse_PatientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsBySiteIdResponse_PatientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsBySiteIdResponse_PatientValidationError) ErrorName() string {
	return "GetPatientsBySiteIdResponse_PatientValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsBySiteIdResponse_PatientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsBySiteIdResponse_Patient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsBySiteIdResponse_PatientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsBySiteIdResponse_PatientValidationError{}

// Validate checks the field values on
// GetPatientsBySiteIdResponse_UnregisteredAccesscode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPatientsBySiteIdResponse_UnregisteredAccesscode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientsBySiteIdResponse_UnregisteredAccesscode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetPatientsBySiteIdResponse_UnregisteredAccesscodeMultiError, or nil if
// none found.
func (m *GetPatientsBySiteIdResponse_UnregisteredAccesscode) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsBySiteIdResponse_UnregisteredAccesscode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Accesscode

	// no validation rules for Email

	// no validation rules for AccesscodeCreatedAt

	if len(errors) > 0 {
		return GetPatientsBySiteIdResponse_UnregisteredAccesscodeMultiError(errors)
	}

	return nil
}

// GetPatientsBySiteIdResponse_UnregisteredAccesscodeMultiError is an error
// wrapping multiple validation errors returned by
// GetPatientsBySiteIdResponse_UnregisteredAccesscode.ValidateAll() if the
// designated constraints aren't met.
type GetPatientsBySiteIdResponse_UnregisteredAccesscodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsBySiteIdResponse_UnregisteredAccesscodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsBySiteIdResponse_UnregisteredAccesscodeMultiError) AllErrors() []error { return m }

// GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError is the
// validation error returned by
// GetPatientsBySiteIdResponse_UnregisteredAccesscode.Validate if the
// designated constraints aren't met.
type GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError) ErrorName() string {
	return "GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsBySiteIdResponse_UnregisteredAccesscode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsBySiteIdResponse_UnregisteredAccesscodeValidationError{}

// Validate checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Diary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Diary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Diary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestResponse_DiaryMultiError, or nil if
// none found.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Diary) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Diary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for AnswerId

	// no validation rules for DiaryId

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestResponse_DiaryMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestResponse_DiaryMultiError is an error
// wrapping multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Diary.ValidateAll() if the
// designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_DiaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_DiaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_DiaryMultiError) AllErrors() []error {
	return m
}

// GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError is the
// validation error returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Diary.Validate if the
// designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequestResponse_Diary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestResponse_DiaryValidationError{}

// Validate checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestResponse_LessonsMultiError, or nil
// if none found.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError{
					field:  "Core",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError{
					field:  "Core",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError{
				field:  "Core",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetElective()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError{
					field:  "Elective",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError{
					field:  "Elective",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetElective()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError{
				field:  "Elective",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestResponse_LessonsMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestResponse_LessonsMultiError is an
// error wrapping multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons.ValidateAll() if
// the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_LessonsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_LessonsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_LessonsMultiError) AllErrors() []error {
	return m
}

// GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError is
// the validation error returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons.Validate if the
// designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequestResponse_Lessons.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestResponse_LessonsValidationError{}

// Validate checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Questionnaire with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Questionnaire) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Questionnaire with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireMultiError, or
// nil if none found.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Questionnaire) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Questionnaire) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AnswerCount

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireMultiError is
// an error wrapping multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Questionnaire.ValidateAll()
// if the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireMultiError) AllErrors() []error {
	return m
}

// GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError
// is the validation error returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Questionnaire.Validate if
// the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequestResponse_Questionnaire.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestResponse_QuestionnaireValidationError{}

// Validate checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNote with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNote) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNote with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteMultiError, or
// nil if none found.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNote) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNote) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Note

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteMultiError is an
// error wrapping multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNote.ValidateAll()
// if the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteMultiError) AllErrors() []error {
	return m
}

// GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError
// is the validation error returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNote.Validate if the
// designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequestResponse_MedicalNote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestResponse_MedicalNoteValidationError{}

// Validate checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestResponse_DataMultiError, or nil if
// none found.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	for idx, item := range m.GetDiaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
						field:  fmt.Sprintf("Diaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
						field:  fmt.Sprintf("Diaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
					field:  fmt.Sprintf("Diaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetLessons()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
					field:  "Lessons",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
					field:  "Lessons",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLessons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
				field:  "Lessons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuestionnaires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
					field:  "Questionnaires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
					field:  "Questionnaires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuestionnaires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
				field:  "Questionnaires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMedicalNotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
						field:  fmt.Sprintf("MedicalNotes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
						field:  fmt.Sprintf("MedicalNotes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{
					field:  fmt.Sprintf("MedicalNotes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestResponse_DataMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestResponse_DataMultiError is an error
// wrapping multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_DataMultiError) AllErrors() []error { return m }

// GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError is the
// validation error returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Data.Validate if the
// designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequestResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestResponse_DataValidationError{}

// Validate checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDates with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDates) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDates with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesMultiError, or
// nil if none found.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDates) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDates) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesMultiError is
// an error wrapping multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDates.ValidateAll()
// if the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesMultiError) AllErrors() []error {
	return m
}

// GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError
// is the validation error returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDates.Validate if
// the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestResponse_PeriodOfDatesValidationError{}

// Validate checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Core with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Core) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Core with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreMultiError, or
// nil if none found.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Core) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Core) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourseId

	// no validation rules for Progress

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreMultiError is an
// error wrapping multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Core.ValidateAll()
// if the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreMultiError) AllErrors() []error {
	return m
}

// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError
// is the validation error returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Core.Validate if
// the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Core.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_CoreValidationError{}

// Validate checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveMultiError,
// or nil if none found.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourseId

	// no validation rules for Count

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveMultiError
// is an error wrapping multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective.ValidateAll()
// if the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveMultiError) AllErrors() []error {
	return m
}

// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError
// is the validation error returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective.Validate
// if the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_ElectiveValidationError{}

// Validate checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_Lesson
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_Lesson) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_Lesson
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonMultiError,
// or nil if none found.
func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_Lesson) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_Lesson) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionName

	// no validation rules for SessionOrder

	// no validation rules for LessonName

	// no validation rules for LessonId

	// no validation rules for LessonOrder

	if len(errors) > 0 {
		return GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonMultiError(errors)
	}

	return nil
}

// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonMultiError
// is an error wrapping multiple validation errors returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_Lesson.ValidateAll()
// if the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonMultiError) AllErrors() []error {
	return m
}

// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError
// is the validation error returned by
// GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_Lesson.Validate
// if the designated constraints aren't met.
type GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError) ErrorName() string {
	return "GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_Lesson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientMedicalRecordsByUserIdRequestResponse_Lessons_Elective_LessonValidationError{}

// Validate checks the field values on GetDropoutPatientsResponse_Patient with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDropoutPatientsResponse_Patient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDropoutPatientsResponse_Patient
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDropoutPatientsResponse_PatientMultiError, or nil if none found.
func (m *GetDropoutPatientsResponse_Patient) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDropoutPatientsResponse_Patient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Accesscode

	// no validation rules for Email

	// no validation rules for NthDay

	// no validation rules for Status

	if len(errors) > 0 {
		return GetDropoutPatientsResponse_PatientMultiError(errors)
	}

	return nil
}

// GetDropoutPatientsResponse_PatientMultiError is an error wrapping multiple
// validation errors returned by
// GetDropoutPatientsResponse_Patient.ValidateAll() if the designated
// constraints aren't met.
type GetDropoutPatientsResponse_PatientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDropoutPatientsResponse_PatientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDropoutPatientsResponse_PatientMultiError) AllErrors() []error { return m }

// GetDropoutPatientsResponse_PatientValidationError is the validation error
// returned by GetDropoutPatientsResponse_Patient.Validate if the designated
// constraints aren't met.
type GetDropoutPatientsResponse_PatientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDropoutPatientsResponse_PatientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDropoutPatientsResponse_PatientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDropoutPatientsResponse_PatientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDropoutPatientsResponse_PatientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDropoutPatientsResponse_PatientValidationError) ErrorName() string {
	return "GetDropoutPatientsResponse_PatientValidationError"
}

// Error satisfies the builtin error interface
func (e GetDropoutPatientsResponse_PatientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDropoutPatientsResponse_Patient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDropoutPatientsResponse_PatientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDropoutPatientsResponse_PatientValidationError{}

// Validate checks the field values on GetPatientsResponse_Patient with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPatientsResponse_Patient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsResponse_Patient with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPatientsResponse_PatientMultiError, or nil if none found.
func (m *GetPatientsResponse_Patient) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsResponse_Patient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Accesscode

	// no validation rules for Email

	// no validation rules for Status

	// no validation rules for Days

	// no validation rules for Week

	// no validation rules for StartedAt

	// no validation rules for GroupId

	// no validation rules for SiteId

	if len(errors) > 0 {
		return GetPatientsResponse_PatientMultiError(errors)
	}

	return nil
}

// GetPatientsResponse_PatientMultiError is an error wrapping multiple
// validation errors returned by GetPatientsResponse_Patient.ValidateAll() if
// the designated constraints aren't met.
type GetPatientsResponse_PatientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsResponse_PatientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsResponse_PatientMultiError) AllErrors() []error { return m }

// GetPatientsResponse_PatientValidationError is the validation error returned
// by GetPatientsResponse_Patient.Validate if the designated constraints
// aren't met.
type GetPatientsResponse_PatientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsResponse_PatientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsResponse_PatientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsResponse_PatientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsResponse_PatientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsResponse_PatientValidationError) ErrorName() string {
	return "GetPatientsResponse_PatientValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsResponse_PatientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsResponse_Patient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsResponse_PatientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsResponse_PatientValidationError{}

// Validate checks the field values on GetPatientOverviewResponse_Visit with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPatientOverviewResponse_Visit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientOverviewResponse_Visit with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPatientOverviewResponse_VisitMultiError, or nil if none found.
func (m *GetPatientOverviewResponse_Visit) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientOverviewResponse_Visit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RemainingDays

	// no validation rules for Status

	// no validation rules for Note

	if len(errors) > 0 {
		return GetPatientOverviewResponse_VisitMultiError(errors)
	}

	return nil
}

// GetPatientOverviewResponse_VisitMultiError is an error wrapping multiple
// validation errors returned by
// GetPatientOverviewResponse_Visit.ValidateAll() if the designated
// constraints aren't met.
type GetPatientOverviewResponse_VisitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientOverviewResponse_VisitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientOverviewResponse_VisitMultiError) AllErrors() []error { return m }

// GetPatientOverviewResponse_VisitValidationError is the validation error
// returned by GetPatientOverviewResponse_Visit.Validate if the designated
// constraints aren't met.
type GetPatientOverviewResponse_VisitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientOverviewResponse_VisitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientOverviewResponse_VisitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientOverviewResponse_VisitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientOverviewResponse_VisitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientOverviewResponse_VisitValidationError) ErrorName() string {
	return "GetPatientOverviewResponse_VisitValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientOverviewResponse_VisitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientOverviewResponse_Visit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientOverviewResponse_VisitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientOverviewResponse_VisitValidationError{}

// Validate checks the field values on GetPatientOverviewResponse_Lesson with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPatientOverviewResponse_Lesson) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientOverviewResponse_Lesson
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPatientOverviewResponse_LessonMultiError, or nil if none found.
func (m *GetPatientOverviewResponse_Lesson) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientOverviewResponse_Lesson) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DoneCount

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return GetPatientOverviewResponse_LessonMultiError(errors)
	}

	return nil
}

// GetPatientOverviewResponse_LessonMultiError is an error wrapping multiple
// validation errors returned by
// GetPatientOverviewResponse_Lesson.ValidateAll() if the designated
// constraints aren't met.
type GetPatientOverviewResponse_LessonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientOverviewResponse_LessonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientOverviewResponse_LessonMultiError) AllErrors() []error { return m }

// GetPatientOverviewResponse_LessonValidationError is the validation error
// returned by GetPatientOverviewResponse_Lesson.Validate if the designated
// constraints aren't met.
type GetPatientOverviewResponse_LessonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientOverviewResponse_LessonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientOverviewResponse_LessonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientOverviewResponse_LessonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientOverviewResponse_LessonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientOverviewResponse_LessonValidationError) ErrorName() string {
	return "GetPatientOverviewResponse_LessonValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientOverviewResponse_LessonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientOverviewResponse_Lesson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientOverviewResponse_LessonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientOverviewResponse_LessonValidationError{}

// Validate checks the field values on GetPatientOverviewResponse_MedicalDoctor
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPatientOverviewResponse_MedicalDoctor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientOverviewResponse_MedicalDoctor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetPatientOverviewResponse_MedicalDoctorMultiError, or nil if none found.
func (m *GetPatientOverviewResponse_MedicalDoctor) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientOverviewResponse_MedicalDoctor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return GetPatientOverviewResponse_MedicalDoctorMultiError(errors)
	}

	return nil
}

// GetPatientOverviewResponse_MedicalDoctorMultiError is an error wrapping
// multiple validation errors returned by
// GetPatientOverviewResponse_MedicalDoctor.ValidateAll() if the designated
// constraints aren't met.
type GetPatientOverviewResponse_MedicalDoctorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientOverviewResponse_MedicalDoctorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientOverviewResponse_MedicalDoctorMultiError) AllErrors() []error { return m }

// GetPatientOverviewResponse_MedicalDoctorValidationError is the validation
// error returned by GetPatientOverviewResponse_MedicalDoctor.Validate if the
// designated constraints aren't met.
type GetPatientOverviewResponse_MedicalDoctorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientOverviewResponse_MedicalDoctorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientOverviewResponse_MedicalDoctorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientOverviewResponse_MedicalDoctorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientOverviewResponse_MedicalDoctorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientOverviewResponse_MedicalDoctorValidationError) ErrorName() string {
	return "GetPatientOverviewResponse_MedicalDoctorValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientOverviewResponse_MedicalDoctorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientOverviewResponse_MedicalDoctor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientOverviewResponse_MedicalDoctorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientOverviewResponse_MedicalDoctorValidationError{}

// Validate checks the field values on GetPatientOverviewResponse_StatusNote
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPatientOverviewResponse_StatusNote) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientOverviewResponse_StatusNote
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPatientOverviewResponse_StatusNoteMultiError, or nil if none found.
func (m *GetPatientOverviewResponse_StatusNote) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientOverviewResponse_StatusNote) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Note

	if len(errors) > 0 {
		return GetPatientOverviewResponse_StatusNoteMultiError(errors)
	}

	return nil
}

// GetPatientOverviewResponse_StatusNoteMultiError is an error wrapping
// multiple validation errors returned by
// GetPatientOverviewResponse_StatusNote.ValidateAll() if the designated
// constraints aren't met.
type GetPatientOverviewResponse_StatusNoteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientOverviewResponse_StatusNoteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientOverviewResponse_StatusNoteMultiError) AllErrors() []error { return m }

// GetPatientOverviewResponse_StatusNoteValidationError is the validation error
// returned by GetPatientOverviewResponse_StatusNote.Validate if the
// designated constraints aren't met.
type GetPatientOverviewResponse_StatusNoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientOverviewResponse_StatusNoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientOverviewResponse_StatusNoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientOverviewResponse_StatusNoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientOverviewResponse_StatusNoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientOverviewResponse_StatusNoteValidationError) ErrorName() string {
	return "GetPatientOverviewResponse_StatusNoteValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientOverviewResponse_StatusNoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientOverviewResponse_StatusNote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientOverviewResponse_StatusNoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientOverviewResponse_StatusNoteValidationError{}

// Validate checks the field values on
// GetPatientClinicalRecordsByUserIdResponse_Data with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPatientClinicalRecordsByUserIdResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPatientClinicalRecordsByUserIdResponse_Data with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetPatientClinicalRecordsByUserIdResponse_DataMultiError, or nil if none found.
func (m *GetPatientClinicalRecordsByUserIdResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientClinicalRecordsByUserIdResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for Nth

	// no validation rules for Week

	// no validation rules for Access

	// no validation rules for UserDiaryCount

	// no validation rules for Note

	if len(errors) > 0 {
		return GetPatientClinicalRecordsByUserIdResponse_DataMultiError(errors)
	}

	return nil
}

// GetPatientClinicalRecordsByUserIdResponse_DataMultiError is an error
// wrapping multiple validation errors returned by
// GetPatientClinicalRecordsByUserIdResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type GetPatientClinicalRecordsByUserIdResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientClinicalRecordsByUserIdResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientClinicalRecordsByUserIdResponse_DataMultiError) AllErrors() []error { return m }

// GetPatientClinicalRecordsByUserIdResponse_DataValidationError is the
// validation error returned by
// GetPatientClinicalRecordsByUserIdResponse_Data.Validate if the designated
// constraints aren't met.
type GetPatientClinicalRecordsByUserIdResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientClinicalRecordsByUserIdResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientClinicalRecordsByUserIdResponse_DataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPatientClinicalRecordsByUserIdResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientClinicalRecordsByUserIdResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientClinicalRecordsByUserIdResponse_DataValidationError) ErrorName() string {
	return "GetPatientClinicalRecordsByUserIdResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientClinicalRecordsByUserIdResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientClinicalRecordsByUserIdResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientClinicalRecordsByUserIdResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientClinicalRecordsByUserIdResponse_DataValidationError{}

// Validate checks the field values on GetPatientsByVisitIdResponse_User with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPatientsByVisitIdResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPatientsByVisitIdResponse_User
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPatientsByVisitIdResponse_UserMultiError, or nil if none found.
func (m *GetPatientsByVisitIdResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPatientsByVisitIdResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Accesscode

	// no validation rules for Email

	// no validation rules for CreatedAt

	// no validation rules for UserStatus

	// no validation rules for GroupId

	// no validation rules for NthDay

	// no validation rules for VisitAt

	// no validation rules for VisitStatus

	// no validation rules for VisitNote

	if len(errors) > 0 {
		return GetPatientsByVisitIdResponse_UserMultiError(errors)
	}

	return nil
}

// GetPatientsByVisitIdResponse_UserMultiError is an error wrapping multiple
// validation errors returned by
// GetPatientsByVisitIdResponse_User.ValidateAll() if the designated
// constraints aren't met.
type GetPatientsByVisitIdResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPatientsByVisitIdResponse_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPatientsByVisitIdResponse_UserMultiError) AllErrors() []error { return m }

// GetPatientsByVisitIdResponse_UserValidationError is the validation error
// returned by GetPatientsByVisitIdResponse_User.Validate if the designated
// constraints aren't met.
type GetPatientsByVisitIdResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPatientsByVisitIdResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPatientsByVisitIdResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPatientsByVisitIdResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPatientsByVisitIdResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPatientsByVisitIdResponse_UserValidationError) ErrorName() string {
	return "GetPatientsByVisitIdResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e GetPatientsByVisitIdResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPatientsByVisitIdResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPatientsByVisitIdResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPatientsByVisitIdResponse_UserValidationError{}
