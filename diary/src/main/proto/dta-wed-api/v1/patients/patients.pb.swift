// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dta-wed-api/v1/patients/patients.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountID: Int32 = 0

  public var accesscode: String = String()

  public var email: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var patients: [Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse.Patient] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Patient {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var userID: Int32 = 0

    public var accesscode: String = String()

    public var email: String = String()

    public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_createdAt = newValue}
    }
    /// Returns true if `createdAt` has been explicitly set.
    public var hasCreatedAt: Bool {return self._createdAt != nil}
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    public mutating func clearCreatedAt() {self._createdAt = nil}

    public var status: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientByUserIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var accesscode: String = String()

  public var email: String = String()

  public var createdAt: Int32 = 0

  public var status: Int32 = 0

  public var schedule: Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.Schedule {
    get {return _schedule ?? Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.Schedule()}
    set {_schedule = newValue}
  }
  /// Returns true if `schedule` has been explicitly set.
  public var hasSchedule: Bool {return self._schedule != nil}
  /// Clears the value of `schedule`. Subsequent reads from it will return its default value.
  public mutating func clearSchedule() {self._schedule = nil}

  public var medicalDoctor: Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.MedicalDoctor {
    get {return _medicalDoctor ?? Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.MedicalDoctor()}
    set {_medicalDoctor = newValue}
  }
  /// Returns true if `medicalDoctor` has been explicitly set.
  public var hasMedicalDoctor: Bool {return self._medicalDoctor != nil}
  /// Clears the value of `medicalDoctor`. Subsequent reads from it will return its default value.
  public mutating func clearMedicalDoctor() {self._medicalDoctor = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Schedule {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var startAt: Int32 = 0

    public var endAt: Int32 = 0

    public var userDay: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct MedicalDoctor {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var accountID: Int32 = 0

    public var name: String = String()

    public var email: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _schedule: Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.Schedule? = nil
  fileprivate var _medicalDoctor: Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.MedicalDoctor? = nil
}

public struct Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var siteID: Int32 = 0

  public var accesscode: String = String()

  public var email: String = String()

  public var limit: Int32 = 0

  public var page: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unregistered: [Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.UnregisteredAccesscode] = []

  public var patients: [Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.Patient] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Patient {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var userID: Int32 = 0

    public var accesscode: String = String()

    public var email: String = String()

    public var createdAt: Int32 = 0

    public var status: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct UnregisteredAccesscode {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var accesscode: String = String()

    public var email: String = String()

    public var accesscodeCreatedAt: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var startDate: Int64 = 0

  public var endDate: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_DiaryItemAnswers {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var itemID: Int32 = 0

  public var itemAnswers: [Dta_Wed_Api_V1_Patients_DiaryItemAnswer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_DiaryItemAnswer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var itemAnswerID: Int32 = 0

  public var itemAnswerText: String = String()

  public var itemAnswerData: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _itemAnswerData ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_itemAnswerData = newValue}
  }
  /// Returns true if `itemAnswerData` has been explicitly set.
  public var hasItemAnswerData: Bool {return self._itemAnswerData != nil}
  /// Clears the value of `itemAnswerData`. Subsequent reads from it will return its default value.
  public mutating func clearItemAnswerData() {self._itemAnswerData = nil}

  public var optionID: Int32 = 0

  public var optionTitle: String = String()

  public var optionDescription: String = String()

  public var optionData: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _optionData ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_optionData = newValue}
  }
  /// Returns true if `optionData` has been explicitly set.
  public var hasOptionData: Bool {return self._optionData != nil}
  /// Clears the value of `optionData`. Subsequent reads from it will return its default value.
  public mutating func clearOptionData() {self._optionData = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _itemAnswerData: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _optionData: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

public struct Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var periodOfDates: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.PeriodOfDates {
    get {return _periodOfDates ?? Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.PeriodOfDates()}
    set {_periodOfDates = newValue}
  }
  /// Returns true if `periodOfDates` has been explicitly set.
  public var hasPeriodOfDates: Bool {return self._periodOfDates != nil}
  /// Clears the value of `periodOfDates`. Subsequent reads from it will return its default value.
  public mutating func clearPeriodOfDates() {self._periodOfDates = nil}

  public var data: [Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.DataMessage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Diary {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var date: Int32 = 0

    public var answerID: Int32 = 0

    public var diaryID: Int32 = 0

    public var items: [Dta_Wed_Api_V1_Patients_DiaryItemAnswers] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Lessons {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var core: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Core {
      get {return _core ?? Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Core()}
      set {_core = newValue}
    }
    /// Returns true if `core` has been explicitly set.
    public var hasCore: Bool {return self._core != nil}
    /// Clears the value of `core`. Subsequent reads from it will return its default value.
    public mutating func clearCore() {self._core = nil}

    public var elective: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective {
      get {return _elective ?? Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective()}
      set {_elective = newValue}
    }
    /// Returns true if `elective` has been explicitly set.
    public var hasElective: Bool {return self._elective != nil}
    /// Clears the value of `elective`. Subsequent reads from it will return its default value.
    public mutating func clearElective() {self._elective = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Core {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var courseID: Int32 = 0

      public var progress: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct Elective {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var courseID: Int32 = 0

      public var count: Int32 = 0

      public var data: [Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective.Lesson] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Lesson {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var sessionName: String = String()

        public var sessionOrder: Int32 = 0

        public var lessonName: String = String()

        public var lessonID: Int32 = 0

        public var lessonOrder: Int32 = 0

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}
    }

    public init() {}

    fileprivate var _core: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Core? = nil
    fileprivate var _elective: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective? = nil
  }

  public struct Questionnaire {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var answerCount: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct MedicalNote {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: Int32 = 0

    public var note: String = String()

    public var createdAt: Int32 = 0

    public var updatedAt: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct DataMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var date: Int32 = 0

    public var diaries: [Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Diary] = []

    public var lessons: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons {
      get {return _lessons ?? Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons()}
      set {_lessons = newValue}
    }
    /// Returns true if `lessons` has been explicitly set.
    public var hasLessons: Bool {return self._lessons != nil}
    /// Clears the value of `lessons`. Subsequent reads from it will return its default value.
    public mutating func clearLessons() {self._lessons = nil}

    public var questionnaires: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Questionnaire {
      get {return _questionnaires ?? Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Questionnaire()}
      set {_questionnaires = newValue}
    }
    /// Returns true if `questionnaires` has been explicitly set.
    public var hasQuestionnaires: Bool {return self._questionnaires != nil}
    /// Clears the value of `questionnaires`. Subsequent reads from it will return its default value.
    public mutating func clearQuestionnaires() {self._questionnaires = nil}

    public var medicalNotes: [Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.MedicalNote] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _lessons: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons? = nil
    fileprivate var _questionnaires: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Questionnaire? = nil
  }

  public struct PeriodOfDates {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var start: Int32 = 0

    public var end: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _periodOfDates: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.PeriodOfDates? = nil
}

public struct Dta_Wed_Api_V1_Patients_GetDropoutPatientsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var siteID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Int32 = 0

  public var data: [Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse.Patient] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Patient {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var userID: Int32 = 0

    public var accesscode: String = String()

    public var email: String = String()

    public var nthDay: Int32 = 0

    public var status: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var limit: Int32 = 0

  public var page: Int32 = 0

  public var sortBy: String = String()

  public var asc: String = String()

  public var siteID: Int32 = 0

  public var accesscode: String = String()

  public var email: String = String()

  public var status: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var totalCount: Int32 = 0

  public var page: Int32 = 0

  public var count: Int32 = 0

  public var patients: [Dta_Wed_Api_V1_Patients_GetPatientsResponse.Patient] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Patient {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var userID: Int32 = 0

    public var accesscode: String = String()

    public var email: String = String()

    public var status: Int32 = 0

    public var days: Int32 = 0

    public var week: Int32 = 0

    public var startedAt: Int32 = 0

    public var groupID: Int32 = 0

    public var siteID: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientOverviewRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var accesscode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accesscode: String {
    get {return _storage._accesscode}
    set {_uniqueStorage()._accesscode = newValue}
  }

  public var userID: Int32 {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  public var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  public var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var groupID: Int32 {
    get {return _storage._groupID}
    set {_uniqueStorage()._groupID = newValue}
  }

  public var siteID: Int32 {
    get {return _storage._siteID}
    set {_uniqueStorage()._siteID = newValue}
  }

  public var startedAt: Int32 {
    get {return _storage._startedAt}
    set {_uniqueStorage()._startedAt = newValue}
  }

  public var nthDay: Int32 {
    get {return _storage._nthDay}
    set {_uniqueStorage()._nthDay = newValue}
  }

  public var appAccessDays: Int32 {
    get {return _storage._appAccessDays}
    set {_uniqueStorage()._appAccessDays = newValue}
  }

  public var diaryDoneCount: Int32 {
    get {return _storage._diaryDoneCount}
    set {_uniqueStorage()._diaryDoneCount = newValue}
  }

  public var visits: [Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Visit] {
    get {return _storage._visits}
    set {_uniqueStorage()._visits = newValue}
  }

  public var statusNote: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.StatusNote {
    get {return _storage._statusNote ?? Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.StatusNote()}
    set {_uniqueStorage()._statusNote = newValue}
  }
  /// Returns true if `statusNote` has been explicitly set.
  public var hasStatusNote: Bool {return _storage._statusNote != nil}
  /// Clears the value of `statusNote`. Subsequent reads from it will return its default value.
  public mutating func clearStatusNote() {_uniqueStorage()._statusNote = nil}

  public var lessons: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Lesson {
    get {return _storage._lessons ?? Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Lesson()}
    set {_uniqueStorage()._lessons = newValue}
  }
  /// Returns true if `lessons` has been explicitly set.
  public var hasLessons: Bool {return _storage._lessons != nil}
  /// Clears the value of `lessons`. Subsequent reads from it will return its default value.
  public mutating func clearLessons() {_uniqueStorage()._lessons = nil}

  public var medicalDoctor: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.MedicalDoctor {
    get {return _storage._medicalDoctor ?? Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.MedicalDoctor()}
    set {_uniqueStorage()._medicalDoctor = newValue}
  }
  /// Returns true if `medicalDoctor` has been explicitly set.
  public var hasMedicalDoctor: Bool {return _storage._medicalDoctor != nil}
  /// Clears the value of `medicalDoctor`. Subsequent reads from it will return its default value.
  public mutating func clearMedicalDoctor() {_uniqueStorage()._medicalDoctor = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Visit {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: Int32 = 0

    public var remainingDays: Int32 = 0

    public var status: Int32 = 0

    public var note: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Lesson {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var doneCount: Int32 = 0

    public var totalCount: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct MedicalDoctor {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var accountID: Int32 = 0

    public var name: String = String()

    public var email: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct StatusNote {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: Int32 = 0

    public var note: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Int32 = 0

  public var data: [Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse.DataMessage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var date: String = String()

    public var nth: Int32 = 0

    public var week: Int32 = 0

    public var access: Bool = false

    public var userDiaryCount: Int32 = 0

    public var note: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_DisablePatientByUserIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var status: Int32 = 0

  public var note: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var visitID: Int32 = 0

  public var siteID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Int32 = 0

  public var users: [Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse.User] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct User {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var userID: Int32 = 0

    public var accesscode: String = String()

    public var email: String = String()

    public var createdAt: Int32 = 0

    public var userStatus: Int32 = 0

    public var groupID: Int32 = 0

    public var nthDay: Int32 = 0

    public var visitAt: Int32 = 0

    public var visitStatus: Int32 = 0

    public var visitNote: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse.Patient: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientByUserIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.Schedule: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.MedicalDoctor: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.Patient: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.UnregisteredAccesscode: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_DiaryItemAnswers: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_DiaryItemAnswer: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Diary: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Core: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective.Lesson: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Questionnaire: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.MedicalNote: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.DataMessage: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.PeriodOfDates: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetDropoutPatientsRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse.Patient: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsResponse.Patient: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientOverviewRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Visit: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Lesson: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.MedicalDoctor: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.StatusNote: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse.DataMessage: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_DisablePatientByUserIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse.User: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dta.wed.api.v1.patients"

extension Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientsByAccountIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accountId"),
    2: .same(proto: "accesscode"),
    3: .same(proto: "email"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.accountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.accountID != 0 {
      try visitor.visitSingularInt32Field(value: self.accountID, fieldNumber: 1)
    }
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdRequest, rhs: Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientsByAccountIdResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "patients"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.patients) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.patients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.patients, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse, rhs: Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse) -> Bool {
    if lhs.patients != rhs.patients {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse.Patient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse.protoMessageName + ".Patient"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "accesscode"),
    3: .same(proto: "email"),
    4: .same(proto: "createdAt"),
    5: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse.Patient, rhs: Dta_Wed_Api_V1_Patients_GetPatientsByAccountIdResponse.Patient) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientByUserIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientByUserIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientByUserIdRequest, rhs: Dta_Wed_Api_V1_Patients_GetPatientByUserIdRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientByUserIdResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "accesscode"),
    3: .same(proto: "email"),
    4: .same(proto: "createdAt"),
    5: .same(proto: "status"),
    6: .same(proto: "schedule"),
    7: .same(proto: "medicalDoctor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.createdAt) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._schedule) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._medicalDoctor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt32Field(value: self.createdAt, fieldNumber: 4)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 5)
    }
    try { if let v = self._schedule {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._medicalDoctor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse, rhs: Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.status != rhs.status {return false}
    if lhs._schedule != rhs._schedule {return false}
    if lhs._medicalDoctor != rhs._medicalDoctor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.Schedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.protoMessageName + ".Schedule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "startAt"),
    2: .same(proto: "endAt"),
    3: .same(proto: "userDay"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.startAt) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.endAt) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.userDay) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startAt != 0 {
      try visitor.visitSingularInt32Field(value: self.startAt, fieldNumber: 1)
    }
    if self.endAt != 0 {
      try visitor.visitSingularInt32Field(value: self.endAt, fieldNumber: 2)
    }
    if self.userDay != 0 {
      try visitor.visitSingularInt32Field(value: self.userDay, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.Schedule, rhs: Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.Schedule) -> Bool {
    if lhs.startAt != rhs.startAt {return false}
    if lhs.endAt != rhs.endAt {return false}
    if lhs.userDay != rhs.userDay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.MedicalDoctor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.protoMessageName + ".MedicalDoctor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accountId"),
    2: .same(proto: "name"),
    3: .same(proto: "email"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.accountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.accountID != 0 {
      try visitor.visitSingularInt32Field(value: self.accountID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.MedicalDoctor, rhs: Dta_Wed_Api_V1_Patients_GetPatientByUserIdResponse.MedicalDoctor) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.email != rhs.email {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientsBySiteIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "siteId"),
    2: .same(proto: "accesscode"),
    3: .same(proto: "email"),
    4: .same(proto: "limit"),
    5: .same(proto: "page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.siteID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.limit) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.siteID != 0 {
      try visitor.visitSingularInt32Field(value: self.siteID, fieldNumber: 1)
    }
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 4)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdRequest, rhs: Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdRequest) -> Bool {
    if lhs.siteID != rhs.siteID {return false}
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.page != rhs.page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientsBySiteIdResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unregistered"),
    2: .same(proto: "patients"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.unregistered) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.patients) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.unregistered.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unregistered, fieldNumber: 1)
    }
    if !self.patients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.patients, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse, rhs: Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse) -> Bool {
    if lhs.unregistered != rhs.unregistered {return false}
    if lhs.patients != rhs.patients {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.Patient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.protoMessageName + ".Patient"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "accesscode"),
    3: .same(proto: "email"),
    4: .same(proto: "createdAt"),
    5: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.createdAt) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt32Field(value: self.createdAt, fieldNumber: 4)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.Patient, rhs: Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.Patient) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.UnregisteredAccesscode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.protoMessageName + ".UnregisteredAccesscode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accesscode"),
    2: .same(proto: "email"),
    3: .same(proto: "accesscodeCreatedAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.accesscodeCreatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if self.accesscodeCreatedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.accesscodeCreatedAt, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.UnregisteredAccesscode, rhs: Dta_Wed_Api_V1_Patients_GetPatientsBySiteIdResponse.UnregisteredAccesscode) -> Bool {
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.accesscodeCreatedAt != rhs.accesscodeCreatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientMedicalRecordsByUserIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "startDate"),
    3: .same(proto: "endDate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.startDate) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.endDate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if self.startDate != 0 {
      try visitor.visitSingularInt64Field(value: self.startDate, fieldNumber: 2)
    }
    if self.endDate != 0 {
      try visitor.visitSingularInt64Field(value: self.endDate, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequest, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.startDate != rhs.startDate {return false}
    if lhs.endDate != rhs.endDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_DiaryItemAnswers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DiaryItemAnswers"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "itemId"),
    2: .same(proto: "itemAnswers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.itemID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.itemAnswers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.itemID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemID, fieldNumber: 1)
    }
    if !self.itemAnswers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.itemAnswers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_DiaryItemAnswers, rhs: Dta_Wed_Api_V1_Patients_DiaryItemAnswers) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.itemAnswers != rhs.itemAnswers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_DiaryItemAnswer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DiaryItemAnswer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "itemAnswerId"),
    2: .same(proto: "itemAnswerText"),
    3: .same(proto: "itemAnswerData"),
    4: .same(proto: "optionId"),
    5: .same(proto: "optionTitle"),
    6: .same(proto: "optionDescription"),
    7: .same(proto: "optionData"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.itemAnswerID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.itemAnswerText) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._itemAnswerData) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.optionID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.optionTitle) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.optionDescription) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._optionData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.itemAnswerID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemAnswerID, fieldNumber: 1)
    }
    if !self.itemAnswerText.isEmpty {
      try visitor.visitSingularStringField(value: self.itemAnswerText, fieldNumber: 2)
    }
    try { if let v = self._itemAnswerData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.optionID != 0 {
      try visitor.visitSingularInt32Field(value: self.optionID, fieldNumber: 4)
    }
    if !self.optionTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.optionTitle, fieldNumber: 5)
    }
    if !self.optionDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.optionDescription, fieldNumber: 6)
    }
    try { if let v = self._optionData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_DiaryItemAnswer, rhs: Dta_Wed_Api_V1_Patients_DiaryItemAnswer) -> Bool {
    if lhs.itemAnswerID != rhs.itemAnswerID {return false}
    if lhs.itemAnswerText != rhs.itemAnswerText {return false}
    if lhs._itemAnswerData != rhs._itemAnswerData {return false}
    if lhs.optionID != rhs.optionID {return false}
    if lhs.optionTitle != rhs.optionTitle {return false}
    if lhs.optionDescription != rhs.optionDescription {return false}
    if lhs._optionData != rhs._optionData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientMedicalRecordsByUserIdRequestResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "periodOfDates"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._periodOfDates) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._periodOfDates {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse) -> Bool {
    if lhs._periodOfDates != rhs._periodOfDates {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Diary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.protoMessageName + ".Diary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "answerId"),
    3: .same(proto: "diaryId"),
    4: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.date) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.answerID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.diaryID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.date != 0 {
      try visitor.visitSingularInt32Field(value: self.date, fieldNumber: 1)
    }
    if self.answerID != 0 {
      try visitor.visitSingularInt32Field(value: self.answerID, fieldNumber: 2)
    }
    if self.diaryID != 0 {
      try visitor.visitSingularInt32Field(value: self.diaryID, fieldNumber: 3)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Diary, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Diary) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.answerID != rhs.answerID {return false}
    if lhs.diaryID != rhs.diaryID {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.protoMessageName + ".Lessons"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "core"),
    2: .same(proto: "elective"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._core) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._elective) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._core {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._elective {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons) -> Bool {
    if lhs._core != rhs._core {return false}
    if lhs._elective != rhs._elective {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Core: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.protoMessageName + ".Core"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "progress"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.courseID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.progress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt32Field(value: self.courseID, fieldNumber: 1)
    }
    if !self.progress.isEmpty {
      try visitor.visitSingularStringField(value: self.progress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Core, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Core) -> Bool {
    if lhs.courseID != rhs.courseID {return false}
    if lhs.progress != rhs.progress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.protoMessageName + ".Elective"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "count"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.courseID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt32Field(value: self.courseID, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective) -> Bool {
    if lhs.courseID != rhs.courseID {return false}
    if lhs.count != rhs.count {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective.Lesson: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective.protoMessageName + ".Lesson"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sessionName"),
    2: .same(proto: "sessionOrder"),
    3: .same(proto: "lessonName"),
    4: .same(proto: "lessonId"),
    5: .same(proto: "lessonOrder"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionName) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.sessionOrder) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lessonName) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.lessonID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.lessonOrder) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionName.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionName, fieldNumber: 1)
    }
    if self.sessionOrder != 0 {
      try visitor.visitSingularInt32Field(value: self.sessionOrder, fieldNumber: 2)
    }
    if !self.lessonName.isEmpty {
      try visitor.visitSingularStringField(value: self.lessonName, fieldNumber: 3)
    }
    if self.lessonID != 0 {
      try visitor.visitSingularInt32Field(value: self.lessonID, fieldNumber: 4)
    }
    if self.lessonOrder != 0 {
      try visitor.visitSingularInt32Field(value: self.lessonOrder, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective.Lesson, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Lessons.Elective.Lesson) -> Bool {
    if lhs.sessionName != rhs.sessionName {return false}
    if lhs.sessionOrder != rhs.sessionOrder {return false}
    if lhs.lessonName != rhs.lessonName {return false}
    if lhs.lessonID != rhs.lessonID {return false}
    if lhs.lessonOrder != rhs.lessonOrder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Questionnaire: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.protoMessageName + ".Questionnaire"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "answerCount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.answerCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.answerCount != 0 {
      try visitor.visitSingularInt32Field(value: self.answerCount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Questionnaire, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.Questionnaire) -> Bool {
    if lhs.answerCount != rhs.answerCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.MedicalNote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.protoMessageName + ".MedicalNote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "note"),
    3: .same(proto: "createdAt"),
    4: .same(proto: "updatedAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.note) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.createdAt) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.updatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.note.isEmpty {
      try visitor.visitSingularStringField(value: self.note, fieldNumber: 2)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt32Field(value: self.createdAt, fieldNumber: 3)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.updatedAt, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.MedicalNote, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.MedicalNote) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.note != rhs.note {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "diaries"),
    3: .same(proto: "lessons"),
    4: .same(proto: "questionnaires"),
    5: .same(proto: "medicalNotes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.date) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.diaries) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._lessons) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._questionnaires) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.medicalNotes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.date != 0 {
      try visitor.visitSingularInt32Field(value: self.date, fieldNumber: 1)
    }
    if !self.diaries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.diaries, fieldNumber: 2)
    }
    try { if let v = self._lessons {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._questionnaires {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.medicalNotes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.medicalNotes, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.DataMessage, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.DataMessage) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.diaries != rhs.diaries {return false}
    if lhs._lessons != rhs._lessons {return false}
    if lhs._questionnaires != rhs._questionnaires {return false}
    if lhs.medicalNotes != rhs.medicalNotes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.PeriodOfDates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.protoMessageName + ".PeriodOfDates"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.start) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.end) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.start != 0 {
      try visitor.visitSingularInt32Field(value: self.start, fieldNumber: 1)
    }
    if self.end != 0 {
      try visitor.visitSingularInt32Field(value: self.end, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.PeriodOfDates, rhs: Dta_Wed_Api_V1_Patients_GetPatientMedicalRecordsByUserIdRequestResponse.PeriodOfDates) -> Bool {
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetDropoutPatientsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDropoutPatientsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "siteId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.siteID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.siteID != 0 {
      try visitor.visitSingularInt32Field(value: self.siteID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetDropoutPatientsRequest, rhs: Dta_Wed_Api_V1_Patients_GetDropoutPatientsRequest) -> Bool {
    if lhs.siteID != rhs.siteID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDropoutPatientsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse, rhs: Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse.Patient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse.protoMessageName + ".Patient"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "accesscode"),
    3: .same(proto: "email"),
    4: .same(proto: "nthDay"),
    5: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.nthDay) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if self.nthDay != 0 {
      try visitor.visitSingularInt32Field(value: self.nthDay, fieldNumber: 4)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse.Patient, rhs: Dta_Wed_Api_V1_Patients_GetDropoutPatientsResponse.Patient) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.nthDay != rhs.nthDay {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "limit"),
    2: .same(proto: "page"),
    3: .same(proto: "sortBy"),
    4: .same(proto: "asc"),
    5: .same(proto: "siteId"),
    6: .same(proto: "accesscode"),
    7: .same(proto: "email"),
    8: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.limit) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sortBy) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.asc) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.siteID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 2)
    }
    if !self.sortBy.isEmpty {
      try visitor.visitSingularStringField(value: self.sortBy, fieldNumber: 3)
    }
    if !self.asc.isEmpty {
      try visitor.visitSingularStringField(value: self.asc, fieldNumber: 4)
    }
    if self.siteID != 0 {
      try visitor.visitSingularInt32Field(value: self.siteID, fieldNumber: 5)
    }
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 6)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 7)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsRequest, rhs: Dta_Wed_Api_V1_Patients_GetPatientsRequest) -> Bool {
    if lhs.limit != rhs.limit {return false}
    if lhs.page != rhs.page {return false}
    if lhs.sortBy != rhs.sortBy {return false}
    if lhs.asc != rhs.asc {return false}
    if lhs.siteID != rhs.siteID {return false}
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "totalCount"),
    2: .same(proto: "page"),
    3: .same(proto: "count"),
    4: .same(proto: "patients"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.patients) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalCount, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 3)
    }
    if !self.patients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.patients, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsResponse, rhs: Dta_Wed_Api_V1_Patients_GetPatientsResponse) -> Bool {
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.page != rhs.page {return false}
    if lhs.count != rhs.count {return false}
    if lhs.patients != rhs.patients {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsResponse.Patient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientsResponse.protoMessageName + ".Patient"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "accesscode"),
    3: .same(proto: "email"),
    4: .same(proto: "status"),
    5: .same(proto: "days"),
    6: .same(proto: "week"),
    7: .same(proto: "startedAt"),
    8: .same(proto: "groupId"),
    9: .same(proto: "siteId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.days) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.week) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.startedAt) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.groupID) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.siteID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 4)
    }
    if self.days != 0 {
      try visitor.visitSingularInt32Field(value: self.days, fieldNumber: 5)
    }
    if self.week != 0 {
      try visitor.visitSingularInt32Field(value: self.week, fieldNumber: 6)
    }
    if self.startedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.startedAt, fieldNumber: 7)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt32Field(value: self.groupID, fieldNumber: 8)
    }
    if self.siteID != 0 {
      try visitor.visitSingularInt32Field(value: self.siteID, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsResponse.Patient, rhs: Dta_Wed_Api_V1_Patients_GetPatientsResponse.Patient) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.status != rhs.status {return false}
    if lhs.days != rhs.days {return false}
    if lhs.week != rhs.week {return false}
    if lhs.startedAt != rhs.startedAt {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.siteID != rhs.siteID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientOverviewRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientOverviewRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "accesscode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewRequest, rhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientOverviewResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accesscode"),
    2: .same(proto: "userId"),
    3: .same(proto: "email"),
    4: .same(proto: "status"),
    5: .same(proto: "groupId"),
    6: .same(proto: "siteId"),
    7: .same(proto: "startedAt"),
    9: .same(proto: "nthDay"),
    10: .same(proto: "appAccessDays"),
    11: .same(proto: "diaryDoneCount"),
    12: .same(proto: "visits"),
    13: .same(proto: "statusNote"),
    14: .same(proto: "lessons"),
    15: .same(proto: "medicalDoctor"),
  ]

  fileprivate class _StorageClass {
    var _accesscode: String = String()
    var _userID: Int32 = 0
    var _email: String = String()
    var _status: Int32 = 0
    var _groupID: Int32 = 0
    var _siteID: Int32 = 0
    var _startedAt: Int32 = 0
    var _nthDay: Int32 = 0
    var _appAccessDays: Int32 = 0
    var _diaryDoneCount: Int32 = 0
    var _visits: [Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Visit] = []
    var _statusNote: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.StatusNote? = nil
    var _lessons: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Lesson? = nil
    var _medicalDoctor: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.MedicalDoctor? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accesscode = source._accesscode
      _userID = source._userID
      _email = source._email
      _status = source._status
      _groupID = source._groupID
      _siteID = source._siteID
      _startedAt = source._startedAt
      _nthDay = source._nthDay
      _appAccessDays = source._appAccessDays
      _diaryDoneCount = source._diaryDoneCount
      _visits = source._visits
      _statusNote = source._statusNote
      _lessons = source._lessons
      _medicalDoctor = source._medicalDoctor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._accesscode) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._userID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._email) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._status) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._groupID) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._siteID) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._startedAt) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._nthDay) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._appAccessDays) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._diaryDoneCount) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._visits) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._statusNote) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._lessons) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._medicalDoctor) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._accesscode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accesscode, fieldNumber: 1)
      }
      if _storage._userID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._userID, fieldNumber: 2)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 3)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 4)
      }
      if _storage._groupID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._groupID, fieldNumber: 5)
      }
      if _storage._siteID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._siteID, fieldNumber: 6)
      }
      if _storage._startedAt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._startedAt, fieldNumber: 7)
      }
      if _storage._nthDay != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nthDay, fieldNumber: 9)
      }
      if _storage._appAccessDays != 0 {
        try visitor.visitSingularInt32Field(value: _storage._appAccessDays, fieldNumber: 10)
      }
      if _storage._diaryDoneCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._diaryDoneCount, fieldNumber: 11)
      }
      if !_storage._visits.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._visits, fieldNumber: 12)
      }
      try { if let v = _storage._statusNote {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._lessons {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._medicalDoctor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse, rhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accesscode != rhs_storage._accesscode {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._siteID != rhs_storage._siteID {return false}
        if _storage._startedAt != rhs_storage._startedAt {return false}
        if _storage._nthDay != rhs_storage._nthDay {return false}
        if _storage._appAccessDays != rhs_storage._appAccessDays {return false}
        if _storage._diaryDoneCount != rhs_storage._diaryDoneCount {return false}
        if _storage._visits != rhs_storage._visits {return false}
        if _storage._statusNote != rhs_storage._statusNote {return false}
        if _storage._lessons != rhs_storage._lessons {return false}
        if _storage._medicalDoctor != rhs_storage._medicalDoctor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Visit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.protoMessageName + ".Visit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "remainingDays"),
    3: .same(proto: "status"),
    4: .same(proto: "note"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.remainingDays) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.note) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.remainingDays != 0 {
      try visitor.visitSingularInt32Field(value: self.remainingDays, fieldNumber: 2)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 3)
    }
    if !self.note.isEmpty {
      try visitor.visitSingularStringField(value: self.note, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Visit, rhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Visit) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.remainingDays != rhs.remainingDays {return false}
    if lhs.status != rhs.status {return false}
    if lhs.note != rhs.note {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Lesson: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.protoMessageName + ".Lesson"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "doneCount"),
    2: .same(proto: "totalCount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.doneCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.totalCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.doneCount != 0 {
      try visitor.visitSingularInt32Field(value: self.doneCount, fieldNumber: 1)
    }
    if self.totalCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Lesson, rhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.Lesson) -> Bool {
    if lhs.doneCount != rhs.doneCount {return false}
    if lhs.totalCount != rhs.totalCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.MedicalDoctor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.protoMessageName + ".MedicalDoctor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accountId"),
    2: .same(proto: "name"),
    3: .same(proto: "email"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.accountID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.accountID != 0 {
      try visitor.visitSingularInt32Field(value: self.accountID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.MedicalDoctor, rhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.MedicalDoctor) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.email != rhs.email {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.StatusNote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.protoMessageName + ".StatusNote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "note"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.note) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    if !self.note.isEmpty {
      try visitor.visitSingularStringField(value: self.note, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.StatusNote, rhs: Dta_Wed_Api_V1_Patients_GetPatientOverviewResponse.StatusNote) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.note != rhs.note {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientClinicalRecordsByUserIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdRequest, rhs: Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientClinicalRecordsByUserIdResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse, rhs: Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "nth"),
    3: .same(proto: "week"),
    4: .same(proto: "access"),
    5: .same(proto: "userDiaryCount"),
    6: .same(proto: "note"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.date) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.nth) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.week) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.access) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.userDiaryCount) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.note) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 1)
    }
    if self.nth != 0 {
      try visitor.visitSingularInt32Field(value: self.nth, fieldNumber: 2)
    }
    if self.week != 0 {
      try visitor.visitSingularInt32Field(value: self.week, fieldNumber: 3)
    }
    if self.access != false {
      try visitor.visitSingularBoolField(value: self.access, fieldNumber: 4)
    }
    if self.userDiaryCount != 0 {
      try visitor.visitSingularInt32Field(value: self.userDiaryCount, fieldNumber: 5)
    }
    if !self.note.isEmpty {
      try visitor.visitSingularStringField(value: self.note, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse.DataMessage, rhs: Dta_Wed_Api_V1_Patients_GetPatientClinicalRecordsByUserIdResponse.DataMessage) -> Bool {
    if lhs.date != rhs.date {return false}
    if lhs.nth != rhs.nth {return false}
    if lhs.week != rhs.week {return false}
    if lhs.access != rhs.access {return false}
    if lhs.userDiaryCount != rhs.userDiaryCount {return false}
    if lhs.note != rhs.note {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_DisablePatientByUserIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DisablePatientByUserIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "status"),
    3: .same(proto: "note"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.note) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    if !self.note.isEmpty {
      try visitor.visitSingularStringField(value: self.note, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_DisablePatientByUserIdRequest, rhs: Dta_Wed_Api_V1_Patients_DisablePatientByUserIdRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.note != rhs.note {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientsByVisitIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visitId"),
    2: .same(proto: "siteId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.visitID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.siteID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.visitID != 0 {
      try visitor.visitSingularInt32Field(value: self.visitID, fieldNumber: 1)
    }
    if self.siteID != 0 {
      try visitor.visitSingularInt32Field(value: self.siteID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdRequest, rhs: Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdRequest) -> Bool {
    if lhs.visitID != rhs.visitID {return false}
    if lhs.siteID != rhs.siteID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPatientsByVisitIdResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "users"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.users) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 1)
    }
    if !self.users.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.users, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse, rhs: Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.users != rhs.users {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse.User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse.protoMessageName + ".User"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "accesscode"),
    3: .same(proto: "email"),
    4: .same(proto: "createdAt"),
    9: .same(proto: "userStatus"),
    10: .same(proto: "groupId"),
    5: .same(proto: "nthDay"),
    6: .same(proto: "visitAt"),
    7: .same(proto: "visitStatus"),
    8: .same(proto: "visitNote"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accesscode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.createdAt) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.nthDay) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.visitAt) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.visitStatus) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.visitNote) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.userStatus) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if !self.accesscode.isEmpty {
      try visitor.visitSingularStringField(value: self.accesscode, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt32Field(value: self.createdAt, fieldNumber: 4)
    }
    if self.nthDay != 0 {
      try visitor.visitSingularInt32Field(value: self.nthDay, fieldNumber: 5)
    }
    if self.visitAt != 0 {
      try visitor.visitSingularInt32Field(value: self.visitAt, fieldNumber: 6)
    }
    if self.visitStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.visitStatus, fieldNumber: 7)
    }
    if !self.visitNote.isEmpty {
      try visitor.visitSingularStringField(value: self.visitNote, fieldNumber: 8)
    }
    if self.userStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.userStatus, fieldNumber: 9)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt32Field(value: self.groupID, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse.User, rhs: Dta_Wed_Api_V1_Patients_GetPatientsByVisitIdResponse.User) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.accesscode != rhs.accesscode {return false}
    if lhs.email != rhs.email {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.userStatus != rhs.userStatus {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.nthDay != rhs.nthDay {return false}
    if lhs.visitAt != rhs.visitAt {return false}
    if lhs.visitStatus != rhs.visitStatus {return false}
    if lhs.visitNote != rhs.visitNote {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
