// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dta-wed-api/v1/patients/patients.proto

package patients

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PatientsDataClient is the client API for PatientsData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatientsDataClient interface {
	GetPatients(ctx context.Context, in *GetPatientsRequest, opts ...grpc.CallOption) (*GetPatientsResponse, error)
	GetPatientsByAccountId(ctx context.Context, in *GetPatientsByAccountIdRequest, opts ...grpc.CallOption) (*GetPatientsByAccountIdResponse, error)
	GetPatientByUserId(ctx context.Context, in *GetPatientByUserIdRequest, opts ...grpc.CallOption) (*GetPatientByUserIdResponse, error)
	GetPatientsBySiteId(ctx context.Context, in *GetPatientsBySiteIdRequest, opts ...grpc.CallOption) (*GetPatientsBySiteIdResponse, error)
	GetPatientMedicalRecordsByUserId(ctx context.Context, in *GetPatientMedicalRecordsByUserIdRequest, opts ...grpc.CallOption) (*GetPatientMedicalRecordsByUserIdRequestResponse, error)
	GetDropoutPatients(ctx context.Context, in *GetDropoutPatientsRequest, opts ...grpc.CallOption) (*GetDropoutPatientsResponse, error)
	GetPatientOverview(ctx context.Context, in *GetPatientOverviewRequest, opts ...grpc.CallOption) (*GetPatientOverviewResponse, error)
	GetPatientClinicalRecordsByUserId(ctx context.Context, in *GetPatientClinicalRecordsByUserIdRequest, opts ...grpc.CallOption) (*GetPatientClinicalRecordsByUserIdResponse, error)
	DisablePatientByUserId(ctx context.Context, in *DisablePatientByUserIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPatientsByVisitId(ctx context.Context, in *GetPatientsByVisitIdRequest, opts ...grpc.CallOption) (*GetPatientsByVisitIdResponse, error)
}

type patientsDataClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientsDataClient(cc grpc.ClientConnInterface) PatientsDataClient {
	return &patientsDataClient{cc}
}

func (c *patientsDataClient) GetPatients(ctx context.Context, in *GetPatientsRequest, opts ...grpc.CallOption) (*GetPatientsResponse, error) {
	out := new(GetPatientsResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.patients.PatientsData/GetPatients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsDataClient) GetPatientsByAccountId(ctx context.Context, in *GetPatientsByAccountIdRequest, opts ...grpc.CallOption) (*GetPatientsByAccountIdResponse, error) {
	out := new(GetPatientsByAccountIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.patients.PatientsData/GetPatientsByAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsDataClient) GetPatientByUserId(ctx context.Context, in *GetPatientByUserIdRequest, opts ...grpc.CallOption) (*GetPatientByUserIdResponse, error) {
	out := new(GetPatientByUserIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.patients.PatientsData/GetPatientByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsDataClient) GetPatientsBySiteId(ctx context.Context, in *GetPatientsBySiteIdRequest, opts ...grpc.CallOption) (*GetPatientsBySiteIdResponse, error) {
	out := new(GetPatientsBySiteIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.patients.PatientsData/GetPatientsBySiteId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsDataClient) GetPatientMedicalRecordsByUserId(ctx context.Context, in *GetPatientMedicalRecordsByUserIdRequest, opts ...grpc.CallOption) (*GetPatientMedicalRecordsByUserIdRequestResponse, error) {
	out := new(GetPatientMedicalRecordsByUserIdRequestResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.patients.PatientsData/GetPatientMedicalRecordsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsDataClient) GetDropoutPatients(ctx context.Context, in *GetDropoutPatientsRequest, opts ...grpc.CallOption) (*GetDropoutPatientsResponse, error) {
	out := new(GetDropoutPatientsResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.patients.PatientsData/GetDropoutPatients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsDataClient) GetPatientOverview(ctx context.Context, in *GetPatientOverviewRequest, opts ...grpc.CallOption) (*GetPatientOverviewResponse, error) {
	out := new(GetPatientOverviewResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.patients.PatientsData/GetPatientOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsDataClient) GetPatientClinicalRecordsByUserId(ctx context.Context, in *GetPatientClinicalRecordsByUserIdRequest, opts ...grpc.CallOption) (*GetPatientClinicalRecordsByUserIdResponse, error) {
	out := new(GetPatientClinicalRecordsByUserIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.patients.PatientsData/GetPatientClinicalRecordsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsDataClient) DisablePatientByUserId(ctx context.Context, in *DisablePatientByUserIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.patients.PatientsData/DisablePatientByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsDataClient) GetPatientsByVisitId(ctx context.Context, in *GetPatientsByVisitIdRequest, opts ...grpc.CallOption) (*GetPatientsByVisitIdResponse, error) {
	out := new(GetPatientsByVisitIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.patients.PatientsData/GetPatientsByVisitId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientsDataServer is the server API for PatientsData service.
// All implementations must embed UnimplementedPatientsDataServer
// for forward compatibility
type PatientsDataServer interface {
	GetPatients(context.Context, *GetPatientsRequest) (*GetPatientsResponse, error)
	GetPatientsByAccountId(context.Context, *GetPatientsByAccountIdRequest) (*GetPatientsByAccountIdResponse, error)
	GetPatientByUserId(context.Context, *GetPatientByUserIdRequest) (*GetPatientByUserIdResponse, error)
	GetPatientsBySiteId(context.Context, *GetPatientsBySiteIdRequest) (*GetPatientsBySiteIdResponse, error)
	GetPatientMedicalRecordsByUserId(context.Context, *GetPatientMedicalRecordsByUserIdRequest) (*GetPatientMedicalRecordsByUserIdRequestResponse, error)
	GetDropoutPatients(context.Context, *GetDropoutPatientsRequest) (*GetDropoutPatientsResponse, error)
	GetPatientOverview(context.Context, *GetPatientOverviewRequest) (*GetPatientOverviewResponse, error)
	GetPatientClinicalRecordsByUserId(context.Context, *GetPatientClinicalRecordsByUserIdRequest) (*GetPatientClinicalRecordsByUserIdResponse, error)
	DisablePatientByUserId(context.Context, *DisablePatientByUserIdRequest) (*emptypb.Empty, error)
	GetPatientsByVisitId(context.Context, *GetPatientsByVisitIdRequest) (*GetPatientsByVisitIdResponse, error)
	mustEmbedUnimplementedPatientsDataServer()
}

// UnimplementedPatientsDataServer must be embedded to have forward compatible implementations.
type UnimplementedPatientsDataServer struct {
}

func (UnimplementedPatientsDataServer) GetPatients(context.Context, *GetPatientsRequest) (*GetPatientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatients not implemented")
}
func (UnimplementedPatientsDataServer) GetPatientsByAccountId(context.Context, *GetPatientsByAccountIdRequest) (*GetPatientsByAccountIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientsByAccountId not implemented")
}
func (UnimplementedPatientsDataServer) GetPatientByUserId(context.Context, *GetPatientByUserIdRequest) (*GetPatientByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientByUserId not implemented")
}
func (UnimplementedPatientsDataServer) GetPatientsBySiteId(context.Context, *GetPatientsBySiteIdRequest) (*GetPatientsBySiteIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientsBySiteId not implemented")
}
func (UnimplementedPatientsDataServer) GetPatientMedicalRecordsByUserId(context.Context, *GetPatientMedicalRecordsByUserIdRequest) (*GetPatientMedicalRecordsByUserIdRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientMedicalRecordsByUserId not implemented")
}
func (UnimplementedPatientsDataServer) GetDropoutPatients(context.Context, *GetDropoutPatientsRequest) (*GetDropoutPatientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDropoutPatients not implemented")
}
func (UnimplementedPatientsDataServer) GetPatientOverview(context.Context, *GetPatientOverviewRequest) (*GetPatientOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientOverview not implemented")
}
func (UnimplementedPatientsDataServer) GetPatientClinicalRecordsByUserId(context.Context, *GetPatientClinicalRecordsByUserIdRequest) (*GetPatientClinicalRecordsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientClinicalRecordsByUserId not implemented")
}
func (UnimplementedPatientsDataServer) DisablePatientByUserId(context.Context, *DisablePatientByUserIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePatientByUserId not implemented")
}
func (UnimplementedPatientsDataServer) GetPatientsByVisitId(context.Context, *GetPatientsByVisitIdRequest) (*GetPatientsByVisitIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientsByVisitId not implemented")
}
func (UnimplementedPatientsDataServer) mustEmbedUnimplementedPatientsDataServer() {}

// UnsafePatientsDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientsDataServer will
// result in compilation errors.
type UnsafePatientsDataServer interface {
	mustEmbedUnimplementedPatientsDataServer()
}

func RegisterPatientsDataServer(s grpc.ServiceRegistrar, srv PatientsDataServer) {
	s.RegisterService(&PatientsData_ServiceDesc, srv)
}

func _PatientsData_GetPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsDataServer).GetPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.patients.PatientsData/GetPatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsDataServer).GetPatients(ctx, req.(*GetPatientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsData_GetPatientsByAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsByAccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsDataServer).GetPatientsByAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.patients.PatientsData/GetPatientsByAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsDataServer).GetPatientsByAccountId(ctx, req.(*GetPatientsByAccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsData_GetPatientByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsDataServer).GetPatientByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.patients.PatientsData/GetPatientByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsDataServer).GetPatientByUserId(ctx, req.(*GetPatientByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsData_GetPatientsBySiteId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsBySiteIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsDataServer).GetPatientsBySiteId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.patients.PatientsData/GetPatientsBySiteId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsDataServer).GetPatientsBySiteId(ctx, req.(*GetPatientsBySiteIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsData_GetPatientMedicalRecordsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientMedicalRecordsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsDataServer).GetPatientMedicalRecordsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.patients.PatientsData/GetPatientMedicalRecordsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsDataServer).GetPatientMedicalRecordsByUserId(ctx, req.(*GetPatientMedicalRecordsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsData_GetDropoutPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropoutPatientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsDataServer).GetDropoutPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.patients.PatientsData/GetDropoutPatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsDataServer).GetDropoutPatients(ctx, req.(*GetDropoutPatientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsData_GetPatientOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsDataServer).GetPatientOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.patients.PatientsData/GetPatientOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsDataServer).GetPatientOverview(ctx, req.(*GetPatientOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsData_GetPatientClinicalRecordsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientClinicalRecordsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsDataServer).GetPatientClinicalRecordsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.patients.PatientsData/GetPatientClinicalRecordsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsDataServer).GetPatientClinicalRecordsByUserId(ctx, req.(*GetPatientClinicalRecordsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsData_DisablePatientByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePatientByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsDataServer).DisablePatientByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.patients.PatientsData/DisablePatientByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsDataServer).DisablePatientByUserId(ctx, req.(*DisablePatientByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsData_GetPatientsByVisitId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsByVisitIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsDataServer).GetPatientsByVisitId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.patients.PatientsData/GetPatientsByVisitId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsDataServer).GetPatientsByVisitId(ctx, req.(*GetPatientsByVisitIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PatientsData_ServiceDesc is the grpc.ServiceDesc for PatientsData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PatientsData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dta.wed.api.v1.patients.PatientsData",
	HandlerType: (*PatientsDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPatients",
			Handler:    _PatientsData_GetPatients_Handler,
		},
		{
			MethodName: "GetPatientsByAccountId",
			Handler:    _PatientsData_GetPatientsByAccountId_Handler,
		},
		{
			MethodName: "GetPatientByUserId",
			Handler:    _PatientsData_GetPatientByUserId_Handler,
		},
		{
			MethodName: "GetPatientsBySiteId",
			Handler:    _PatientsData_GetPatientsBySiteId_Handler,
		},
		{
			MethodName: "GetPatientMedicalRecordsByUserId",
			Handler:    _PatientsData_GetPatientMedicalRecordsByUserId_Handler,
		},
		{
			MethodName: "GetDropoutPatients",
			Handler:    _PatientsData_GetDropoutPatients_Handler,
		},
		{
			MethodName: "GetPatientOverview",
			Handler:    _PatientsData_GetPatientOverview_Handler,
		},
		{
			MethodName: "GetPatientClinicalRecordsByUserId",
			Handler:    _PatientsData_GetPatientClinicalRecordsByUserId_Handler,
		},
		{
			MethodName: "DisablePatientByUserId",
			Handler:    _PatientsData_DisablePatientByUserId_Handler,
		},
		{
			MethodName: "GetPatientsByVisitId",
			Handler:    _PatientsData_GetPatientsByVisitId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dta-wed-api/v1/patients/patients.proto",
}
