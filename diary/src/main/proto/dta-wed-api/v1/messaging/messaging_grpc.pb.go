// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dta-wed-api/v1/messaging/messaging.proto

package messaging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagingDataClient is the client API for MessagingData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagingDataClient interface {
	UpdatePushMessageLog(ctx context.Context, in *UpdatePushMessageLogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type messagingDataClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingDataClient(cc grpc.ClientConnInterface) MessagingDataClient {
	return &messagingDataClient{cc}
}

func (c *messagingDataClient) UpdatePushMessageLog(ctx context.Context, in *UpdatePushMessageLogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.messaging.MessagingData/UpdatePushMessageLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingDataServer is the server API for MessagingData service.
// All implementations must embed UnimplementedMessagingDataServer
// for forward compatibility
type MessagingDataServer interface {
	UpdatePushMessageLog(context.Context, *UpdatePushMessageLogRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMessagingDataServer()
}

// UnimplementedMessagingDataServer must be embedded to have forward compatible implementations.
type UnimplementedMessagingDataServer struct {
}

func (UnimplementedMessagingDataServer) UpdatePushMessageLog(context.Context, *UpdatePushMessageLogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePushMessageLog not implemented")
}
func (UnimplementedMessagingDataServer) mustEmbedUnimplementedMessagingDataServer() {}

// UnsafeMessagingDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingDataServer will
// result in compilation errors.
type UnsafeMessagingDataServer interface {
	mustEmbedUnimplementedMessagingDataServer()
}

func RegisterMessagingDataServer(s grpc.ServiceRegistrar, srv MessagingDataServer) {
	s.RegisterService(&MessagingData_ServiceDesc, srv)
}

func _MessagingData_UpdatePushMessageLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePushMessageLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingDataServer).UpdatePushMessageLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.messaging.MessagingData/UpdatePushMessageLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingDataServer).UpdatePushMessageLog(ctx, req.(*UpdatePushMessageLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessagingData_ServiceDesc is the grpc.ServiceDesc for MessagingData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagingData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dta.wed.api.v1.messaging.MessagingData",
	HandlerType: (*MessagingDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePushMessageLog",
			Handler:    _MessagingData_UpdatePushMessageLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dta-wed-api/v1/messaging/messaging.proto",
}
