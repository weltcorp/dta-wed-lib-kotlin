// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dta-wed-api/v1/schedule/schedule.proto

package schedule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScheduleDataClient is the client API for ScheduleData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleDataClient interface {
	UpsertUserDiarySchedule(ctx context.Context, in *UpsertUserDiaryScheduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserSchedule(ctx context.Context, in *GetUserScheduleRequest, opts ...grpc.CallOption) (*GetUserScheduleResponse, error)
}

type scheduleDataClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleDataClient(cc grpc.ClientConnInterface) ScheduleDataClient {
	return &scheduleDataClient{cc}
}

func (c *scheduleDataClient) UpsertUserDiarySchedule(ctx context.Context, in *UpsertUserDiaryScheduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.schedule.ScheduleData/UpsertUserDiarySchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleDataClient) GetUserSchedule(ctx context.Context, in *GetUserScheduleRequest, opts ...grpc.CallOption) (*GetUserScheduleResponse, error) {
	out := new(GetUserScheduleResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.schedule.ScheduleData/GetUserSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleDataServer is the server API for ScheduleData service.
// All implementations must embed UnimplementedScheduleDataServer
// for forward compatibility
type ScheduleDataServer interface {
	UpsertUserDiarySchedule(context.Context, *UpsertUserDiaryScheduleRequest) (*emptypb.Empty, error)
	GetUserSchedule(context.Context, *GetUserScheduleRequest) (*GetUserScheduleResponse, error)
	mustEmbedUnimplementedScheduleDataServer()
}

// UnimplementedScheduleDataServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleDataServer struct {
}

func (UnimplementedScheduleDataServer) UpsertUserDiarySchedule(context.Context, *UpsertUserDiaryScheduleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUserDiarySchedule not implemented")
}
func (UnimplementedScheduleDataServer) GetUserSchedule(context.Context, *GetUserScheduleRequest) (*GetUserScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSchedule not implemented")
}
func (UnimplementedScheduleDataServer) mustEmbedUnimplementedScheduleDataServer() {}

// UnsafeScheduleDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleDataServer will
// result in compilation errors.
type UnsafeScheduleDataServer interface {
	mustEmbedUnimplementedScheduleDataServer()
}

func RegisterScheduleDataServer(s grpc.ServiceRegistrar, srv ScheduleDataServer) {
	s.RegisterService(&ScheduleData_ServiceDesc, srv)
}

func _ScheduleData_UpsertUserDiarySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserDiaryScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleDataServer).UpsertUserDiarySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.schedule.ScheduleData/UpsertUserDiarySchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleDataServer).UpsertUserDiarySchedule(ctx, req.(*UpsertUserDiaryScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleData_GetUserSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleDataServer).GetUserSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.schedule.ScheduleData/GetUserSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleDataServer).GetUserSchedule(ctx, req.(*GetUserScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleData_ServiceDesc is the grpc.ServiceDesc for ScheduleData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dta.wed.api.v1.schedule.ScheduleData",
	HandlerType: (*ScheduleDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertUserDiarySchedule",
			Handler:    _ScheduleData_UpsertUserDiarySchedule_Handler,
		},
		{
			MethodName: "GetUserSchedule",
			Handler:    _ScheduleData_GetUserSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dta-wed-api/v1/schedule/schedule.proto",
}
