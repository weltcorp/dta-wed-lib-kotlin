//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: dta-wed-api/v1/visits/visits.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Dta_Wed_Api_V1_Visits_VisitsDataClient`, then call methods of this protocol to make API calls.
internal protocol Dta_Wed_Api_V1_Visits_VisitsDataClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol? { get }

  func getUserVisits(
    _ request: Dta_Wed_Api_V1_Visits_GetUserVisitsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dta_Wed_Api_V1_Visits_GetUserVisitsRequest, Dta_Wed_Api_V1_Visits_GetUserVisitsResponse>

  func upsertUserVisit(
    _ request: Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getUserVisitByUserIdAndVisitId(
    _ request: Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest, Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse>
}

extension Dta_Wed_Api_V1_Visits_VisitsDataClientProtocol {
  internal var serviceName: String {
    return "dta.wed.api.v1.visits.VisitsData"
  }

  /// Unary call to GetUserVisits
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserVisits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserVisits(
    _ request: Dta_Wed_Api_V1_Visits_GetUserVisitsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dta_Wed_Api_V1_Visits_GetUserVisitsRequest, Dta_Wed_Api_V1_Visits_GetUserVisitsResponse> {
    return self.makeUnaryCall(
      path: Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.getUserVisits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserVisitsInterceptors() ?? []
    )
  }

  /// Unary call to UpsertUserVisit
  ///
  /// - Parameters:
  ///   - request: Request to send to UpsertUserVisit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upsertUserVisit(
    _ request: Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.upsertUserVisit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertUserVisitInterceptors() ?? []
    )
  }

  /// Unary call to GetUserVisitByUserIdAndVisitId
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserVisitByUserIdAndVisitId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserVisitByUserIdAndVisitId(
    _ request: Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest, Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse> {
    return self.makeUnaryCall(
      path: Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.getUserVisitByUserIdAndVisitId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserVisitByUserIdAndVisitIdInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Dta_Wed_Api_V1_Visits_VisitsDataClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Dta_Wed_Api_V1_Visits_VisitsDataNIOClient")
internal final class Dta_Wed_Api_V1_Visits_VisitsDataClient: Dta_Wed_Api_V1_Visits_VisitsDataClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the dta.wed.api.v1.visits.VisitsData service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Dta_Wed_Api_V1_Visits_VisitsDataNIOClient: Dta_Wed_Api_V1_Visits_VisitsDataClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol?

  /// Creates a client for the dta.wed.api.v1.visits.VisitsData service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Dta_Wed_Api_V1_Visits_VisitsDataAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol? { get }

  func makeGetUserVisitsCall(
    _ request: Dta_Wed_Api_V1_Visits_GetUserVisitsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dta_Wed_Api_V1_Visits_GetUserVisitsRequest, Dta_Wed_Api_V1_Visits_GetUserVisitsResponse>

  func makeUpsertUserVisitCall(
    _ request: Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetUserVisitByUserIDAndVisitIDCall(
    _ request: Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest, Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Dta_Wed_Api_V1_Visits_VisitsDataAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.serviceDescriptor
  }

  internal var interceptors: Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetUserVisitsCall(
    _ request: Dta_Wed_Api_V1_Visits_GetUserVisitsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dta_Wed_Api_V1_Visits_GetUserVisitsRequest, Dta_Wed_Api_V1_Visits_GetUserVisitsResponse> {
    return self.makeAsyncUnaryCall(
      path: Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.getUserVisits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserVisitsInterceptors() ?? []
    )
  }

  internal func makeUpsertUserVisitCall(
    _ request: Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.upsertUserVisit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertUserVisitInterceptors() ?? []
    )
  }

  internal func makeGetUserVisitByUserIDAndVisitIDCall(
    _ request: Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest, Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse> {
    return self.makeAsyncUnaryCall(
      path: Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.getUserVisitByUserIdAndVisitId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserVisitByUserIdAndVisitIdInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Dta_Wed_Api_V1_Visits_VisitsDataAsyncClientProtocol {
  internal func getUserVisits(
    _ request: Dta_Wed_Api_V1_Visits_GetUserVisitsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dta_Wed_Api_V1_Visits_GetUserVisitsResponse {
    return try await self.performAsyncUnaryCall(
      path: Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.getUserVisits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserVisitsInterceptors() ?? []
    )
  }

  internal func upsertUserVisit(
    _ request: Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.upsertUserVisit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertUserVisitInterceptors() ?? []
    )
  }

  internal func getUserVisitByUserIdAndVisitId(
    _ request: Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse {
    return try await self.performAsyncUnaryCall(
      path: Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.getUserVisitByUserIdAndVisitId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserVisitByUserIdAndVisitIdInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Dta_Wed_Api_V1_Visits_VisitsDataAsyncClient: Dta_Wed_Api_V1_Visits_VisitsDataAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Dta_Wed_Api_V1_Visits_VisitsDataClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getUserVisits'.
  func makeGetUserVisitsInterceptors() -> [ClientInterceptor<Dta_Wed_Api_V1_Visits_GetUserVisitsRequest, Dta_Wed_Api_V1_Visits_GetUserVisitsResponse>]

  /// - Returns: Interceptors to use when invoking 'upsertUserVisit'.
  func makeUpsertUserVisitInterceptors() -> [ClientInterceptor<Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getUserVisitByUserIdAndVisitId'.
  func makeGetUserVisitByUserIdAndVisitIdInterceptors() -> [ClientInterceptor<Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest, Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse>]
}

internal enum Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "VisitsData",
    fullName: "dta.wed.api.v1.visits.VisitsData",
    methods: [
      Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.getUserVisits,
      Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.upsertUserVisit,
      Dta_Wed_Api_V1_Visits_VisitsDataClientMetadata.Methods.getUserVisitByUserIdAndVisitId,
    ]
  )

  internal enum Methods {
    internal static let getUserVisits = GRPCMethodDescriptor(
      name: "GetUserVisits",
      path: "/dta.wed.api.v1.visits.VisitsData/GetUserVisits",
      type: GRPCCallType.unary
    )

    internal static let upsertUserVisit = GRPCMethodDescriptor(
      name: "UpsertUserVisit",
      path: "/dta.wed.api.v1.visits.VisitsData/UpsertUserVisit",
      type: GRPCCallType.unary
    )

    internal static let getUserVisitByUserIdAndVisitId = GRPCMethodDescriptor(
      name: "GetUserVisitByUserIdAndVisitId",
      path: "/dta.wed.api.v1.visits.VisitsData/GetUserVisitByUserIdAndVisitId",
      type: GRPCCallType.unary
    )
  }
}

