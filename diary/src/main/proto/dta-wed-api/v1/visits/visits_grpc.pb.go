// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dta-wed-api/v1/visits/visits.proto

package visits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VisitsDataClient is the client API for VisitsData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisitsDataClient interface {
	GetUserVisits(ctx context.Context, in *GetUserVisitsRequest, opts ...grpc.CallOption) (*GetUserVisitsResponse, error)
	UpsertUserVisit(ctx context.Context, in *UpsertUserVisitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserVisitByUserIdAndVisitId(ctx context.Context, in *GetUserVisitByUserIdAndVisitIdRequest, opts ...grpc.CallOption) (*GetUserVisitByUserIdAndVisitIdResponse, error)
}

type visitsDataClient struct {
	cc grpc.ClientConnInterface
}

func NewVisitsDataClient(cc grpc.ClientConnInterface) VisitsDataClient {
	return &visitsDataClient{cc}
}

func (c *visitsDataClient) GetUserVisits(ctx context.Context, in *GetUserVisitsRequest, opts ...grpc.CallOption) (*GetUserVisitsResponse, error) {
	out := new(GetUserVisitsResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.visits.VisitsData/GetUserVisits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitsDataClient) UpsertUserVisit(ctx context.Context, in *UpsertUserVisitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.visits.VisitsData/UpsertUserVisit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitsDataClient) GetUserVisitByUserIdAndVisitId(ctx context.Context, in *GetUserVisitByUserIdAndVisitIdRequest, opts ...grpc.CallOption) (*GetUserVisitByUserIdAndVisitIdResponse, error) {
	out := new(GetUserVisitByUserIdAndVisitIdResponse)
	err := c.cc.Invoke(ctx, "/dta.wed.api.v1.visits.VisitsData/GetUserVisitByUserIdAndVisitId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisitsDataServer is the server API for VisitsData service.
// All implementations must embed UnimplementedVisitsDataServer
// for forward compatibility
type VisitsDataServer interface {
	GetUserVisits(context.Context, *GetUserVisitsRequest) (*GetUserVisitsResponse, error)
	UpsertUserVisit(context.Context, *UpsertUserVisitRequest) (*emptypb.Empty, error)
	GetUserVisitByUserIdAndVisitId(context.Context, *GetUserVisitByUserIdAndVisitIdRequest) (*GetUserVisitByUserIdAndVisitIdResponse, error)
	mustEmbedUnimplementedVisitsDataServer()
}

// UnimplementedVisitsDataServer must be embedded to have forward compatible implementations.
type UnimplementedVisitsDataServer struct {
}

func (UnimplementedVisitsDataServer) GetUserVisits(context.Context, *GetUserVisitsRequest) (*GetUserVisitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVisits not implemented")
}
func (UnimplementedVisitsDataServer) UpsertUserVisit(context.Context, *UpsertUserVisitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUserVisit not implemented")
}
func (UnimplementedVisitsDataServer) GetUserVisitByUserIdAndVisitId(context.Context, *GetUserVisitByUserIdAndVisitIdRequest) (*GetUserVisitByUserIdAndVisitIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVisitByUserIdAndVisitId not implemented")
}
func (UnimplementedVisitsDataServer) mustEmbedUnimplementedVisitsDataServer() {}

// UnsafeVisitsDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisitsDataServer will
// result in compilation errors.
type UnsafeVisitsDataServer interface {
	mustEmbedUnimplementedVisitsDataServer()
}

func RegisterVisitsDataServer(s grpc.ServiceRegistrar, srv VisitsDataServer) {
	s.RegisterService(&VisitsData_ServiceDesc, srv)
}

func _VisitsData_GetUserVisits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVisitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitsDataServer).GetUserVisits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.visits.VisitsData/GetUserVisits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitsDataServer).GetUserVisits(ctx, req.(*GetUserVisitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitsData_UpsertUserVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitsDataServer).UpsertUserVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.visits.VisitsData/UpsertUserVisit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitsDataServer).UpsertUserVisit(ctx, req.(*UpsertUserVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitsData_GetUserVisitByUserIdAndVisitId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVisitByUserIdAndVisitIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitsDataServer).GetUserVisitByUserIdAndVisitId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dta.wed.api.v1.visits.VisitsData/GetUserVisitByUserIdAndVisitId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitsDataServer).GetUserVisitByUserIdAndVisitId(ctx, req.(*GetUserVisitByUserIdAndVisitIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VisitsData_ServiceDesc is the grpc.ServiceDesc for VisitsData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisitsData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dta.wed.api.v1.visits.VisitsData",
	HandlerType: (*VisitsDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserVisits",
			Handler:    _VisitsData_GetUserVisits_Handler,
		},
		{
			MethodName: "UpsertUserVisit",
			Handler:    _VisitsData_UpsertUserVisit_Handler,
		},
		{
			MethodName: "GetUserVisitByUserIdAndVisitId",
			Handler:    _VisitsData_GetUserVisitByUserIdAndVisitId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dta-wed-api/v1/visits/visits.proto",
}
