// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dta-wed-api/v1/visits/visits.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Dta_Wed_Api_V1_Visits_GetUserVisitsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Visits_GetUserVisitsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Dta_Wed_Api_V1_Visits_GetUserVisitsResponse.DataMessage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct DataMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var userID: Int32 = 0

    public var visitID: Int32 = 0

    public var visitAt: Int32 = 0

    public var remainingDays: Int32 = 0

    public var note: String = String()

    public var noteCreatedAt: Int32 = 0

    public var noteUpdatedAt: Int32 = 0

    public var status: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var authorAccountID: Int32 = 0

  public var visitID: Int32 = 0

  public var note: String = String()

  public var status: Int32 {
    get {return _status ?? 0}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Int32? = nil
}

public struct Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var visitID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var visitID: Int32 = 0

  public var visitAt: Int32 = 0

  public var remainingDays: Int32 = 0

  public var note: String = String()

  public var noteCreatedAt: Int32 = 0

  public var noteUpdatedAt: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Dta_Wed_Api_V1_Visits_GetUserVisitsRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Visits_GetUserVisitsResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Visits_GetUserVisitsResponse.DataMessage: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dta.wed.api.v1.visits"

extension Dta_Wed_Api_V1_Visits_GetUserVisitsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUserVisitsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Visits_GetUserVisitsRequest, rhs: Dta_Wed_Api_V1_Visits_GetUserVisitsRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Visits_GetUserVisitsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUserVisitsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Visits_GetUserVisitsResponse, rhs: Dta_Wed_Api_V1_Visits_GetUserVisitsResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Visits_GetUserVisitsResponse.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Visits_GetUserVisitsResponse.protoMessageName + ".Data"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "visitId"),
    3: .same(proto: "visitAt"),
    4: .same(proto: "remainingDays"),
    5: .same(proto: "note"),
    6: .same(proto: "noteCreatedAt"),
    7: .same(proto: "noteUpdatedAt"),
    8: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.visitID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.visitAt) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.remainingDays) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.note) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.noteCreatedAt) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.noteUpdatedAt) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if self.visitID != 0 {
      try visitor.visitSingularInt32Field(value: self.visitID, fieldNumber: 2)
    }
    if self.visitAt != 0 {
      try visitor.visitSingularInt32Field(value: self.visitAt, fieldNumber: 3)
    }
    if self.remainingDays != 0 {
      try visitor.visitSingularInt32Field(value: self.remainingDays, fieldNumber: 4)
    }
    if !self.note.isEmpty {
      try visitor.visitSingularStringField(value: self.note, fieldNumber: 5)
    }
    if self.noteCreatedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.noteCreatedAt, fieldNumber: 6)
    }
    if self.noteUpdatedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.noteUpdatedAt, fieldNumber: 7)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Visits_GetUserVisitsResponse.DataMessage, rhs: Dta_Wed_Api_V1_Visits_GetUserVisitsResponse.DataMessage) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.visitID != rhs.visitID {return false}
    if lhs.visitAt != rhs.visitAt {return false}
    if lhs.remainingDays != rhs.remainingDays {return false}
    if lhs.note != rhs.note {return false}
    if lhs.noteCreatedAt != rhs.noteCreatedAt {return false}
    if lhs.noteUpdatedAt != rhs.noteUpdatedAt {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpsertUserVisitRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "authorAccountId"),
    3: .same(proto: "visitId"),
    4: .same(proto: "note"),
    5: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.authorAccountID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.visitID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.note) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if self.authorAccountID != 0 {
      try visitor.visitSingularInt32Field(value: self.authorAccountID, fieldNumber: 2)
    }
    if self.visitID != 0 {
      try visitor.visitSingularInt32Field(value: self.visitID, fieldNumber: 3)
    }
    if !self.note.isEmpty {
      try visitor.visitSingularStringField(value: self.note, fieldNumber: 4)
    }
    try { if let v = self._status {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest, rhs: Dta_Wed_Api_V1_Visits_UpsertUserVisitRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.authorAccountID != rhs.authorAccountID {return false}
    if lhs.visitID != rhs.visitID {return false}
    if lhs.note != rhs.note {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUserVisitByUserIdAndVisitIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "visitId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.visitID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if self.visitID != 0 {
      try visitor.visitSingularInt32Field(value: self.visitID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest, rhs: Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.visitID != rhs.visitID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUserVisitByUserIdAndVisitIdResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "visitId"),
    3: .same(proto: "visitAt"),
    4: .same(proto: "remainingDays"),
    5: .same(proto: "note"),
    6: .same(proto: "noteCreatedAt"),
    7: .same(proto: "noteUpdatedAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.visitID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.visitAt) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.remainingDays) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.note) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.noteCreatedAt) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.noteUpdatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if self.visitID != 0 {
      try visitor.visitSingularInt32Field(value: self.visitID, fieldNumber: 2)
    }
    if self.visitAt != 0 {
      try visitor.visitSingularInt32Field(value: self.visitAt, fieldNumber: 3)
    }
    if self.remainingDays != 0 {
      try visitor.visitSingularInt32Field(value: self.remainingDays, fieldNumber: 4)
    }
    if !self.note.isEmpty {
      try visitor.visitSingularStringField(value: self.note, fieldNumber: 5)
    }
    if self.noteCreatedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.noteCreatedAt, fieldNumber: 6)
    }
    if self.noteUpdatedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.noteUpdatedAt, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse, rhs: Dta_Wed_Api_V1_Visits_GetUserVisitByUserIdAndVisitIdResponse) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.visitID != rhs.visitID {return false}
    if lhs.visitAt != rhs.visitAt {return false}
    if lhs.remainingDays != rhs.remainingDays {return false}
    if lhs.note != rhs.note {return false}
    if lhs.noteCreatedAt != rhs.noteCreatedAt {return false}
    if lhs.noteUpdatedAt != rhs.noteUpdatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
