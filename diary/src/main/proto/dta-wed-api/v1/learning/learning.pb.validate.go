// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dta-wed-api/v1/learning/learning.proto

package learning

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserSessionItemsByCourseIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserSessionItemsByCourseIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserSessionItemsByCourseIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserSessionItemsByCourseIdRequestMultiError, or nil if none found.
func (m *GetUserSessionItemsByCourseIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserSessionItemsByCourseIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCourseId() <= 0 {
		err := GetUserSessionItemsByCourseIdRequestValidationError{
			field:  "CourseId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := GetUserSessionItemsByCourseIdRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserSessionItemsByCourseIdRequestMultiError(errors)
	}

	return nil
}

// GetUserSessionItemsByCourseIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserSessionItemsByCourseIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserSessionItemsByCourseIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserSessionItemsByCourseIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserSessionItemsByCourseIdRequestMultiError) AllErrors() []error { return m }

// GetUserSessionItemsByCourseIdRequestValidationError is the validation error
// returned by GetUserSessionItemsByCourseIdRequest.Validate if the designated
// constraints aren't met.
type GetUserSessionItemsByCourseIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserSessionItemsByCourseIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserSessionItemsByCourseIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserSessionItemsByCourseIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserSessionItemsByCourseIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserSessionItemsByCourseIdRequestValidationError) ErrorName() string {
	return "GetUserSessionItemsByCourseIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserSessionItemsByCourseIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserSessionItemsByCourseIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserSessionItemsByCourseIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserSessionItemsByCourseIdRequestValidationError{}

// Validate checks the field values on GetUserSessionItemsByCourseIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserSessionItemsByCourseIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserSessionItemsByCourseIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserSessionItemsByCourseIdResponseMultiError, or nil if none found.
func (m *GetUserSessionItemsByCourseIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserSessionItemsByCourseIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserSessionItemsByCourseIdResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserSessionItemsByCourseIdResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserSessionItemsByCourseIdResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserSessionItemsByCourseIdResponseMultiError(errors)
	}

	return nil
}

// GetUserSessionItemsByCourseIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetUserSessionItemsByCourseIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserSessionItemsByCourseIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserSessionItemsByCourseIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserSessionItemsByCourseIdResponseMultiError) AllErrors() []error { return m }

// GetUserSessionItemsByCourseIdResponseValidationError is the validation error
// returned by GetUserSessionItemsByCourseIdResponse.Validate if the
// designated constraints aren't met.
type GetUserSessionItemsByCourseIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserSessionItemsByCourseIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserSessionItemsByCourseIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserSessionItemsByCourseIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserSessionItemsByCourseIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserSessionItemsByCourseIdResponseValidationError) ErrorName() string {
	return "GetUserSessionItemsByCourseIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserSessionItemsByCourseIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserSessionItemsByCourseIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserSessionItemsByCourseIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserSessionItemsByCourseIdResponseValidationError{}

// Validate checks the field values on SessionItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SessionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SessionItemMultiError, or
// nil if none found.
func (m *SessionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionItemId

	// no validation rules for ItemTypeId

	// no validation rules for Order

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for LearningStatus

	// no validation rules for UserLearningStatus

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SessionItemMultiError(errors)
	}

	return nil
}

// SessionItemMultiError is an error wrapping multiple validation errors
// returned by SessionItem.ValidateAll() if the designated constraints aren't met.
type SessionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionItemMultiError) AllErrors() []error { return m }

// SessionItemValidationError is the validation error returned by
// SessionItem.Validate if the designated constraints aren't met.
type SessionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionItemValidationError) ErrorName() string { return "SessionItemValidationError" }

// Error satisfies the builtin error interface
func (e SessionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionItemValidationError{}

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Session) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SessionMultiError, or nil if none found.
func (m *Session) ValidateAll() error {
	return m.validate(true)
}

func (m *Session) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for Order

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ProjectAppId

	// no validation rules for LearningStatus

	// no validation rules for UserLearningStatus

	// no validation rules for UpdatedAt

	// no validation rules for CreatedAt

	for idx, item := range m.GetSessionItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  fmt.Sprintf("SessionItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  fmt.Sprintf("SessionItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionValidationError{
					field:  fmt.Sprintf("SessionItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SessionMultiError(errors)
	}

	return nil
}

// SessionMultiError is an error wrapping multiple validation errors returned
// by Session.ValidateAll() if the designated constraints aren't met.
type SessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionMultiError) AllErrors() []error { return m }

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}

// Validate checks the field values on GetDoneUserSessionItemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDoneUserSessionItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDoneUserSessionItemsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDoneUserSessionItemsRequestMultiError, or nil if none found.
func (m *GetDoneUserSessionItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDoneUserSessionItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetDoneUserSessionItemsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Date

	if len(errors) > 0 {
		return GetDoneUserSessionItemsRequestMultiError(errors)
	}

	return nil
}

// GetDoneUserSessionItemsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDoneUserSessionItemsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetDoneUserSessionItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDoneUserSessionItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDoneUserSessionItemsRequestMultiError) AllErrors() []error { return m }

// GetDoneUserSessionItemsRequestValidationError is the validation error
// returned by GetDoneUserSessionItemsRequest.Validate if the designated
// constraints aren't met.
type GetDoneUserSessionItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDoneUserSessionItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDoneUserSessionItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDoneUserSessionItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDoneUserSessionItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDoneUserSessionItemsRequestValidationError) ErrorName() string {
	return "GetDoneUserSessionItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDoneUserSessionItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDoneUserSessionItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDoneUserSessionItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDoneUserSessionItemsRequestValidationError{}

// Validate checks the field values on GetDoneUserSessionItemsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDoneUserSessionItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDoneUserSessionItemsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDoneUserSessionItemsResponseMultiError, or nil if none found.
func (m *GetDoneUserSessionItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDoneUserSessionItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSessionItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDoneUserSessionItemsResponseValidationError{
						field:  fmt.Sprintf("SessionItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDoneUserSessionItemsResponseValidationError{
						field:  fmt.Sprintf("SessionItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDoneUserSessionItemsResponseValidationError{
					field:  fmt.Sprintf("SessionItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDoneUserSessionItemsResponseMultiError(errors)
	}

	return nil
}

// GetDoneUserSessionItemsResponseMultiError is an error wrapping multiple
// validation errors returned by GetDoneUserSessionItemsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDoneUserSessionItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDoneUserSessionItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDoneUserSessionItemsResponseMultiError) AllErrors() []error { return m }

// GetDoneUserSessionItemsResponseValidationError is the validation error
// returned by GetDoneUserSessionItemsResponse.Validate if the designated
// constraints aren't met.
type GetDoneUserSessionItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDoneUserSessionItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDoneUserSessionItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDoneUserSessionItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDoneUserSessionItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDoneUserSessionItemsResponseValidationError) ErrorName() string {
	return "GetDoneUserSessionItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDoneUserSessionItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDoneUserSessionItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDoneUserSessionItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDoneUserSessionItemsResponseValidationError{}

// Validate checks the field values on CreateUserRecommendedSessionItemsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateUserRecommendedSessionItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateUserRecommendedSessionItemsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateUserRecommendedSessionItemsRequestMultiError, or nil if none found.
func (m *CreateUserRecommendedSessionItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRecommendedSessionItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateUserRecommendedSessionItemsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUserRecommendedSessionItemsRequestMultiError(errors)
	}

	return nil
}

// CreateUserRecommendedSessionItemsRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateUserRecommendedSessionItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserRecommendedSessionItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRecommendedSessionItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRecommendedSessionItemsRequestMultiError) AllErrors() []error { return m }

// CreateUserRecommendedSessionItemsRequestValidationError is the validation
// error returned by CreateUserRecommendedSessionItemsRequest.Validate if the
// designated constraints aren't met.
type CreateUserRecommendedSessionItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRecommendedSessionItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRecommendedSessionItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRecommendedSessionItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRecommendedSessionItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRecommendedSessionItemsRequestValidationError) ErrorName() string {
	return "CreateUserRecommendedSessionItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRecommendedSessionItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRecommendedSessionItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRecommendedSessionItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRecommendedSessionItemsRequestValidationError{}

// Validate checks the field values on GetUserRecommendedSessionItemsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserRecommendedSessionItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRecommendedSessionItemsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserRecommendedSessionItemsRequestMultiError, or nil if none found.
func (m *GetUserRecommendedSessionItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRecommendedSessionItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserRecommendedSessionItemsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRecommendedSessionItemsRequestMultiError(errors)
	}

	return nil
}

// GetUserRecommendedSessionItemsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetUserRecommendedSessionItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserRecommendedSessionItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRecommendedSessionItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRecommendedSessionItemsRequestMultiError) AllErrors() []error { return m }

// GetUserRecommendedSessionItemsRequestValidationError is the validation error
// returned by GetUserRecommendedSessionItemsRequest.Validate if the
// designated constraints aren't met.
type GetUserRecommendedSessionItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRecommendedSessionItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRecommendedSessionItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRecommendedSessionItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRecommendedSessionItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRecommendedSessionItemsRequestValidationError) ErrorName() string {
	return "GetUserRecommendedSessionItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRecommendedSessionItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRecommendedSessionItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRecommendedSessionItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRecommendedSessionItemsRequestValidationError{}

// Validate checks the field values on GetUserRecommendedSessionItemsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserRecommendedSessionItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserRecommendedSessionItemsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetUserRecommendedSessionItemsResponseMultiError, or nil if none found.
func (m *GetUserRecommendedSessionItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRecommendedSessionItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserRecommendedSessionItemsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserRecommendedSessionItemsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRecommendedSessionItemsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserRecommendedSessionItemsResponseMultiError(errors)
	}

	return nil
}

// GetUserRecommendedSessionItemsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetUserRecommendedSessionItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserRecommendedSessionItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRecommendedSessionItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRecommendedSessionItemsResponseMultiError) AllErrors() []error { return m }

// GetUserRecommendedSessionItemsResponseValidationError is the validation
// error returned by GetUserRecommendedSessionItemsResponse.Validate if the
// designated constraints aren't met.
type GetUserRecommendedSessionItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRecommendedSessionItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRecommendedSessionItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRecommendedSessionItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRecommendedSessionItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRecommendedSessionItemsResponseValidationError) ErrorName() string {
	return "GetUserRecommendedSessionItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRecommendedSessionItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRecommendedSessionItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRecommendedSessionItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRecommendedSessionItemsResponseValidationError{}

// Validate checks the field values on DeleteUserRecommendedSessionItemRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteUserRecommendedSessionItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteUserRecommendedSessionItemRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteUserRecommendedSessionItemRequestMultiError, or nil if none found.
func (m *DeleteUserRecommendedSessionItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRecommendedSessionItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionItemId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteUserRecommendedSessionItemRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRecommendedSessionItemRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteUserRecommendedSessionItemRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserRecommendedSessionItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRecommendedSessionItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRecommendedSessionItemRequestMultiError) AllErrors() []error { return m }

// DeleteUserRecommendedSessionItemRequestValidationError is the validation
// error returned by DeleteUserRecommendedSessionItemRequest.Validate if the
// designated constraints aren't met.
type DeleteUserRecommendedSessionItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRecommendedSessionItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRecommendedSessionItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRecommendedSessionItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRecommendedSessionItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRecommendedSessionItemRequestValidationError) ErrorName() string {
	return "DeleteUserRecommendedSessionItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRecommendedSessionItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRecommendedSessionItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRecommendedSessionItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRecommendedSessionItemRequestValidationError{}

// Validate checks the field values on GetShuffledSessionItemsByUserIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetShuffledSessionItemsByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetShuffledSessionItemsByUserIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetShuffledSessionItemsByUserIdRequestMultiError, or nil if none found.
func (m *GetShuffledSessionItemsByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShuffledSessionItemsByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Shuffle

	if len(errors) > 0 {
		return GetShuffledSessionItemsByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetShuffledSessionItemsByUserIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetShuffledSessionItemsByUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShuffledSessionItemsByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShuffledSessionItemsByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShuffledSessionItemsByUserIdRequestMultiError) AllErrors() []error { return m }

// GetShuffledSessionItemsByUserIdRequestValidationError is the validation
// error returned by GetShuffledSessionItemsByUserIdRequest.Validate if the
// designated constraints aren't met.
type GetShuffledSessionItemsByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShuffledSessionItemsByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShuffledSessionItemsByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShuffledSessionItemsByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShuffledSessionItemsByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShuffledSessionItemsByUserIdRequestValidationError) ErrorName() string {
	return "GetShuffledSessionItemsByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShuffledSessionItemsByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShuffledSessionItemsByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShuffledSessionItemsByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShuffledSessionItemsByUserIdRequestValidationError{}

// Validate checks the field values on GetShuffledSessionItemsByUserIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetShuffledSessionItemsByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetShuffledSessionItemsByUserIdResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetShuffledSessionItemsByUserIdResponseMultiError, or nil if none found.
func (m *GetShuffledSessionItemsByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShuffledSessionItemsByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetShuffledSessionItemsByUserIdResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetShuffledSessionItemsByUserIdResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetShuffledSessionItemsByUserIdResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetShuffledSessionItemsByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetShuffledSessionItemsByUserIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetShuffledSessionItemsByUserIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShuffledSessionItemsByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShuffledSessionItemsByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShuffledSessionItemsByUserIdResponseMultiError) AllErrors() []error { return m }

// GetShuffledSessionItemsByUserIdResponseValidationError is the validation
// error returned by GetShuffledSessionItemsByUserIdResponse.Validate if the
// designated constraints aren't met.
type GetShuffledSessionItemsByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShuffledSessionItemsByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShuffledSessionItemsByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShuffledSessionItemsByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShuffledSessionItemsByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShuffledSessionItemsByUserIdResponseValidationError) ErrorName() string {
	return "GetShuffledSessionItemsByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShuffledSessionItemsByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShuffledSessionItemsByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShuffledSessionItemsByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShuffledSessionItemsByUserIdResponseValidationError{}

// Validate checks the field values on GetPageByPageIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPageByPageIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPageByPageIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPageByPageIdRequestMultiError, or nil if none found.
func (m *GetPageByPageIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPageByPageIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageId

	if len(errors) > 0 {
		return GetPageByPageIdRequestMultiError(errors)
	}

	return nil
}

// GetPageByPageIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetPageByPageIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPageByPageIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPageByPageIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPageByPageIdRequestMultiError) AllErrors() []error { return m }

// GetPageByPageIdRequestValidationError is the validation error returned by
// GetPageByPageIdRequest.Validate if the designated constraints aren't met.
type GetPageByPageIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPageByPageIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPageByPageIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPageByPageIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPageByPageIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPageByPageIdRequestValidationError) ErrorName() string {
	return "GetPageByPageIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPageByPageIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPageByPageIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPageByPageIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPageByPageIdRequestValidationError{}

// Validate checks the field values on GetPageByPageIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPageByPageIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPageByPageIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPageByPageIdResponseMultiError, or nil if none found.
func (m *GetPageByPageIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPageByPageIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Order

	// no validation rules for LessonId

	// no validation rules for LearningStatusId

	if all {
		switch v := interface{}(m.GetContents()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPageByPageIdResponseValidationError{
					field:  "Contents",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPageByPageIdResponseValidationError{
					field:  "Contents",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContents()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPageByPageIdResponseValidationError{
				field:  "Contents",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPageByPageIdResponseMultiError(errors)
	}

	return nil
}

// GetPageByPageIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetPageByPageIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPageByPageIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPageByPageIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPageByPageIdResponseMultiError) AllErrors() []error { return m }

// GetPageByPageIdResponseValidationError is the validation error returned by
// GetPageByPageIdResponse.Validate if the designated constraints aren't met.
type GetPageByPageIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPageByPageIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPageByPageIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPageByPageIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPageByPageIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPageByPageIdResponseValidationError) ErrorName() string {
	return "GetPageByPageIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPageByPageIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPageByPageIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPageByPageIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPageByPageIdResponseValidationError{}

// Validate checks the field values on
// GetDoneUserSessionItemsResponse_SessionItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDoneUserSessionItemsResponse_SessionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetDoneUserSessionItemsResponse_SessionItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetDoneUserSessionItemsResponse_SessionItemMultiError, or nil if none found.
func (m *GetDoneUserSessionItemsResponse_SessionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDoneUserSessionItemsResponse_SessionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	// no validation rules for ItemTypeId

	// no validation rules for ItemOrder

	// no validation rules for ItemName

	// no validation rules for ItemDescription

	// no validation rules for SessionId

	// no validation rules for SessionName

	// no validation rules for SessionOrder

	// no validation rules for DoneAt

	if len(errors) > 0 {
		return GetDoneUserSessionItemsResponse_SessionItemMultiError(errors)
	}

	return nil
}

// GetDoneUserSessionItemsResponse_SessionItemMultiError is an error wrapping
// multiple validation errors returned by
// GetDoneUserSessionItemsResponse_SessionItem.ValidateAll() if the designated
// constraints aren't met.
type GetDoneUserSessionItemsResponse_SessionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDoneUserSessionItemsResponse_SessionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDoneUserSessionItemsResponse_SessionItemMultiError) AllErrors() []error { return m }

// GetDoneUserSessionItemsResponse_SessionItemValidationError is the validation
// error returned by GetDoneUserSessionItemsResponse_SessionItem.Validate if
// the designated constraints aren't met.
type GetDoneUserSessionItemsResponse_SessionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDoneUserSessionItemsResponse_SessionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDoneUserSessionItemsResponse_SessionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDoneUserSessionItemsResponse_SessionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDoneUserSessionItemsResponse_SessionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDoneUserSessionItemsResponse_SessionItemValidationError) ErrorName() string {
	return "GetDoneUserSessionItemsResponse_SessionItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetDoneUserSessionItemsResponse_SessionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDoneUserSessionItemsResponse_SessionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDoneUserSessionItemsResponse_SessionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDoneUserSessionItemsResponse_SessionItemValidationError{}

// Validate checks the field values on
// GetUserRecommendedSessionItemsResponse_SessionItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserRecommendedSessionItemsResponse_SessionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserRecommendedSessionItemsResponse_SessionItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetUserRecommendedSessionItemsResponse_SessionItemMultiError, or nil if
// none found.
func (m *GetUserRecommendedSessionItemsResponse_SessionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRecommendedSessionItemsResponse_SessionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionItemId

	// no validation rules for ItemTypeId

	// no validation rules for Order

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for LearningStatus

	// no validation rules for UserLearningStatus

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetUserRecommendedSessionItemsResponse_SessionItemMultiError(errors)
	}

	return nil
}

// GetUserRecommendedSessionItemsResponse_SessionItemMultiError is an error
// wrapping multiple validation errors returned by
// GetUserRecommendedSessionItemsResponse_SessionItem.ValidateAll() if the
// designated constraints aren't met.
type GetUserRecommendedSessionItemsResponse_SessionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRecommendedSessionItemsResponse_SessionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRecommendedSessionItemsResponse_SessionItemMultiError) AllErrors() []error { return m }

// GetUserRecommendedSessionItemsResponse_SessionItemValidationError is the
// validation error returned by
// GetUserRecommendedSessionItemsResponse_SessionItem.Validate if the
// designated constraints aren't met.
type GetUserRecommendedSessionItemsResponse_SessionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRecommendedSessionItemsResponse_SessionItemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetUserRecommendedSessionItemsResponse_SessionItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetUserRecommendedSessionItemsResponse_SessionItemValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetUserRecommendedSessionItemsResponse_SessionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRecommendedSessionItemsResponse_SessionItemValidationError) ErrorName() string {
	return "GetUserRecommendedSessionItemsResponse_SessionItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRecommendedSessionItemsResponse_SessionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRecommendedSessionItemsResponse_SessionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRecommendedSessionItemsResponse_SessionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRecommendedSessionItemsResponse_SessionItemValidationError{}
