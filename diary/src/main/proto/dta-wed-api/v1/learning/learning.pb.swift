// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dta-wed-api/v1/learning/learning.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Dta_Wed_Api_V1_Learning_GetUserSessionItemsByCourseIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var courseID: Int32 = 0

  public var userID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_GetUserSessionItemsByCourseIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Dta_Wed_Api_V1_Learning_Session] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_SessionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sessionItemID: Int32 = 0

  public var itemTypeID: Int32 = 0

  public var order: Int32 = 0

  public var name: String = String()

  public var description_p: String = String()

  public var learningStatus: Int32 = 0

  public var userLearningStatus: Int32 = 0

  public var createdAt: Int32 = 0

  public var updatedAt: Int32 = 0

  public var pageIds: [Int32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_Session {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sessionID: Int32 = 0

  public var order: Int32 = 0

  public var name: String = String()

  public var description_p: String = String()

  public var projectAppID: Int32 = 0

  public var learningStatus: Int32 = 0

  public var userLearningStatus: Int32 = 0

  public var updatedAt: Int32 = 0

  public var createdAt: Int32 = 0

  public var sessionItems: [Dta_Wed_Api_V1_Learning_SessionItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var date: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sessionItems: [Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse.SessionItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct SessionItem {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var itemID: Int32 = 0

    public var itemTypeID: Int32 = 0

    public var itemOrder: Int32 = 0

    public var itemName: String = String()

    public var itemDescription: String = String()

    public var sessionID: Int32 = 0

    public var sessionName: Int32 = 0

    public var sessionOrder: Int32 = 0

    public var doneAt: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_CreateUserRecommendedSessionItemsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var sessionItemIds: [Int32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse.SessionItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct SessionItem {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var sessionItemID: Int32 = 0

    public var itemTypeID: Int32 = 0

    public var order: Int32 = 0

    public var name: String = String()

    public var description_p: String = String()

    public var learningStatus: Int32 = 0

    public var userLearningStatus: Int32 = 0

    public var createdAt: Int32 = 0

    public var updatedAt: Int32 = 0

    public var pageIds: [Int32] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_DeleteUserRecommendedSessionItemRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sessionItemID: Int32 = 0

  public var userID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_GetShuffledSessionItemsByUserIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userID: Int32 = 0

  public var shuffle: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_GetShuffledSessionItemsByUserIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: [Dta_Wed_Api_V1_Learning_SessionItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_GetPageByPageIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pageID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dta_Wed_Api_V1_Learning_GetPageByPageIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var name: String = String()

  public var description_p: String = String()

  public var order: Int32 = 0

  public var lessonID: Int32 = 0

  public var learningStatusID: Int32 = 0

  public var contents: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _contents ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_contents = newValue}
  }
  /// Returns true if `contents` has been explicitly set.
  public var hasContents: Bool {return self._contents != nil}
  /// Clears the value of `contents`. Subsequent reads from it will return its default value.
  public mutating func clearContents() {self._contents = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _contents: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Dta_Wed_Api_V1_Learning_GetUserSessionItemsByCourseIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetUserSessionItemsByCourseIdResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_SessionItem: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_Session: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse.SessionItem: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_CreateUserRecommendedSessionItemsRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse.SessionItem: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_DeleteUserRecommendedSessionItemRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetShuffledSessionItemsByUserIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetShuffledSessionItemsByUserIdResponse: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetPageByPageIdRequest: @unchecked Sendable {}
extension Dta_Wed_Api_V1_Learning_GetPageByPageIdResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dta.wed.api.v1.learning"

extension Dta_Wed_Api_V1_Learning_GetUserSessionItemsByCourseIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUserSessionItemsByCourseIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "userId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.courseID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt32Field(value: self.courseID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetUserSessionItemsByCourseIdRequest, rhs: Dta_Wed_Api_V1_Learning_GetUserSessionItemsByCourseIdRequest) -> Bool {
    if lhs.courseID != rhs.courseID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetUserSessionItemsByCourseIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUserSessionItemsByCourseIdResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetUserSessionItemsByCourseIdResponse, rhs: Dta_Wed_Api_V1_Learning_GetUserSessionItemsByCourseIdResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_SessionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SessionItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sessionItemId"),
    2: .same(proto: "itemTypeId"),
    3: .same(proto: "order"),
    4: .same(proto: "name"),
    5: .same(proto: "description"),
    6: .same(proto: "learningStatus"),
    7: .same(proto: "userLearningStatus"),
    8: .same(proto: "createdAt"),
    9: .same(proto: "updatedAt"),
    10: .same(proto: "pageIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sessionItemID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.itemTypeID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.order) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.learningStatus) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.userLearningStatus) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.createdAt) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.updatedAt) }()
      case 10: try { try decoder.decodeRepeatedInt32Field(value: &self.pageIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sessionItemID != 0 {
      try visitor.visitSingularInt32Field(value: self.sessionItemID, fieldNumber: 1)
    }
    if self.itemTypeID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemTypeID, fieldNumber: 2)
    }
    if self.order != 0 {
      try visitor.visitSingularInt32Field(value: self.order, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 5)
    }
    if self.learningStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.learningStatus, fieldNumber: 6)
    }
    if self.userLearningStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.userLearningStatus, fieldNumber: 7)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt32Field(value: self.createdAt, fieldNumber: 8)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.updatedAt, fieldNumber: 9)
    }
    if !self.pageIds.isEmpty {
      try visitor.visitPackedInt32Field(value: self.pageIds, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_SessionItem, rhs: Dta_Wed_Api_V1_Learning_SessionItem) -> Bool {
    if lhs.sessionItemID != rhs.sessionItemID {return false}
    if lhs.itemTypeID != rhs.itemTypeID {return false}
    if lhs.order != rhs.order {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.learningStatus != rhs.learningStatus {return false}
    if lhs.userLearningStatus != rhs.userLearningStatus {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.pageIds != rhs.pageIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_Session: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Session"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sessionId"),
    2: .same(proto: "order"),
    3: .same(proto: "name"),
    4: .same(proto: "description"),
    5: .same(proto: "projectAppId"),
    6: .same(proto: "learningStatus"),
    8: .same(proto: "userLearningStatus"),
    9: .same(proto: "updatedAt"),
    10: .same(proto: "createdAt"),
    11: .same(proto: "sessionItems"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sessionID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.order) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.projectAppID) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.learningStatus) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.userLearningStatus) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.updatedAt) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.createdAt) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.sessionItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sessionID != 0 {
      try visitor.visitSingularInt32Field(value: self.sessionID, fieldNumber: 1)
    }
    if self.order != 0 {
      try visitor.visitSingularInt32Field(value: self.order, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    if self.projectAppID != 0 {
      try visitor.visitSingularInt32Field(value: self.projectAppID, fieldNumber: 5)
    }
    if self.learningStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.learningStatus, fieldNumber: 6)
    }
    if self.userLearningStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.userLearningStatus, fieldNumber: 8)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.updatedAt, fieldNumber: 9)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt32Field(value: self.createdAt, fieldNumber: 10)
    }
    if !self.sessionItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sessionItems, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_Session, rhs: Dta_Wed_Api_V1_Learning_Session) -> Bool {
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.order != rhs.order {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.projectAppID != rhs.projectAppID {return false}
    if lhs.learningStatus != rhs.learningStatus {return false}
    if lhs.userLearningStatus != rhs.userLearningStatus {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.sessionItems != rhs.sessionItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDoneUserSessionItemsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "date"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.date) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if self.date != 0 {
      try visitor.visitSingularInt32Field(value: self.date, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsRequest, rhs: Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.date != rhs.date {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDoneUserSessionItemsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sessionItems"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sessionItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sessionItems, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse, rhs: Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse) -> Bool {
    if lhs.sessionItems != rhs.sessionItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse.SessionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse.protoMessageName + ".SessionItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "itemId"),
    2: .same(proto: "itemTypeId"),
    3: .same(proto: "itemOrder"),
    4: .same(proto: "itemName"),
    5: .same(proto: "itemDescription"),
    6: .same(proto: "sessionId"),
    7: .same(proto: "sessionName"),
    8: .same(proto: "sessionOrder"),
    9: .same(proto: "doneAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.itemID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.itemTypeID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.itemOrder) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.itemName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.itemDescription) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.sessionID) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.sessionName) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.sessionOrder) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.doneAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.itemID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemID, fieldNumber: 1)
    }
    if self.itemTypeID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemTypeID, fieldNumber: 2)
    }
    if self.itemOrder != 0 {
      try visitor.visitSingularInt32Field(value: self.itemOrder, fieldNumber: 3)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 4)
    }
    if !self.itemDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.itemDescription, fieldNumber: 5)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularInt32Field(value: self.sessionID, fieldNumber: 6)
    }
    if self.sessionName != 0 {
      try visitor.visitSingularInt32Field(value: self.sessionName, fieldNumber: 7)
    }
    if self.sessionOrder != 0 {
      try visitor.visitSingularInt32Field(value: self.sessionOrder, fieldNumber: 8)
    }
    if self.doneAt != 0 {
      try visitor.visitSingularInt32Field(value: self.doneAt, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse.SessionItem, rhs: Dta_Wed_Api_V1_Learning_GetDoneUserSessionItemsResponse.SessionItem) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.itemTypeID != rhs.itemTypeID {return false}
    if lhs.itemOrder != rhs.itemOrder {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.itemDescription != rhs.itemDescription {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.sessionName != rhs.sessionName {return false}
    if lhs.sessionOrder != rhs.sessionOrder {return false}
    if lhs.doneAt != rhs.doneAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_CreateUserRecommendedSessionItemsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateUserRecommendedSessionItemsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "sessionItemIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.sessionItemIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if !self.sessionItemIds.isEmpty {
      try visitor.visitPackedInt32Field(value: self.sessionItemIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_CreateUserRecommendedSessionItemsRequest, rhs: Dta_Wed_Api_V1_Learning_CreateUserRecommendedSessionItemsRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.sessionItemIds != rhs.sessionItemIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUserRecommendedSessionItemsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsRequest, rhs: Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUserRecommendedSessionItemsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse, rhs: Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse.SessionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse.protoMessageName + ".SessionItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sessionItemId"),
    2: .same(proto: "itemTypeId"),
    3: .same(proto: "order"),
    4: .same(proto: "name"),
    5: .same(proto: "description"),
    6: .same(proto: "learningStatus"),
    7: .same(proto: "userLearningStatus"),
    8: .same(proto: "createdAt"),
    9: .same(proto: "updatedAt"),
    10: .same(proto: "pageIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sessionItemID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.itemTypeID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.order) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.learningStatus) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.userLearningStatus) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.createdAt) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.updatedAt) }()
      case 10: try { try decoder.decodeRepeatedInt32Field(value: &self.pageIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sessionItemID != 0 {
      try visitor.visitSingularInt32Field(value: self.sessionItemID, fieldNumber: 1)
    }
    if self.itemTypeID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemTypeID, fieldNumber: 2)
    }
    if self.order != 0 {
      try visitor.visitSingularInt32Field(value: self.order, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 5)
    }
    if self.learningStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.learningStatus, fieldNumber: 6)
    }
    if self.userLearningStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.userLearningStatus, fieldNumber: 7)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt32Field(value: self.createdAt, fieldNumber: 8)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt32Field(value: self.updatedAt, fieldNumber: 9)
    }
    if !self.pageIds.isEmpty {
      try visitor.visitPackedInt32Field(value: self.pageIds, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse.SessionItem, rhs: Dta_Wed_Api_V1_Learning_GetUserRecommendedSessionItemsResponse.SessionItem) -> Bool {
    if lhs.sessionItemID != rhs.sessionItemID {return false}
    if lhs.itemTypeID != rhs.itemTypeID {return false}
    if lhs.order != rhs.order {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.learningStatus != rhs.learningStatus {return false}
    if lhs.userLearningStatus != rhs.userLearningStatus {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.pageIds != rhs.pageIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_DeleteUserRecommendedSessionItemRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteUserRecommendedSessionItemRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sessionItemId"),
    2: .same(proto: "userId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.sessionItemID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sessionItemID != 0 {
      try visitor.visitSingularInt32Field(value: self.sessionItemID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_DeleteUserRecommendedSessionItemRequest, rhs: Dta_Wed_Api_V1_Learning_DeleteUserRecommendedSessionItemRequest) -> Bool {
    if lhs.sessionItemID != rhs.sessionItemID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetShuffledSessionItemsByUserIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetShuffledSessionItemsByUserIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "shuffle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.shuffle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 1)
    }
    if self.shuffle != false {
      try visitor.visitSingularBoolField(value: self.shuffle, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetShuffledSessionItemsByUserIdRequest, rhs: Dta_Wed_Api_V1_Learning_GetShuffledSessionItemsByUserIdRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.shuffle != rhs.shuffle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetShuffledSessionItemsByUserIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetShuffledSessionItemsByUserIdResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetShuffledSessionItemsByUserIdResponse, rhs: Dta_Wed_Api_V1_Learning_GetShuffledSessionItemsByUserIdResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetPageByPageIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPageByPageIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pageId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.pageID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pageID != 0 {
      try visitor.visitSingularInt32Field(value: self.pageID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetPageByPageIdRequest, rhs: Dta_Wed_Api_V1_Learning_GetPageByPageIdRequest) -> Bool {
    if lhs.pageID != rhs.pageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dta_Wed_Api_V1_Learning_GetPageByPageIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPageByPageIdResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "order"),
    5: .same(proto: "lessonId"),
    6: .same(proto: "learningStatusId"),
    7: .same(proto: "contents"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.order) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.lessonID) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.learningStatusID) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._contents) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if self.order != 0 {
      try visitor.visitSingularInt32Field(value: self.order, fieldNumber: 4)
    }
    if self.lessonID != 0 {
      try visitor.visitSingularInt32Field(value: self.lessonID, fieldNumber: 5)
    }
    if self.learningStatusID != 0 {
      try visitor.visitSingularInt32Field(value: self.learningStatusID, fieldNumber: 6)
    }
    try { if let v = self._contents {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dta_Wed_Api_V1_Learning_GetPageByPageIdResponse, rhs: Dta_Wed_Api_V1_Learning_GetPageByPageIdResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.order != rhs.order {return false}
    if lhs.lessonID != rhs.lessonID {return false}
    if lhs.learningStatusID != rhs.learningStatusID {return false}
    if lhs._contents != rhs._contents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
